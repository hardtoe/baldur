// $ANTLR 3.1 jkit/java/parser/Java.g 2009-11-02 18:31:47

package jkit.java.parser;
import jkit.compiler.SyntaxError;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "UNIT", "PACKAGE", "IMPORT", "STATIC_IMPORT", "CLASS", "INTERFACE", "ENUM", "MODIFIERS", "EXTENDS", "IMPLEMENTS", "FIELD", "METHOD", "PARAMETER", "VARARGS", "TYPE", "VOID", "TYPE_PARAMETER", "THROWS", "ANNOTATION", "SUPER", "INTVAL", "FLOATVAL", "DOUBLEVAL", "CHARVAL", "STRINGVAL", "BOOLVAL", "NULLVAL", "BLOCK", "VARDEF", "ASSERT", "IF", "FOR", "WHILE", "DOWHILE", "RETURN", "THROW", "BREAK", "CONTINUE", "ASSIGN", "VAR", "LOR", "OR", "LAND", "AND", "XOR", "EQ", "NEQ", "INSTANCEOF", "LTEQ", "GTEQ", "LT", "GT", "SHL", "SHR", "USHR", "ADD", "SUB", "DIV", "MUL", "MOD", "DEREF", "NEG", "POSTINC", "PREINC", "PREDEC", "POSTDEC", "NOT", "INV", "CAST", "SELECTOR", "INVOKE", "ARRAYINDEX", "NEW", "GETCLASS", "SYNCHRONIZED", "INIT", "TEST", "STEP", "LABEL", "FOREACH", "TRY", "CATCH", "FINALLY", "CONDEXPR", "ARRAYVAL", "SWITCH", "CASE", "DEFAULT", "ARRAYINIT", "ARGUMENTS", "LABINOP", "NONE", "STATIC", "ENUM_CONSTANT", "ASSIGNOP", "PARAMETERS", "TYPE_PARAMETERS", "Identifier", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'throws'", "'['", "']'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+'", "'-'", "'/'", "'&='", "'|='", "'^='", "'%'", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'++'", "'--'", "'~'", "'!'", "'new'"
    };
    public static final int T__197=197;
    public static final int T__139=139;
    public static final int SYNCHRONIZED=78;
    public static final int T__174=174;
    public static final int HexDigit=108;
    public static final int T__196=196;
    public static final int T__144=144;
    public static final int T__122=122;
    public static final int METHOD=15;
    public static final int T__137=137;
    public static final int T__140=140;
    public static final int IMPORT=6;
    public static final int PACKAGE=5;
    public static final int CONTINUE=41;
    public static final int Letter=115;
    public static final int T__138=138;
    public static final int T__173=173;
    public static final int ASSERT=33;
    public static final int T__198=198;
    public static final int T__142=142;
    public static final int T__176=176;
    public static final int FloatTypeSuffix=111;
    public static final int T__135=135;
    public static final int EXTENDS=12;
    public static final int POSTDEC=69;
    public static final int ARRAYVAL=88;
    public static final int SUPER=23;
    public static final int IntegerTypeSuffix=109;
    public static final int ARGUMENTS=93;
    public static final int T__156=156;
    public static final int WS=117;
    public static final int NONE=95;
    public static final int PARAMETERS=99;
    public static final int T__159=159;
    public static final int T__177=177;
    public static final int T__158=158;
    public static final int FIELD=14;
    public static final int POSTINC=66;
    public static final int LAND=46;
    public static final int CATCH=85;
    public static final int STATIC=96;
    public static final int MUL=62;
    public static final int UnicodeEscape=113;
    public static final int T__157=157;
    public static final int T__201=201;
    public static final int MODIFIERS=11;
    public static final int CONDEXPR=87;
    public static final int T__143=143;
    public static final int T__193=193;
    public static final int XOR=48;
    public static final int T__141=141;
    public static final int ADD=59;
    public static final int FOREACH=83;
    public static final int TYPE=18;
    public static final int SHL=56;
    public static final int LOR=44;
    public static final int OctalLiteral=106;
    public static final int T__167=167;
    public static final int SELECTOR=73;
    public static final int T__194=194;
    public static final int CAST=72;
    public static final int THROWS=21;
    public static final int LABEL=82;
    public static final int MOD=63;
    public static final int T__191=191;
    public static final int DOWHILE=37;
    public static final int OR=45;
    public static final int BLOCK=31;
    public static final int T__192=192;
    public static final int EscapeSequence=112;
    public static final int T__202=202;
    public static final int INSTANCEOF=51;
    public static final int TYPE_PARAMETERS=100;
    public static final int FloatingPointLiteral=102;
    public static final int NEQ=50;
    public static final int T__175=175;
    public static final int WHILE=36;
    public static final int COMMENT=118;
    public static final int INVOKE=74;
    public static final int T__199=199;
    public static final int T__172=172;
    public static final int GTEQ=53;
    public static final int LABINOP=94;
    public static final int UNIT=4;
    public static final int JavaIDDigit=116;
    public static final int T__170=170;
    public static final int T__136=136;
    public static final int RETURN=38;
    public static final int IF=34;
    public static final int T__171=171;
    public static final int GETCLASS=77;
    public static final int FOR=35;
    public static final int T__189=189;
    public static final int DEFAULT=91;
    public static final int OctalEscape=114;
    public static final int STRINGVAL=28;
    public static final int T__134=134;
    public static final int T__195=195;
    public static final int NEG=65;
    public static final int DEREF=64;
    public static final int SUB=60;
    public static final int NOT=70;
    public static final int TRY=84;
    public static final int T__162=162;
    public static final int T__160=160;
    public static final int T__123=123;
    public static final int STEP=81;
    public static final int T__145=145;
    public static final int T__187=187;
    public static final int INTVAL=24;
    public static final int SHR=57;
    public static final int PREDEC=68;
    public static final int ARRAYINIT=92;
    public static final int STATIC_IMPORT=7;
    public static final int T__186=186;
    public static final int AND=47;
    public static final int T__181=181;
    public static final int T__128=128;
    public static final int NULLVAL=30;
    public static final int PREINC=67;
    public static final int T__161=161;
    public static final int FINALLY=86;
    public static final int T__168=168;
    public static final int T__203=203;
    public static final int T__150=150;
    public static final int Identifier=101;
    public static final int ENUM_CONSTANT=97;
    public static final int T__182=182;
    public static final int EQ=49;
    public static final int NEW=76;
    public static final int BOOLVAL=29;
    public static final int LT=54;
    public static final int T__165=165;
    public static final int T__130=130;
    public static final int T__151=151;
    public static final int LINE_COMMENT=119;
    public static final int CASE=90;
    public static final int INTERFACE=9;
    public static final int HexLiteral=105;
    public static final int CHARVAL=27;
    public static final int INV=71;
    public static final int T__125=125;
    public static final int T__149=149;
    public static final int LTEQ=52;
    public static final int DecimalLiteral=107;
    public static final int T__166=166;
    public static final int BREAK=40;
    public static final int T__132=132;
    public static final int ANNOTATION=22;
    public static final int DIV=61;
    public static final int T__190=190;
    public static final int T__131=131;
    public static final int T__124=124;
    public static final int T__169=169;
    public static final int THROW=39;
    public static final int T__126=126;
    public static final int T__148=148;
    public static final int INIT=79;
    public static final int T__188=188;
    public static final int T__200=200;
    public static final int VARDEF=32;
    public static final int DOUBLEVAL=26;
    public static final int TYPE_PARAMETER=20;
    public static final int ARRAYINDEX=75;
    public static final int ASSIGN=42;
    public static final int T__127=127;
    public static final int VOID=19;
    public static final int T__183=183;
    public static final int T__133=133;
    public static final int FLOATVAL=25;
    public static final int VARARGS=17;
    public static final int T__164=164;
    public static final int T__120=120;
    public static final int USHR=58;
    public static final int ENUM=10;
    public static final int T__163=163;
    public static final int Exponent=110;
    public static final int T__153=153;
    public static final int IMPLEMENTS=13;
    public static final int SWITCH=89;
    public static final int T__185=185;
    public static final int CharacterLiteral=103;
    public static final int T__178=178;
    public static final int GT=55;
    public static final int StringLiteral=104;
    public static final int ASSIGNOP=98;
    public static final int T__129=129;
    public static final int T__180=180;
    public static final int T__152=152;
    public static final int T__121=121;
    public static final int VAR=43;
    public static final int CLASS=8;
    public static final int T__147=147;
    public static final int T__179=179;
    public static final int EOF=-1;
    public static final int T__154=154;
    public static final int T__184=184;
    public static final int PARAMETER=16;
    public static final int T__155=155;
    public static final int TEST=80;
    public static final int T__146=146;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[388+1];
             
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "jkit/java/parser/Java.g"; }


        public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
    	  throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
        }    	


    public static class compilationUnit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // jkit/java/parser/Java.g:222:1: compilationUnit : ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotations_return annotations1 = null;

        JavaParser.packageDeclaration_return packageDeclaration2 = null;

        JavaParser.importDeclaration_return importDeclaration3 = null;

        JavaParser.typeDeclaration_return typeDeclaration4 = null;


        RewriteRuleSubtreeStream stream_importDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule importDeclaration");
        RewriteRuleSubtreeStream stream_packageDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule packageDeclaration");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        RewriteRuleSubtreeStream stream_typeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule typeDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // jkit/java/parser/Java.g:223:2: ( ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* ) )
            // jkit/java/parser/Java.g:223:4: ( annotations )? ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )*
            {
            // jkit/java/parser/Java.g:223:4: ( annotations )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit475);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations1.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:223:17: ( packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit478);
                    packageDeclaration2=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_packageDeclaration.add(packageDeclaration2.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:223:37: ( importDeclaration )*
            loop3:
            do {
                int alt3=2;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit481);
            	    importDeclaration3=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_importDeclaration.add(importDeclaration3.getTree());

            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // jkit/java/parser/Java.g:223:56: ( typeDeclaration )*
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit484);
            	    typeDeclaration4=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeDeclaration.add(typeDeclaration4.getTree());

            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);



            // AST REWRITE
            // elements: packageDeclaration, importDeclaration, typeDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 224:3: -> ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
            {
                // jkit/java/parser/Java.g:224:6: ^( UNIT ( packageDeclaration )? ( importDeclaration )* ( typeDeclaration )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(UNIT, "UNIT"), root_1);

                // jkit/java/parser/Java.g:224:13: ( packageDeclaration )?
                if ( stream_packageDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_packageDeclaration.nextTree());

                }
                stream_packageDeclaration.reset();
                // jkit/java/parser/Java.g:224:33: ( importDeclaration )*
                while ( stream_importDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_importDeclaration.nextTree());

                }
                stream_importDeclaration.reset();
                // jkit/java/parser/Java.g:224:52: ( typeDeclaration )*
                while ( stream_typeDeclaration.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeDeclaration.nextTree());

                }
                stream_typeDeclaration.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // jkit/java/parser/Java.g:227:1: packageDeclaration : 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal5=null;
        Token char_literal7=null;
        JavaParser.qualifiedName_return qualifiedName6 = null;


        Object string_literal5_tree=null;
        Object char_literal7_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_120=new RewriteRuleTokenStream(adaptor,"token 120");
        RewriteRuleSubtreeStream stream_qualifiedName=new RewriteRuleSubtreeStream(adaptor,"rule qualifiedName");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // jkit/java/parser/Java.g:228:2: ( 'package' qualifiedName ';' -> ^( PACKAGE qualifiedName ) )
            // jkit/java/parser/Java.g:228:4: 'package' qualifiedName ';'
            {
            string_literal5=(Token)match(input,120,FOLLOW_120_in_packageDeclaration518); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_120.add(string_literal5);

            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration520);
            qualifiedName6=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifiedName.add(qualifiedName6.getTree());
            char_literal7=(Token)match(input,121,FOLLOW_121_in_packageDeclaration522); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal7);



            // AST REWRITE
            // elements: qualifiedName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 228:32: -> ^( PACKAGE qualifiedName )
            {
                // jkit/java/parser/Java.g:228:35: ^( PACKAGE qualifiedName )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PACKAGE, "PACKAGE"), root_1);

                adaptor.addChild(root_1, stream_qualifiedName.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // jkit/java/parser/Java.g:231:1: importDeclaration : 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ) ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal8=null;
        Token string_literal9=null;
        Token char_literal10=null;
        Token char_literal11=null;
        Token char_literal12=null;
        Token char_literal13=null;
        Token char_literal14=null;
        Token char_literal15=null;
        Token i=null;
        List list_i=null;

        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object char_literal10_tree=null;
        Object char_literal11_tree=null;
        Object char_literal12_tree=null;
        Object char_literal13_tree=null;
        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_122=new RewriteRuleTokenStream(adaptor,"token 122");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // jkit/java/parser/Java.g:232:2: ( 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) ) )
            // jkit/java/parser/Java.g:232:4: 'import' ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            {
            string_literal8=(Token)match(input,122,FOLLOW_122_in_importDeclaration542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_122.add(string_literal8);

            // jkit/java/parser/Java.g:232:13: ( 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( STATIC_IMPORT ( $i)+ ) | i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';' -> ^( IMPORT ( $i)+ ) )
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==123) ) {
                alt9=1;
            }
            else if ( (LA9_0==Identifier) ) {
                alt9=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    // jkit/java/parser/Java.g:233:4: 'static' i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
                    {
                    string_literal9=(Token)match(input,123,FOLLOW_123_in_importDeclaration549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal9);

                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // jkit/java/parser/Java.g:233:27: ( '.' i+= Identifier )*
                    loop5:
                    do {
                        int alt5=2;
                        int LA5_0 = input.LA(1);

                        if ( (LA5_0==124) ) {
                            int LA5_1 = input.LA(2);

                            if ( (LA5_1==Identifier) ) {
                                alt5=1;
                            }


                        }


                        switch (alt5) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:233:28: '.' i+= Identifier
                    	    {
                    	    char_literal10=(Token)match(input,124,FOLLOW_124_in_importDeclaration556); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal10);

                    	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration560); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    break loop5;
                        }
                    } while (true);

                    // jkit/java/parser/Java.g:233:48: ( '.' i+= '*' )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==124) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // jkit/java/parser/Java.g:233:49: '.' i+= '*'
                            {
                            char_literal11=(Token)match(input,124,FOLLOW_124_in_importDeclaration565); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_124.add(char_literal11);

                            i=(Token)match(input,125,FOLLOW_125_in_importDeclaration569); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_125.add(i);

                            if (list_i==null) list_i=new ArrayList();
                            list_i.add(i);


                            }
                            break;

                    }

                    char_literal12=(Token)match(input,121,FOLLOW_121_in_importDeclaration573); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal12);



                    // AST REWRITE
                    // elements: i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 233:66: -> ^( STATIC_IMPORT ( $i)+ )
                    {
                        // jkit/java/parser/Java.g:233:69: ^( STATIC_IMPORT ( $i)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC_IMPORT, "STATIC_IMPORT"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:234:6: i+= Identifier ( '.' i+= Identifier )* ( '.' i+= '*' )? ';'
                    {
                    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i);

                    // jkit/java/parser/Java.g:234:20: ( '.' i+= Identifier )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==124) ) {
                            int LA7_1 = input.LA(2);

                            if ( (LA7_1==Identifier) ) {
                                alt7=1;
                            }


                        }


                        switch (alt7) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:234:21: '.' i+= Identifier
                    	    {
                    	    char_literal13=(Token)match(input,124,FOLLOW_124_in_importDeclaration595); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal13);

                    	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration599); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_Identifier.add(i);

                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i);


                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);

                    // jkit/java/parser/Java.g:234:41: ( '.' i+= '*' )?
                    int alt8=2;
                    int LA8_0 = input.LA(1);

                    if ( (LA8_0==124) ) {
                        alt8=1;
                    }
                    switch (alt8) {
                        case 1 :
                            // jkit/java/parser/Java.g:234:42: '.' i+= '*'
                            {
                            char_literal14=(Token)match(input,124,FOLLOW_124_in_importDeclaration604); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_124.add(char_literal14);

                            i=(Token)match(input,125,FOLLOW_125_in_importDeclaration608); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_125.add(i);

                            if (list_i==null) list_i=new ArrayList();
                            list_i.add(i);


                            }
                            break;

                    }

                    char_literal15=(Token)match(input,121,FOLLOW_121_in_importDeclaration612); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal15);



                    // AST REWRITE
                    // elements: i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 234:59: -> ^( IMPORT ( $i)+ )
                    {
                        // jkit/java/parser/Java.g:234:62: ^( IMPORT ( $i)+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPORT, "IMPORT"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // jkit/java/parser/Java.g:238:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration16 = null;


        Object char_literal17_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // jkit/java/parser/Java.g:239:2: ( classOrInterfaceDeclaration | ';' )
            int alt10=2;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // jkit/java/parser/Java.g:239:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration639);
                    classOrInterfaceDeclaration16=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration16.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:240:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal17=(Token)match(input,121,FOLLOW_121_in_typeDeclaration649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal17_tree = (Object)adaptor.create(char_literal17);
                    adaptor.addChild(root_0, char_literal17_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // jkit/java/parser/Java.g:243:1: classOrInterfaceDeclaration : ( modifier )* ( classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) ) ;
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.modifier_return modifier18 = null;

        JavaParser.classDeclaration_return classDeclaration19 = null;

        JavaParser.enumDeclaration_return enumDeclaration20 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration21 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration22 = null;


        RewriteRuleSubtreeStream stream_normalInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule normalInterfaceDeclaration");
        RewriteRuleSubtreeStream stream_annotationTypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeDeclaration");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // jkit/java/parser/Java.g:244:2: ( ( modifier )* ( classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) ) )
            // jkit/java/parser/Java.g:244:4: ( modifier )* ( classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) )
            {
            // jkit/java/parser/Java.g:244:4: ( modifier )*
            loop11:
            do {
                int alt11=2;
                alt11 = dfa11.predict(input);
                switch (alt11) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration661);
            	    modifier18=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier18.getTree());

            	    }
            	    break;

            	default :
            	    break loop11;
                }
            } while (true);

            // jkit/java/parser/Java.g:244:14: ( classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) )
            int alt12=4;
            switch ( input.LA(1) ) {
            case 126:
                {
                alt12=1;
                }
                break;
            case ENUM:
                {
                alt12=2;
                }
                break;
            case 135:
                {
                alt12=3;
                }
                break;
            case 167:
                {
                alt12=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }

            switch (alt12) {
                case 1 :
                    // jkit/java/parser/Java.g:245:3: classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration668);
                    classDeclaration19=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration19.getTree());


                    // AST REWRITE
                    // elements: classDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 245:20: -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                    {
                        // jkit/java/parser/Java.g:245:23: ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                        // jkit/java/parser/Java.g:245:31: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:245:43: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:246:5: enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration689);
                    enumDeclaration20=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration20.getTree());


                    // AST REWRITE
                    // elements: modifier, enumDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 246:21: -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                    {
                        // jkit/java/parser/Java.g:246:24: ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                        // jkit/java/parser/Java.g:246:31: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:246:43: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:247:5: normalInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_classOrInterfaceDeclaration710);
                    normalInterfaceDeclaration21=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_normalInterfaceDeclaration.add(normalInterfaceDeclaration21.getTree());


                    // AST REWRITE
                    // elements: normalInterfaceDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 247:32: -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                    {
                        // jkit/java/parser/Java.g:247:35: ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        // jkit/java/parser/Java.g:247:47: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:247:59: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_normalInterfaceDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:248:5: annotationTypeDeclaration
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_classOrInterfaceDeclaration731);
                    annotationTypeDeclaration22=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationTypeDeclaration.add(annotationTypeDeclaration22.getTree());


                    // AST REWRITE
                    // elements: modifier, annotationTypeDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 248:31: -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                    {
                        // jkit/java/parser/Java.g:248:34: ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                        // jkit/java/parser/Java.g:248:47: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:248:59: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_annotationTypeDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // jkit/java/parser/Java.g:252:1: classDeclaration : 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ^( EXTENDS ( type )? ) ^( IMPLEMENTS ( typeList )? ) ( classBody )? ;
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal23=null;
        Token Identifier24=null;
        Token string_literal26=null;
        Token string_literal28=null;
        JavaParser.typeParameters_return typeParameters25 = null;

        JavaParser.type_return type27 = null;

        JavaParser.typeList_return typeList29 = null;

        JavaParser.classBody_return classBody30 = null;


        Object string_literal23_tree=null;
        Object Identifier24_tree=null;
        Object string_literal26_tree=null;
        Object string_literal28_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // jkit/java/parser/Java.g:253:2: ( 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody -> ^( Identifier ( typeParameters )? ) ^( EXTENDS ( type )? ) ^( IMPLEMENTS ( typeList )? ) ( classBody )? )
            // jkit/java/parser/Java.g:253:4: 'class' Identifier ( typeParameters )? ( 'extends' type )? ( 'implements' typeList )? classBody
            {
            string_literal23=(Token)match(input,126,FOLLOW_126_in_classDeclaration763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_126.add(string_literal23);

            Identifier24=(Token)match(input,Identifier,FOLLOW_Identifier_in_classDeclaration765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier24);

            // jkit/java/parser/Java.g:253:23: ( typeParameters )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==129) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // jkit/java/parser/Java.g:253:24: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_classDeclaration768);
                    typeParameters25=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters25.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:254:9: ( 'extends' type )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==127) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // jkit/java/parser/Java.g:254:10: 'extends' type
                    {
                    string_literal26=(Token)match(input,127,FOLLOW_127_in_classDeclaration781); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(string_literal26);

                    pushFollow(FOLLOW_type_in_classDeclaration783);
                    type27=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type27.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:255:9: ( 'implements' typeList )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==128) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // jkit/java/parser/Java.g:255:10: 'implements' typeList
                    {
                    string_literal28=(Token)match(input,128,FOLLOW_128_in_classDeclaration797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(string_literal28);

                    pushFollow(FOLLOW_typeList_in_classDeclaration799);
                    typeList29=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList29.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_classDeclaration811);
            classBody30=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classBody.add(classBody30.getTree());


            // AST REWRITE
            // elements: Identifier, type, typeList, typeParameters, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 256:19: -> ^( Identifier ( typeParameters )? ) ^( EXTENDS ( type )? ) ^( IMPLEMENTS ( typeList )? ) ( classBody )?
            {
                // jkit/java/parser/Java.g:256:22: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/parser/Java.g:256:35: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:256:52: ^( EXTENDS ( type )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_1);

                // jkit/java/parser/Java.g:256:62: ( type )?
                if ( stream_type.hasNext() ) {
                    adaptor.addChild(root_1, stream_type.nextTree());

                }
                stream_type.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:256:69: ^( IMPLEMENTS ( typeList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                // jkit/java/parser/Java.g:256:82: ( typeList )?
                if ( stream_typeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeList.nextTree());

                }
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:256:93: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // jkit/java/parser/Java.g:259:1: typeParameters : '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> '<' ( $t)* ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal31=null;
        Token char_literal32=null;
        Token char_literal33=null;
        List list_t=null;
        JavaParser.typeParameter_return t = null;
        Object char_literal31_tree=null;
        Object char_literal32_tree=null;
        Object char_literal33_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_typeParameter=new RewriteRuleSubtreeStream(adaptor,"rule typeParameter");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // jkit/java/parser/Java.g:260:2: ( '<' t+= typeParameter ( ',' t+= typeParameter )* '>' -> '<' ( $t)* )
            // jkit/java/parser/Java.g:260:4: '<' t+= typeParameter ( ',' t+= typeParameter )* '>'
            {
            char_literal31=(Token)match(input,129,FOLLOW_129_in_typeParameters848); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal31);

            pushFollow(FOLLOW_typeParameter_in_typeParameters852);
            t=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/parser/Java.g:260:25: ( ',' t+= typeParameter )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==130) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // jkit/java/parser/Java.g:260:26: ',' t+= typeParameter
            	    {
            	    char_literal32=(Token)match(input,130,FOLLOW_130_in_typeParameters855); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal32);

            	    pushFollow(FOLLOW_typeParameter_in_typeParameters859);
            	    t=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeParameter.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            char_literal33=(Token)match(input,131,FOLLOW_131_in_typeParameters863); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal33);



            // AST REWRITE
            // elements: 129, t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 260:53: -> '<' ( $t)*
            {
                adaptor.addChild(root_0, stream_129.nextNode());
                // jkit/java/parser/Java.g:260:60: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // jkit/java/parser/Java.g:263:1: typeParameter : Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier34=null;
        Token string_literal35=null;
        JavaParser.bound_return bound36 = null;


        Object Identifier34_tree=null;
        Object string_literal35_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_bound=new RewriteRuleSubtreeStream(adaptor,"rule bound");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // jkit/java/parser/Java.g:264:2: ( Identifier ( 'extends' bound )? -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) ) )
            // jkit/java/parser/Java.g:264:4: Identifier ( 'extends' bound )?
            {
            Identifier34=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter882); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier34);

            // jkit/java/parser/Java.g:264:15: ( 'extends' bound )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==127) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // jkit/java/parser/Java.g:264:16: 'extends' bound
                    {
                    string_literal35=(Token)match(input,127,FOLLOW_127_in_typeParameter885); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(string_literal35);

                    pushFollow(FOLLOW_bound_in_typeParameter887);
                    bound36=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_bound.add(bound36.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, bound
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 264:34: -> ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
            {
                // jkit/java/parser/Java.g:264:37: ^( TYPE_PARAMETER ^( Identifier ( ^( EXTENDS bound ) )? ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_1);

                // jkit/java/parser/Java.g:264:54: ^( Identifier ( ^( EXTENDS bound ) )? )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_2);

                // jkit/java/parser/Java.g:264:67: ( ^( EXTENDS bound ) )?
                if ( stream_bound.hasNext() ) {
                    // jkit/java/parser/Java.g:264:67: ^( EXTENDS bound )
                    {
                    Object root_3 = (Object)adaptor.nil();
                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                    adaptor.addChild(root_3, stream_bound.nextTree());

                    adaptor.addChild(root_2, root_3);
                    }

                }
                stream_bound.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bound"
    // jkit/java/parser/Java.g:267:1: bound : t+= type ( '&' t+= type )* -> ( $t)* ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal37=null;
        List list_t=null;
        JavaParser.type_return t = null;
        Object char_literal37_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // jkit/java/parser/Java.g:268:2: (t+= type ( '&' t+= type )* -> ( $t)* )
            // jkit/java/parser/Java.g:268:4: t+= type ( '&' t+= type )*
            {
            pushFollow(FOLLOW_type_in_bound921);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/parser/Java.g:268:12: ( '&' t+= type )*
            loop18:
            do {
                int alt18=2;
                int LA18_0 = input.LA(1);

                if ( (LA18_0==132) ) {
                    alt18=1;
                }


                switch (alt18) {
            	case 1 :
            	    // jkit/java/parser/Java.g:268:13: '&' t+= type
            	    {
            	    char_literal37=(Token)match(input,132,FOLLOW_132_in_bound924); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_132.add(char_literal37);

            	    pushFollow(FOLLOW_type_in_bound928);
            	    t=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_type.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop18;
                }
            } while (true);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 268:27: -> ( $t)*
            {
                // jkit/java/parser/Java.g:268:30: ( $t)*
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // jkit/java/parser/Java.g:271:1: enumDeclaration : ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ^( IMPLEMENTS ( typeList )? ) ( enumBody )? ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM38=null;
        Token Identifier39=null;
        Token string_literal40=null;
        JavaParser.typeList_return typeList41 = null;

        JavaParser.enumBody_return enumBody42 = null;


        Object ENUM38_tree=null;
        Object Identifier39_tree=null;
        Object string_literal40_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_128=new RewriteRuleTokenStream(adaptor,"token 128");
        RewriteRuleTokenStream stream_ENUM=new RewriteRuleTokenStream(adaptor,"token ENUM");
        RewriteRuleSubtreeStream stream_enumBody=new RewriteRuleSubtreeStream(adaptor,"rule enumBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // jkit/java/parser/Java.g:272:2: ( ENUM Identifier ( 'implements' typeList )? enumBody -> Identifier ^( IMPLEMENTS ( typeList )? ) ( enumBody )? )
            // jkit/java/parser/Java.g:272:4: ENUM Identifier ( 'implements' typeList )? enumBody
            {
            ENUM38=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration947); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ENUM.add(ENUM38);

            Identifier39=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration949); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier39);

            // jkit/java/parser/Java.g:272:20: ( 'implements' typeList )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==128) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // jkit/java/parser/Java.g:272:21: 'implements' typeList
                    {
                    string_literal40=(Token)match(input,128,FOLLOW_128_in_enumDeclaration952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_128.add(string_literal40);

                    pushFollow(FOLLOW_typeList_in_enumDeclaration954);
                    typeList41=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList41.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration958);
            enumBody42=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumBody.add(enumBody42.getTree());


            // AST REWRITE
            // elements: typeList, Identifier, enumBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 272:54: -> Identifier ^( IMPLEMENTS ( typeList )? ) ( enumBody )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/parser/Java.g:272:68: ^( IMPLEMENTS ( typeList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                // jkit/java/parser/Java.g:272:81: ( typeList )?
                if ( stream_typeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeList.nextTree());

                }
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:272:92: ( enumBody )?
                if ( stream_enumBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBody.nextTree());

                }
                stream_enumBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // jkit/java/parser/Java.g:275:1: enumBody : '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal43=null;
        Token char_literal45=null;
        Token char_literal47=null;
        JavaParser.enumConstants_return enumConstants44 = null;

        JavaParser.enumBodyDeclarations_return enumBodyDeclarations46 = null;


        Object char_literal43_tree=null;
        Object char_literal45_tree=null;
        Object char_literal47_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_enumConstants=new RewriteRuleSubtreeStream(adaptor,"rule enumConstants");
        RewriteRuleSubtreeStream stream_enumBodyDeclarations=new RewriteRuleSubtreeStream(adaptor,"rule enumBodyDeclarations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // jkit/java/parser/Java.g:276:2: ( '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}' -> ( enumConstants )? ( enumBodyDeclarations )? )
            // jkit/java/parser/Java.g:276:4: '{' ( enumConstants )? ( ',' )? ( enumBodyDeclarations )? '}'
            {
            char_literal43=(Token)match(input,133,FOLLOW_133_in_enumBody984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal43);

            // jkit/java/parser/Java.g:276:8: ( enumConstants )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==Identifier||LA20_0==167) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody986);
                    enumConstants44=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstants.add(enumConstants44.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:276:23: ( ',' )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==130) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: ','
                    {
                    char_literal45=(Token)match(input,130,FOLLOW_130_in_enumBody989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_130.add(char_literal45);


                    }
                    break;

            }

            // jkit/java/parser/Java.g:276:28: ( enumBodyDeclarations )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==121) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody992);
                    enumBodyDeclarations46=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumBodyDeclarations.add(enumBodyDeclarations46.getTree());

                    }
                    break;

            }

            char_literal47=(Token)match(input,134,FOLLOW_134_in_enumBody995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal47);



            // AST REWRITE
            // elements: enumBodyDeclarations, enumConstants
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 276:54: -> ( enumConstants )? ( enumBodyDeclarations )?
            {
                // jkit/java/parser/Java.g:276:57: ( enumConstants )?
                if ( stream_enumConstants.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstants.nextTree());

                }
                stream_enumConstants.reset();
                // jkit/java/parser/Java.g:276:72: ( enumBodyDeclarations )?
                if ( stream_enumBodyDeclarations.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumBodyDeclarations.nextTree());

                }
                stream_enumBodyDeclarations.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // jkit/java/parser/Java.g:279:1: enumConstants : enumConstant ( ',' enumConstant )* -> ( enumConstant )+ ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal49=null;
        JavaParser.enumConstant_return enumConstant48 = null;

        JavaParser.enumConstant_return enumConstant50 = null;


        Object char_literal49_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_enumConstant=new RewriteRuleSubtreeStream(adaptor,"rule enumConstant");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // jkit/java/parser/Java.g:280:2: ( enumConstant ( ',' enumConstant )* -> ( enumConstant )+ )
            // jkit/java/parser/Java.g:280:4: enumConstant ( ',' enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants1014);
            enumConstant48=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant48.getTree());
            // jkit/java/parser/Java.g:280:17: ( ',' enumConstant )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==130) ) {
                    int LA23_1 = input.LA(2);

                    if ( (LA23_1==Identifier||LA23_1==167) ) {
                        alt23=1;
                    }


                }


                switch (alt23) {
            	case 1 :
            	    // jkit/java/parser/Java.g:280:18: ',' enumConstant
            	    {
            	    char_literal49=(Token)match(input,130,FOLLOW_130_in_enumConstants1017); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal49);

            	    pushFollow(FOLLOW_enumConstant_in_enumConstants1019);
            	    enumConstant50=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_enumConstant.add(enumConstant50.getTree());

            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);



            // AST REWRITE
            // elements: enumConstant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 280:37: -> ( enumConstant )+
            {
                if ( !(stream_enumConstant.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_enumConstant.hasNext() ) {
                    adaptor.addChild(root_0, stream_enumConstant.nextTree());

                }
                stream_enumConstant.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // jkit/java/parser/Java.g:283:1: enumConstant : ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? ) ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier52=null;
        JavaParser.annotations_return annotations51 = null;

        JavaParser.arguments_return arguments53 = null;

        JavaParser.classBody_return classBody54 = null;


        Object Identifier52_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        RewriteRuleSubtreeStream stream_annotations=new RewriteRuleSubtreeStream(adaptor,"rule annotations");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // jkit/java/parser/Java.g:284:2: ( ( annotations )? Identifier ( arguments )? ( classBody )? -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? ) )
            // jkit/java/parser/Java.g:284:4: ( annotations )? Identifier ( arguments )? ( classBody )?
            {
            // jkit/java/parser/Java.g:284:4: ( annotations )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==167) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant1038);
                    annotations51=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotations.add(annotations51.getTree());

                    }
                    break;

            }

            Identifier52=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant1041); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier52);

            // jkit/java/parser/Java.g:284:28: ( arguments )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==161) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // jkit/java/parser/Java.g:284:29: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1044);
                    arguments53=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments53.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:284:41: ( classBody )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==133) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // jkit/java/parser/Java.g:284:42: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1049);
                    classBody54=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody54.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classBody, arguments, annotations, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 284:54: -> ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? )
            {
                // jkit/java/parser/Java.g:284:57: ^( ENUM_CONSTANT ( annotations )? Identifier ( arguments )? ( classBody )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM_CONSTANT, "ENUM_CONSTANT"), root_1);

                // jkit/java/parser/Java.g:284:73: ( annotations )?
                if ( stream_annotations.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotations.nextTree());

                }
                stream_annotations.reset();
                adaptor.addChild(root_1, stream_Identifier.nextNode());
                // jkit/java/parser/Java.g:284:97: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/parser/Java.g:284:110: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_1, stream_classBody.nextTree());

                }
                stream_classBody.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // jkit/java/parser/Java.g:287:1: enumBodyDeclarations : ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal55=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration56 = null;


        Object char_literal55_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_classBodyDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classBodyDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // jkit/java/parser/Java.g:288:2: ( ';' ( classBodyDeclaration )* -> ( classBodyDeclaration )* )
            // jkit/java/parser/Java.g:288:4: ';' ( classBodyDeclaration )*
            {
            char_literal55=(Token)match(input,121,FOLLOW_121_in_enumBodyDeclarations1084); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal55);

            // jkit/java/parser/Java.g:288:8: ( classBodyDeclaration )*
            loop27:
            do {
                int alt27=2;
                alt27 = dfa27.predict(input);
                switch (alt27) {
            	case 1 :
            	    // jkit/java/parser/Java.g:288:9: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1087);
            	    classBodyDeclaration56=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_classBodyDeclaration.add(classBodyDeclaration56.getTree());

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);



            // AST REWRITE
            // elements: classBodyDeclaration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 288:32: -> ( classBodyDeclaration )*
            {
                // jkit/java/parser/Java.g:288:35: ( classBodyDeclaration )*
                while ( stream_classBodyDeclaration.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBodyDeclaration.nextTree());

                }
                stream_classBodyDeclaration.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // jkit/java/parser/Java.g:291:1: normalInterfaceDeclaration : 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ^( EXTENDS ) ^( IMPLEMENTS ( typeList )? ) ( interfaceBody )? ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal57=null;
        Token Identifier58=null;
        Token string_literal60=null;
        JavaParser.typeParameters_return typeParameters59 = null;

        JavaParser.typeList_return typeList61 = null;

        JavaParser.interfaceBody_return interfaceBody62 = null;


        Object string_literal57_tree=null;
        Object Identifier58_tree=null;
        Object string_literal60_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_interfaceBody=new RewriteRuleSubtreeStream(adaptor,"rule interfaceBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // jkit/java/parser/Java.g:292:2: ( 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody -> ^( Identifier ( typeParameters )? ) ^( EXTENDS ) ^( IMPLEMENTS ( typeList )? ) ( interfaceBody )? )
            // jkit/java/parser/Java.g:292:4: 'interface' Identifier ( typeParameters )? ( 'extends' typeList )? interfaceBody
            {
            string_literal57=(Token)match(input,135,FOLLOW_135_in_normalInterfaceDeclaration1106); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal57);

            Identifier58=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration1108); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier58);

            // jkit/java/parser/Java.g:292:27: ( typeParameters )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==129) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1110);
                    typeParameters59=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters59.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:292:43: ( 'extends' typeList )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==127) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // jkit/java/parser/Java.g:292:44: 'extends' typeList
                    {
                    string_literal60=(Token)match(input,127,FOLLOW_127_in_normalInterfaceDeclaration1114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_127.add(string_literal60);

                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1116);
                    typeList61=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList61.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration1120);
            interfaceBody62=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_interfaceBody.add(interfaceBody62.getTree());


            // AST REWRITE
            // elements: Identifier, interfaceBody, typeParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 292:79: -> ^( Identifier ( typeParameters )? ) ^( EXTENDS ) ^( IMPLEMENTS ( typeList )? ) ( interfaceBody )?
            {
                // jkit/java/parser/Java.g:292:82: ^( Identifier ( typeParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/parser/Java.g:292:95: ( typeParameters )?
                if ( stream_typeParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeParameters.nextTree());

                }
                stream_typeParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:292:112: ^( EXTENDS )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_1);

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:292:123: ^( IMPLEMENTS ( typeList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IMPLEMENTS, "IMPLEMENTS"), root_1);

                // jkit/java/parser/Java.g:292:136: ( typeList )?
                if ( stream_typeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeList.nextTree());

                }
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:292:147: ( interfaceBody )?
                if ( stream_interfaceBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_interfaceBody.nextTree());

                }
                stream_interfaceBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // jkit/java/parser/Java.g:295:1: typeList : type ( ',' type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal64=null;
        JavaParser.type_return type63 = null;

        JavaParser.type_return type65 = null;


        Object char_literal64_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // jkit/java/parser/Java.g:296:2: ( type ( ',' type )* )
            // jkit/java/parser/Java.g:296:4: type ( ',' type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1155);
            type63=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type63.getTree());
            // jkit/java/parser/Java.g:296:9: ( ',' type )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==130) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // jkit/java/parser/Java.g:296:10: ',' type
            	    {
            	    char_literal64=(Token)match(input,130,FOLLOW_130_in_typeList1158); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList1161);
            	    type65=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, type65.getTree());

            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // jkit/java/parser/Java.g:299:1: classBody : '{' ( classBodyDeclaration )* '}' ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal66=null;
        Token char_literal68=null;
        JavaParser.classBodyDeclaration_return classBodyDeclaration67 = null;


        Object char_literal66_tree=null;
        Object char_literal68_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // jkit/java/parser/Java.g:300:2: ( '{' ( classBodyDeclaration )* '}' )
            // jkit/java/parser/Java.g:300:4: '{' ( classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal66=(Token)match(input,133,FOLLOW_133_in_classBody1175); if (state.failed) return retval;
            // jkit/java/parser/Java.g:300:9: ( classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1178);
            	    classBodyDeclaration67=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classBodyDeclaration67.getTree());

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            char_literal68=(Token)match(input,134,FOLLOW_134_in_classBody1181); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // jkit/java/parser/Java.g:303:1: interfaceBody : '{' ( interfaceBodyDeclaration )* '}' ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal69=null;
        Token char_literal71=null;
        JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration70 = null;


        Object char_literal69_tree=null;
        Object char_literal71_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // jkit/java/parser/Java.g:304:2: ( '{' ( interfaceBodyDeclaration )* '}' )
            // jkit/java/parser/Java.g:304:4: '{' ( interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal69=(Token)match(input,133,FOLLOW_133_in_interfaceBody1194); if (state.failed) return retval;
            // jkit/java/parser/Java.g:304:9: ( interfaceBodyDeclaration )*
            loop32:
            do {
                int alt32=2;
                alt32 = dfa32.predict(input);
                switch (alt32) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1197);
            	    interfaceBodyDeclaration70=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceBodyDeclaration70.getTree());

            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            char_literal71=(Token)match(input,134,FOLLOW_134_in_interfaceBody1200); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // jkit/java/parser/Java.g:307:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration ) | fieldDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration ) | lc= 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) ) );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal72=null;
        Token string_literal73=null;
        Token string_literal75=null;
        Token Identifier81=null;
        Token Identifier83=null;
        JavaParser.block_return block74 = null;

        JavaParser.block_return block76 = null;

        JavaParser.modifier_return modifier77 = null;

        JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl78 = null;

        JavaParser.methodDeclaration_return methodDeclaration79 = null;

        JavaParser.fieldDeclaration_return fieldDeclaration80 = null;

        JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest82 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest84 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration85 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration86 = null;

        JavaParser.classDeclaration_return classDeclaration87 = null;

        JavaParser.enumDeclaration_return enumDeclaration88 = null;


        Object lc_tree=null;
        Object char_literal72_tree=null;
        Object string_literal73_tree=null;
        Object string_literal75_tree=null;
        Object Identifier81_tree=null;
        Object Identifier83_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_123=new RewriteRuleTokenStream(adaptor,"token 123");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_normalInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule normalInterfaceDeclaration");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_annotationTypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeDeclaration");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_fieldDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule fieldDeclaration");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorDecl=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorDecl");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_voidMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_methodDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaration");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // jkit/java/parser/Java.g:308:2: ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration ) | fieldDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration ) | lc= 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) ) )
            int alt36=4;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // jkit/java/parser/Java.g:308:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal72=(Token)match(input,121,FOLLOW_121_in_classBodyDeclaration1212); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:309:4: 'static' block
                    {
                    string_literal73=(Token)match(input,123,FOLLOW_123_in_classBodyDeclaration1218); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_123.add(string_literal73);

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1220);
                    block74=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block74.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 309:19: -> ^( STATIC block )
                    {
                        // jkit/java/parser/Java.g:309:22: ^( STATIC block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STATIC, "STATIC"), root_1);

                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:310:4: ( 'static' )? block
                    {
                    // jkit/java/parser/Java.g:310:4: ( 'static' )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==123) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: 'static'
                            {
                            string_literal75=(Token)match(input,123,FOLLOW_123_in_classBodyDeclaration1233); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_123.add(string_literal75);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1236);
                    block76=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block76.getTree());


                    // AST REWRITE
                    // elements: block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 310:20: -> block
                    {
                        adaptor.addChild(root_0, stream_block.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:311:4: ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration ) | fieldDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration ) | lc= 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) )
                    {
                    // jkit/java/parser/Java.g:311:4: ( modifier )*
                    loop34:
                    do {
                        int alt34=2;
                        alt34 = dfa34.predict(input);
                        switch (alt34) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration1245);
                    	    modifier77=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier77.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);

                    // jkit/java/parser/Java.g:311:14: ( genericMethodOrConstructorDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration ) | fieldDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration ) | lc= 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) )
                    int alt35=9;
                    alt35 = dfa35.predict(input);
                    switch (alt35) {
                        case 1 :
                            // jkit/java/parser/Java.g:312:6: genericMethodOrConstructorDecl
                            {
                            pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1255);
                            genericMethodOrConstructorDecl78=genericMethodOrConstructorDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_genericMethodOrConstructorDecl.add(genericMethodOrConstructorDecl78.getTree());


                            // AST REWRITE
                            // elements: modifier, genericMethodOrConstructorDecl
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 312:37: -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl )
                            {
                                // jkit/java/parser/Java.g:312:40: ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:312:49: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:312:61: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_genericMethodOrConstructorDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:313:9: methodDeclaration
                            {
                            pushFollow(FOLLOW_methodDeclaration_in_classBodyDeclaration1280);
                            methodDeclaration79=methodDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_methodDeclaration.add(methodDeclaration79.getTree());


                            // AST REWRITE
                            // elements: methodDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 313:27: -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration )
                            {
                                // jkit/java/parser/Java.g:313:30: ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:313:39: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:313:51: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:313:62: ^( TYPE_PARAMETERS )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_methodDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/parser/Java.g:314:9: fieldDeclaration
                            {
                            pushFollow(FOLLOW_fieldDeclaration_in_classBodyDeclaration1309);
                            fieldDeclaration80=fieldDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_fieldDeclaration.add(fieldDeclaration80.getTree());


                            // AST REWRITE
                            // elements: modifier, fieldDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 314:26: -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration )
                            {
                                // jkit/java/parser/Java.g:314:29: ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/parser/Java.g:314:37: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:314:49: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_fieldDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/parser/Java.g:315:8: lc= 'void' Identifier voidMethodDeclaratorRest
                            {
                            lc=(Token)match(input,136,FOLLOW_136_in_classBodyDeclaration1335); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_136.add(lc);

                            Identifier81=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1337); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier81);

                            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1339);
                            voidMethodDeclaratorRest82=voidMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidMethodDeclaratorRest.add(voidMethodDeclaratorRest82.getTree());


                            // AST REWRITE
                            // elements: Identifier, modifier, voidMethodDeclaratorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 315:54: -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? )
                            {
                                // jkit/java/parser/Java.g:315:57: ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:315:66: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:315:78: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:315:89: ^( TYPE_PARAMETERS )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/parser/Java.g:315:119: ^( TYPE VOID[$lc] )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, lc));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:315:137: ( voidMethodDeclaratorRest )?
                                if ( stream_voidMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidMethodDeclaratorRest.nextTree());

                                }
                                stream_voidMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/parser/Java.g:316:8: Identifier constructorDeclaratorRest
                            {
                            Identifier83=(Token)match(input,Identifier,FOLLOW_Identifier_in_classBodyDeclaration1377); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier83);

                            pushFollow(FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1379);
                            constructorDeclaratorRest84=constructorDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest84.getTree());


                            // AST REWRITE
                            // elements: constructorDeclaratorRest, modifier, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 316:45: -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest )
                            {
                                // jkit/java/parser/Java.g:316:48: ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:316:57: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:316:69: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:316:80: ^( TYPE_PARAMETERS )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/parser/Java.g:316:110: ^( NONE )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_constructorDeclaratorRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/parser/Java.g:317:8: normalInterfaceDeclaration
                            {
                            pushFollow(FOLLOW_normalInterfaceDeclaration_in_classBodyDeclaration1413);
                            normalInterfaceDeclaration85=normalInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_normalInterfaceDeclaration.add(normalInterfaceDeclaration85.getTree());


                            // AST REWRITE
                            // elements: modifier, normalInterfaceDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 317:35: -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                            {
                                // jkit/java/parser/Java.g:317:38: ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/parser/Java.g:317:50: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:317:62: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_normalInterfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/parser/Java.g:318:10: annotationTypeDeclaration
                            {
                            pushFollow(FOLLOW_annotationTypeDeclaration_in_classBodyDeclaration1439);
                            annotationTypeDeclaration86=annotationTypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotationTypeDeclaration.add(annotationTypeDeclaration86.getTree());


                            // AST REWRITE
                            // elements: annotationTypeDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 318:36: -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                            {
                                // jkit/java/parser/Java.g:318:39: ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                                // jkit/java/parser/Java.g:318:52: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:318:64: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_annotationTypeDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 8 :
                            // jkit/java/parser/Java.g:319:8: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_classBodyDeclaration1463);
                            classDeclaration87=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration87.getTree());


                            // AST REWRITE
                            // elements: modifier, classDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 319:25: -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                            {
                                // jkit/java/parser/Java.g:319:28: ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/parser/Java.g:319:36: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:319:48: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 9 :
                            // jkit/java/parser/Java.g:320:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_classBodyDeclaration1489);
                            enumDeclaration88=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration88.getTree());


                            // AST REWRITE
                            // elements: modifier, enumDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 320:26: -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                            {
                                // jkit/java/parser/Java.g:320:29: ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/parser/Java.g:320:36: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:320:48: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // jkit/java/parser/Java.g:324:1: genericMethodOrConstructorDecl : typeParameters genericMethodOrConstructorRest -> ^( TYPE_PARAMETERS typeParameters ) genericMethodOrConstructorRest ;
    public final JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        JavaParser.genericMethodOrConstructorDecl_return retval = new JavaParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.typeParameters_return typeParameters89 = null;

        JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest90 = null;


        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_genericMethodOrConstructorRest=new RewriteRuleSubtreeStream(adaptor,"rule genericMethodOrConstructorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // jkit/java/parser/Java.g:325:2: ( typeParameters genericMethodOrConstructorRest -> ^( TYPE_PARAMETERS typeParameters ) genericMethodOrConstructorRest )
            // jkit/java/parser/Java.g:325:4: typeParameters genericMethodOrConstructorRest
            {
            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1522);
            typeParameters89=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters89.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1524);
            genericMethodOrConstructorRest90=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_genericMethodOrConstructorRest.add(genericMethodOrConstructorRest90.getTree());


            // AST REWRITE
            // elements: typeParameters, genericMethodOrConstructorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 325:50: -> ^( TYPE_PARAMETERS typeParameters ) genericMethodOrConstructorRest
            {
                // jkit/java/parser/Java.g:325:53: ^( TYPE_PARAMETERS typeParameters )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_1);

                adaptor.addChild(root_1, stream_typeParameters.nextTree());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_genericMethodOrConstructorRest.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // jkit/java/parser/Java.g:328:1: genericMethodOrConstructorRest : ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | lc= 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID[$lc] ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest );
    public final JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        JavaParser.genericMethodOrConstructorRest_return retval = new JavaParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token Identifier92=null;
        Token Identifier94=null;
        Token Identifier96=null;
        JavaParser.type_return type91 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest93 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest95 = null;

        JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest97 = null;


        Object lc_tree=null;
        Object Identifier92_tree=null;
        Object Identifier94_tree=null;
        Object Identifier96_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constructorDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constructorDeclaratorRest");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // jkit/java/parser/Java.g:329:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? | lc= 'void' Identifier methodDeclaratorRest -> Identifier ^( TYPE VOID[$lc] ) ( methodDeclaratorRest )? | Identifier constructorDeclaratorRest -> Identifier ^( NONE ) constructorDeclaratorRest )
            int alt37=3;
            switch ( input.LA(1) ) {
            case Identifier:
                {
                int LA37_1 = input.LA(2);

                if ( (LA37_1==161) ) {
                    alt37=3;
                }
                else if ( (LA37_1==Identifier||LA37_1==124||LA37_1==129||LA37_1==138) ) {
                    alt37=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 37, 1, input);

                    throw nvae;
                }
                }
                break;
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
                {
                alt37=1;
                }
                break;
            case 136:
                {
                alt37=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 37, 0, input);

                throw nvae;
            }

            switch (alt37) {
                case 1 :
                    // jkit/java/parser/Java.g:329:4: type Identifier methodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1546);
                    type91=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type91.getTree());
                    Identifier92=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier92);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1550);
                    methodDeclaratorRest93=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest93.getTree());


                    // AST REWRITE
                    // elements: Identifier, methodDeclaratorRest, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 329:41: -> Identifier type ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        // jkit/java/parser/Java.g:329:60: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:330:4: lc= 'void' Identifier methodDeclaratorRest
                    {
                    lc=(Token)match(input,136,FOLLOW_136_in_genericMethodOrConstructorRest1566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(lc);

                    Identifier94=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier94);

                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1570);
                    methodDeclaratorRest95=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest95.getTree());


                    // AST REWRITE
                    // elements: methodDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 330:46: -> Identifier ^( TYPE VOID[$lc] ) ( methodDeclaratorRest )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/parser/Java.g:330:60: ^( TYPE VOID[$lc] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, lc));

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:330:78: ( methodDeclaratorRest )?
                        if ( stream_methodDeclaratorRest.hasNext() ) {
                            adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                        }
                        stream_methodDeclaratorRest.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:331:4: Identifier constructorDeclaratorRest
                    {
                    Identifier96=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1589); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier96);

                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1591);
                    constructorDeclaratorRest97=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constructorDeclaratorRest.add(constructorDeclaratorRest97.getTree());


                    // AST REWRITE
                    // elements: constructorDeclaratorRest, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 331:41: -> Identifier ^( NONE ) constructorDeclaratorRest
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/parser/Java.g:331:55: ^( NONE )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NONE, "NONE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_constructorDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // jkit/java/parser/Java.g:334:1: methodDeclaration : type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? ;
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier99=null;
        JavaParser.type_return type98 = null;

        JavaParser.methodDeclaratorRest_return methodDeclaratorRest100 = null;


        Object Identifier99_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_methodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule methodDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // jkit/java/parser/Java.g:335:2: ( type Identifier methodDeclaratorRest -> Identifier type ( methodDeclaratorRest )? )
            // jkit/java/parser/Java.g:335:4: type Identifier methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1612);
            type98=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type98.getTree());
            Identifier99=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier99);

            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1616);
            methodDeclaratorRest100=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodDeclaratorRest.add(methodDeclaratorRest100.getTree());


            // AST REWRITE
            // elements: methodDeclaratorRest, Identifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 335:41: -> Identifier type ( methodDeclaratorRest )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                adaptor.addChild(root_0, stream_type.nextTree());
                // jkit/java/parser/Java.g:335:60: ( methodDeclaratorRest )?
                if ( stream_methodDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_methodDeclaratorRest.nextTree());

                }
                stream_methodDeclaratorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // jkit/java/parser/Java.g:338:1: fieldDeclaration : type variableDeclarators ';' -> type variableDeclarators ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal103=null;
        JavaParser.type_return type101 = null;

        JavaParser.variableDeclarators_return variableDeclarators102 = null;


        Object char_literal103_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // jkit/java/parser/Java.g:339:2: ( type variableDeclarators ';' -> type variableDeclarators )
            // jkit/java/parser/Java.g:339:4: type variableDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1636);
            type101=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type101.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1638);
            variableDeclarators102=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators102.getTree());
            char_literal103=(Token)match(input,121,FOLLOW_121_in_fieldDeclaration1640); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal103);



            // AST REWRITE
            // elements: variableDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 339:33: -> type variableDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_variableDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // jkit/java/parser/Java.g:342:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl ) | lc= 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) ) | ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token Identifier107=null;
        Token Identifier110=null;
        Token char_literal116=null;
        JavaParser.modifier_return modifier104 = null;

        JavaParser.constantDeclaration_return constantDeclaration105 = null;

        JavaParser.type_return type106 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest108 = null;

        JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl109 = null;

        JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest111 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration112 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration113 = null;

        JavaParser.classDeclaration_return classDeclaration114 = null;

        JavaParser.enumDeclaration_return enumDeclaration115 = null;


        Object lc_tree=null;
        Object Identifier107_tree=null;
        Object Identifier110_tree=null;
        Object char_literal116_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_voidInterfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule voidInterfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_normalInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule normalInterfaceDeclaration");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_annotationTypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeDeclaration");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_constantDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaration");
        RewriteRuleSubtreeStream stream_interfaceGenericMethodDecl=new RewriteRuleSubtreeStream(adaptor,"rule interfaceGenericMethodDecl");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // jkit/java/parser/Java.g:343:2: ( ( modifier )* ( constantDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl ) | lc= 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) ) | ';' )
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // jkit/java/parser/Java.g:343:4: ( modifier )* ( constantDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl ) | lc= 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) )
                    {
                    // jkit/java/parser/Java.g:343:4: ( modifier )*
                    loop38:
                    do {
                        int alt38=2;
                        alt38 = dfa38.predict(input);
                        switch (alt38) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:0:0: modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1659);
                    	    modifier104=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_modifier.add(modifier104.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    // jkit/java/parser/Java.g:343:14: ( constantDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl ) | lc= 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) )
                    int alt39=8;
                    alt39 = dfa39.predict(input);
                    switch (alt39) {
                        case 1 :
                            // jkit/java/parser/Java.g:344:3: constantDeclaration
                            {
                            pushFollow(FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1666);
                            constantDeclaration105=constantDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_constantDeclaration.add(constantDeclaration105.getTree());


                            // AST REWRITE
                            // elements: constantDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 344:23: -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration )
                            {
                                // jkit/java/parser/Java.g:344:26: ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/parser/Java.g:344:34: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:344:46: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_constantDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:345:5: type Identifier interfaceMethodDeclaratorRest
                            {
                            pushFollow(FOLLOW_type_in_interfaceBodyDeclaration1687);
                            type106=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_type.add(type106.getTree());
                            Identifier107=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1689); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier107);

                            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1691);
                            interfaceMethodDeclaratorRest108=interfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest108.getTree());


                            // AST REWRITE
                            // elements: modifier, interfaceMethodDeclaratorRest, Identifier, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 345:51: -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/parser/Java.g:345:54: ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:345:63: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:345:75: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:345:86: ^( TYPE_PARAMETERS )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                adaptor.addChild(root_1, stream_type.nextTree());
                                // jkit/java/parser/Java.g:345:121: ( interfaceMethodDeclaratorRest )?
                                if ( stream_interfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_interfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_interfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/parser/Java.g:346:5: interfaceGenericMethodDecl
                            {
                            pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1721);
                            interfaceGenericMethodDecl109=interfaceGenericMethodDecl();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_interfaceGenericMethodDecl.add(interfaceGenericMethodDecl109.getTree());


                            // AST REWRITE
                            // elements: interfaceGenericMethodDecl, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 346:32: -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl )
                            {
                                // jkit/java/parser/Java.g:346:35: ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:346:44: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:346:56: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_interfaceGenericMethodDecl.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/parser/Java.g:347:5: lc= 'void' Identifier voidInterfaceMethodDeclaratorRest
                            {
                            lc=(Token)match(input,136,FOLLOW_136_in_interfaceBodyDeclaration1744); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_136.add(lc);

                            Identifier110=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceBodyDeclaration1746); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier110);

                            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1748);
                            voidInterfaceMethodDeclaratorRest111=voidInterfaceMethodDeclaratorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_voidInterfaceMethodDeclaratorRest.add(voidInterfaceMethodDeclaratorRest111.getTree());


                            // AST REWRITE
                            // elements: voidInterfaceMethodDeclaratorRest, modifier, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 347:60: -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? )
                            {
                                // jkit/java/parser/Java.g:347:63: ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:347:72: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:347:84: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:347:95: ^( TYPE_PARAMETERS )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_2);

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/parser/Java.g:347:125: ^( TYPE VOID[$lc] )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, (Object)adaptor.create(VOID, lc));

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:347:143: ( voidInterfaceMethodDeclaratorRest )?
                                if ( stream_voidInterfaceMethodDeclaratorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_voidInterfaceMethodDeclaratorRest.nextTree());

                                }
                                stream_voidInterfaceMethodDeclaratorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // jkit/java/parser/Java.g:348:5: normalInterfaceDeclaration
                            {
                            pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceBodyDeclaration1783);
                            normalInterfaceDeclaration112=normalInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_normalInterfaceDeclaration.add(normalInterfaceDeclaration112.getTree());


                            // AST REWRITE
                            // elements: normalInterfaceDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 348:32: -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                            {
                                // jkit/java/parser/Java.g:348:35: ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                                // jkit/java/parser/Java.g:348:47: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:348:59: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_normalInterfaceDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 6 :
                            // jkit/java/parser/Java.g:349:10: annotationTypeDeclaration
                            {
                            pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceBodyDeclaration1810);
                            annotationTypeDeclaration113=annotationTypeDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotationTypeDeclaration.add(annotationTypeDeclaration113.getTree());


                            // AST REWRITE
                            // elements: annotationTypeDeclaration, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 349:36: -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                            {
                                // jkit/java/parser/Java.g:349:39: ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                                // jkit/java/parser/Java.g:349:52: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:349:64: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_annotationTypeDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 7 :
                            // jkit/java/parser/Java.g:350:5: classDeclaration
                            {
                            pushFollow(FOLLOW_classDeclaration_in_interfaceBodyDeclaration1831);
                            classDeclaration114=classDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration114.getTree());


                            // AST REWRITE
                            // elements: modifier, classDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 350:22: -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                            {
                                // jkit/java/parser/Java.g:350:25: ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                                // jkit/java/parser/Java.g:350:33: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:350:45: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 8 :
                            // jkit/java/parser/Java.g:351:10: enumDeclaration
                            {
                            pushFollow(FOLLOW_enumDeclaration_in_interfaceBodyDeclaration1857);
                            enumDeclaration115=enumDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration115.getTree());


                            // AST REWRITE
                            // elements: modifier, enumDeclaration
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 351:26: -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                            {
                                // jkit/java/parser/Java.g:351:29: ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                                // jkit/java/parser/Java.g:351:36: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:351:48: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:353:4: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal116=(Token)match(input,121,FOLLOW_121_in_interfaceBodyDeclaration1881); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // jkit/java/parser/Java.g:356:1: methodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) ) ;
    public final JavaParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        JavaParser.methodDeclaratorRest_return retval = new JavaParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal118=null;
        Token char_literal121=null;
        JavaParser.formalParameters_return formalParameters117 = null;

        JavaParser.typeList_return typeList119 = null;

        JavaParser.methodBody_return methodBody120 = null;


        Object string_literal118_tree=null;
        Object char_literal121_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // jkit/java/parser/Java.g:357:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) ) )
            // jkit/java/parser/Java.g:357:4: formalParameters ( 'throws' typeList )? ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1895);
            formalParameters117=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters117.getTree());
            // jkit/java/parser/Java.g:358:9: ( 'throws' typeList )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==137) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // jkit/java/parser/Java.g:358:10: 'throws' typeList
                    {
                    string_literal118=(Token)match(input,137,FOLLOW_137_in_methodDeclaratorRest1907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(string_literal118);

                    pushFollow(FOLLOW_typeList_in_methodDeclaratorRest1909);
                    typeList119=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList119.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:359:9: ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==133) ) {
                alt42=1;
            }
            else if ( (LA42_0==121) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // jkit/java/parser/Java.g:359:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1925);
                    methodBody120=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody120.getTree());


                    // AST REWRITE
                    // elements: typeList, formalParameters, methodBody
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 359:24: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody
                    {
                        // jkit/java/parser/Java.g:359:27: ^( PARAMETERS ( formalParameters )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                        // jkit/java/parser/Java.g:359:40: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:359:59: ^( THROWS ( typeList )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                        // jkit/java/parser/Java.g:359:68: ( typeList )?
                        if ( stream_typeList.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeList.nextTree());

                        }
                        stream_typeList.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:360:13: ';'
                    {
                    char_literal121=(Token)match(input,121,FOLLOW_121_in_methodDeclaratorRest1957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal121);



                    // AST REWRITE
                    // elements: typeList, formalParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 360:17: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? )
                    {
                        // jkit/java/parser/Java.g:360:20: ^( PARAMETERS ( formalParameters )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                        // jkit/java/parser/Java.g:360:33: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:360:52: ^( THROWS ( typeList )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                        // jkit/java/parser/Java.g:360:61: ( typeList )?
                        if ( stream_typeList.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeList.nextTree());

                        }
                        stream_typeList.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // jkit/java/parser/Java.g:364:1: voidMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) ) ;
    public final JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidMethodDeclaratorRest_return retval = new JavaParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal123=null;
        Token char_literal126=null;
        JavaParser.formalParameters_return formalParameters122 = null;

        JavaParser.typeList_return typeList124 = null;

        JavaParser.methodBody_return methodBody125 = null;


        Object string_literal123_tree=null;
        Object char_literal126_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // jkit/java/parser/Java.g:365:2: ( formalParameters ( 'throws' typeList )? ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) ) )
            // jkit/java/parser/Java.g:365:4: formalParameters ( 'throws' typeList )? ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1995);
            formalParameters122=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters122.getTree());
            // jkit/java/parser/Java.g:365:21: ( 'throws' typeList )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==137) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // jkit/java/parser/Java.g:365:22: 'throws' typeList
                    {
                    string_literal123=(Token)match(input,137,FOLLOW_137_in_voidMethodDeclaratorRest1998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(string_literal123);

                    pushFollow(FOLLOW_typeList_in_voidMethodDeclaratorRest2000);
                    typeList124=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList124.getTree());

                    }
                    break;

            }

            // jkit/java/parser/Java.g:366:9: ( methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody | ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==133) ) {
                alt44=1;
            }
            else if ( (LA44_0==121) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // jkit/java/parser/Java.g:366:13: methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest2016);
                    methodBody125=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodBody.add(methodBody125.getTree());


                    // AST REWRITE
                    // elements: typeList, formalParameters, methodBody
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 366:24: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody
                    {
                        // jkit/java/parser/Java.g:366:27: ^( PARAMETERS ( formalParameters )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                        // jkit/java/parser/Java.g:366:40: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:366:59: ^( THROWS ( typeList )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                        // jkit/java/parser/Java.g:366:68: ( typeList )?
                        if ( stream_typeList.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeList.nextTree());

                        }
                        stream_typeList.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_methodBody.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:367:13: ';'
                    {
                    char_literal126=(Token)match(input,121,FOLLOW_121_in_voidMethodDeclaratorRest2048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal126);



                    // AST REWRITE
                    // elements: formalParameters, typeList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 367:17: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? )
                    {
                        // jkit/java/parser/Java.g:367:20: ^( PARAMETERS ( formalParameters )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                        // jkit/java/parser/Java.g:367:33: ( formalParameters )?
                        if ( stream_formalParameters.hasNext() ) {
                            adaptor.addChild(root_1, stream_formalParameters.nextTree());

                        }
                        stream_formalParameters.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:367:52: ^( THROWS ( typeList )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                        // jkit/java/parser/Java.g:367:61: ( typeList )?
                        if ( stream_typeList.hasNext() ) {
                            adaptor.addChild(root_1, stream_typeList.nextTree());

                        }
                        stream_typeList.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // jkit/java/parser/Java.g:371:1: interfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) ;
    public final JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.interfaceMethodDeclaratorRest_return retval = new JavaParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal128=null;
        Token char_literal130=null;
        JavaParser.formalParameters_return formalParameters127 = null;

        JavaParser.typeList_return typeList129 = null;


        Object string_literal128_tree=null;
        Object char_literal130_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // jkit/java/parser/Java.g:372:2: ( formalParameters ( 'throws' typeList )? ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) )
            // jkit/java/parser/Java.g:372:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest2086);
            formalParameters127=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters127.getTree());
            // jkit/java/parser/Java.g:372:21: ( 'throws' typeList )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==137) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // jkit/java/parser/Java.g:372:22: 'throws' typeList
                    {
                    string_literal128=(Token)match(input,137,FOLLOW_137_in_interfaceMethodDeclaratorRest2089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(string_literal128);

                    pushFollow(FOLLOW_typeList_in_interfaceMethodDeclaratorRest2091);
                    typeList129=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList129.getTree());

                    }
                    break;

            }

            char_literal130=(Token)match(input,121,FOLLOW_121_in_interfaceMethodDeclaratorRest2095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal130);



            // AST REWRITE
            // elements: typeList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 372:46: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? )
            {
                // jkit/java/parser/Java.g:372:49: ^( PARAMETERS ( formalParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                // jkit/java/parser/Java.g:372:62: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:372:81: ^( THROWS ( typeList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                // jkit/java/parser/Java.g:372:90: ( typeList )?
                if ( stream_typeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeList.nextTree());

                }
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // jkit/java/parser/Java.g:375:1: interfaceGenericMethodDecl : typeParameters ( type Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier type interfaceMethodDeclaratorRest | lc= 'void' Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier ^( TYPE VOID[$lc] ) interfaceMethodDeclaratorRest ) ;
    public final JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        JavaParser.interfaceGenericMethodDecl_return retval = new JavaParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token Identifier133=null;
        Token Identifier135=null;
        JavaParser.typeParameters_return typeParameters131 = null;

        JavaParser.type_return type132 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest134 = null;

        JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest136 = null;


        Object lc_tree=null;
        Object Identifier133_tree=null;
        Object Identifier135_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_interfaceMethodDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule interfaceMethodDeclaratorRest");
        RewriteRuleSubtreeStream stream_typeParameters=new RewriteRuleSubtreeStream(adaptor,"rule typeParameters");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // jkit/java/parser/Java.g:376:2: ( typeParameters ( type Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier type interfaceMethodDeclaratorRest | lc= 'void' Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier ^( TYPE VOID[$lc] ) interfaceMethodDeclaratorRest ) )
            // jkit/java/parser/Java.g:376:4: typeParameters ( type Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier type interfaceMethodDeclaratorRest | lc= 'void' Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier ^( TYPE VOID[$lc] ) interfaceMethodDeclaratorRest )
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl2123);
            typeParameters131=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeParameters.add(typeParameters131.getTree());
            // jkit/java/parser/Java.g:377:3: ( type Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier type interfaceMethodDeclaratorRest | lc= 'void' Identifier interfaceMethodDeclaratorRest -> ^( TYPE_PARAMETERS typeParameters ) Identifier ^( TYPE VOID[$lc] ) interfaceMethodDeclaratorRest )
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Identifier||(LA46_0>=151 && LA46_0<=158)) ) {
                alt46=1;
            }
            else if ( (LA46_0==136) ) {
                alt46=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // jkit/java/parser/Java.g:377:4: type Identifier interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl2129);
                    type132=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type132.getTree());
                    Identifier133=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl2131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier133);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2133);
                    interfaceMethodDeclaratorRest134=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest134.getTree());


                    // AST REWRITE
                    // elements: interfaceMethodDeclaratorRest, typeParameters, type, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 377:50: -> ^( TYPE_PARAMETERS typeParameters ) Identifier type interfaceMethodDeclaratorRest
                    {
                        // jkit/java/parser/Java.g:377:53: ^( TYPE_PARAMETERS typeParameters )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_1);

                        adaptor.addChild(root_1, stream_typeParameters.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        adaptor.addChild(root_0, stream_type.nextTree());
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:378:5: lc= 'void' Identifier interfaceMethodDeclaratorRest
                    {
                    lc=(Token)match(input,136,FOLLOW_136_in_interfaceGenericMethodDecl2155); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(lc);

                    Identifier135=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl2157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier135);

                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2159);
                    interfaceMethodDeclaratorRest136=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_interfaceMethodDeclaratorRest.add(interfaceMethodDeclaratorRest136.getTree());


                    // AST REWRITE
                    // elements: interfaceMethodDeclaratorRest, Identifier, typeParameters
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 378:56: -> ^( TYPE_PARAMETERS typeParameters ) Identifier ^( TYPE VOID[$lc] ) interfaceMethodDeclaratorRest
                    {
                        // jkit/java/parser/Java.g:378:59: ^( TYPE_PARAMETERS typeParameters )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETERS, "TYPE_PARAMETERS"), root_1);

                        adaptor.addChild(root_1, stream_typeParameters.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/parser/Java.g:378:104: ^( TYPE VOID[$lc] )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(VOID, lc));

                        adaptor.addChild(root_0, root_1);
                        }
                        adaptor.addChild(root_0, stream_interfaceMethodDeclaratorRest.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // jkit/java/parser/Java.g:382:1: voidInterfaceMethodDeclaratorRest : formalParameters ( 'throws' typeList )? ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) ;
    public final JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidInterfaceMethodDeclaratorRest_return retval = new JavaParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal138=null;
        Token char_literal140=null;
        JavaParser.formalParameters_return formalParameters137 = null;

        JavaParser.typeList_return typeList139 = null;


        Object string_literal138_tree=null;
        Object char_literal140_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // jkit/java/parser/Java.g:383:2: ( formalParameters ( 'throws' typeList )? ';' -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) )
            // jkit/java/parser/Java.g:383:4: formalParameters ( 'throws' typeList )? ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest2194);
            formalParameters137=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters137.getTree());
            // jkit/java/parser/Java.g:383:21: ( 'throws' typeList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==137) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // jkit/java/parser/Java.g:383:22: 'throws' typeList
                    {
                    string_literal138=(Token)match(input,137,FOLLOW_137_in_voidInterfaceMethodDeclaratorRest2197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(string_literal138);

                    pushFollow(FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest2199);
                    typeList139=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList139.getTree());

                    }
                    break;

            }

            char_literal140=(Token)match(input,121,FOLLOW_121_in_voidInterfaceMethodDeclaratorRest2203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal140);



            // AST REWRITE
            // elements: formalParameters, typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 383:46: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? )
            {
                // jkit/java/parser/Java.g:383:49: ^( PARAMETERS ( formalParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                // jkit/java/parser/Java.g:383:62: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:383:81: ^( THROWS ( typeList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                // jkit/java/parser/Java.g:383:90: ( typeList )?
                if ( stream_typeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeList.nextTree());

                }
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // jkit/java/parser/Java.g:386:1: constructorDeclaratorRest : formalParameters ( 'throws' typeList )? methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody ;
    public final JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        JavaParser.constructorDeclaratorRest_return retval = new JavaParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal142=null;
        JavaParser.formalParameters_return formalParameters141 = null;

        JavaParser.typeList_return typeList143 = null;

        JavaParser.methodBody_return methodBody144 = null;


        Object string_literal142_tree=null;
        RewriteRuleTokenStream stream_137=new RewriteRuleTokenStream(adaptor,"token 137");
        RewriteRuleSubtreeStream stream_formalParameters=new RewriteRuleSubtreeStream(adaptor,"rule formalParameters");
        RewriteRuleSubtreeStream stream_methodBody=new RewriteRuleSubtreeStream(adaptor,"rule methodBody");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // jkit/java/parser/Java.g:387:2: ( formalParameters ( 'throws' typeList )? methodBody -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody )
            // jkit/java/parser/Java.g:387:4: formalParameters ( 'throws' typeList )? methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest2231);
            formalParameters141=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameters.add(formalParameters141.getTree());
            // jkit/java/parser/Java.g:387:21: ( 'throws' typeList )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==137) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // jkit/java/parser/Java.g:387:22: 'throws' typeList
                    {
                    string_literal142=(Token)match(input,137,FOLLOW_137_in_constructorDeclaratorRest2234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_137.add(string_literal142);

                    pushFollow(FOLLOW_typeList_in_constructorDeclaratorRest2236);
                    typeList143=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeList.add(typeList143.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest2240);
            methodBody144=methodBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_methodBody.add(methodBody144.getTree());


            // AST REWRITE
            // elements: methodBody, typeList, formalParameters
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 387:53: -> ^( PARAMETERS ( formalParameters )? ) ^( THROWS ( typeList )? ) methodBody
            {
                // jkit/java/parser/Java.g:387:56: ^( PARAMETERS ( formalParameters )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETERS, "PARAMETERS"), root_1);

                // jkit/java/parser/Java.g:387:69: ( formalParameters )?
                if ( stream_formalParameters.hasNext() ) {
                    adaptor.addChild(root_1, stream_formalParameters.nextTree());

                }
                stream_formalParameters.reset();

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:387:88: ^( THROWS ( typeList )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROWS, "THROWS"), root_1);

                // jkit/java/parser/Java.g:387:97: ( typeList )?
                if ( stream_typeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeList.nextTree());

                }
                stream_typeList.reset();

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_methodBody.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // jkit/java/parser/Java.g:391:1: variableDeclarators : i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ ;
    public final JavaParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        JavaParser.variableDeclarators_return retval = new JavaParser.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal145=null;
        List list_i=null;
        JavaParser.variableDeclarator_return i = null;
        Object char_literal145_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_variableDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // jkit/java/parser/Java.g:392:2: (i+= variableDeclarator ( ',' i+= variableDeclarator )* -> ( $i)+ )
            // jkit/java/parser/Java.g:392:4: i+= variableDeclarator ( ',' i+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2273);
            i=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/parser/Java.g:392:26: ( ',' i+= variableDeclarator )*
            loop49:
            do {
                int alt49=2;
                int LA49_0 = input.LA(1);

                if ( (LA49_0==130) ) {
                    alt49=1;
                }


                switch (alt49) {
            	case 1 :
            	    // jkit/java/parser/Java.g:392:27: ',' i+= variableDeclarator
            	    {
            	    char_literal145=(Token)match(input,130,FOLLOW_130_in_variableDeclarators2276); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal145);

            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators2280);
            	    i=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop49;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 392:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // jkit/java/parser/Java.g:395:1: variableDeclarator : Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier146=null;
        JavaParser.variableDeclaratorRest_return variableDeclaratorRest147 = null;


        Object Identifier146_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_variableDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // jkit/java/parser/Java.g:396:2: ( Identifier variableDeclaratorRest -> ^( Identifier ( variableDeclaratorRest )? ) )
            // jkit/java/parser/Java.g:396:4: Identifier variableDeclaratorRest
            {
            Identifier146=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator2299); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier146);

            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator2301);
            variableDeclaratorRest147=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclaratorRest.add(variableDeclaratorRest147.getTree());


            // AST REWRITE
            // elements: Identifier, variableDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 396:38: -> ^( Identifier ( variableDeclaratorRest )? )
            {
                // jkit/java/parser/Java.g:396:41: ^( Identifier ( variableDeclaratorRest )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/parser/Java.g:396:54: ( variableDeclaratorRest )?
                if ( stream_variableDeclaratorRest.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableDeclaratorRest.nextTree());

                }
                stream_variableDeclaratorRest.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorRest"
    // jkit/java/parser/Java.g:399:1: variableDeclaratorRest : ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | );
    public final JavaParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        JavaParser.variableDeclaratorRest_return retval = new JavaParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal148=null;
        Token char_literal149=null;
        Token char_literal150=null;
        Token char_literal152=null;
        JavaParser.variableInitializer_return variableInitializer151 = null;

        JavaParser.variableInitializer_return variableInitializer153 = null;


        Object char_literal148_tree=null;
        Object char_literal149_tree=null;
        Object char_literal150_tree=null;
        Object char_literal152_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // jkit/java/parser/Java.g:400:2: ( ( '[' ']' )+ ( '=' variableInitializer )? -> ( '[' )+ ( variableInitializer )? | '=' variableInitializer -> variableInitializer | )
            int alt52=3;
            switch ( input.LA(1) ) {
            case 138:
                {
                alt52=1;
                }
                break;
            case 140:
                {
                alt52=2;
                }
                break;
            case EOF:
            case 121:
            case 130:
                {
                alt52=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }

            switch (alt52) {
                case 1 :
                    // jkit/java/parser/Java.g:400:4: ( '[' ']' )+ ( '=' variableInitializer )?
                    {
                    // jkit/java/parser/Java.g:400:4: ( '[' ']' )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==138) ) {
                            alt50=1;
                        }


                        switch (alt50) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:400:5: '[' ']'
                    	    {
                    	    char_literal148=(Token)match(input,138,FOLLOW_138_in_variableDeclaratorRest2323); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal148);

                    	    char_literal149=(Token)match(input,139,FOLLOW_139_in_variableDeclaratorRest2325); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_139.add(char_literal149);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);

                    // jkit/java/parser/Java.g:400:15: ( '=' variableInitializer )?
                    int alt51=2;
                    int LA51_0 = input.LA(1);

                    if ( (LA51_0==140) ) {
                        alt51=1;
                    }
                    switch (alt51) {
                        case 1 :
                            // jkit/java/parser/Java.g:400:16: '=' variableInitializer
                            {
                            char_literal150=(Token)match(input,140,FOLLOW_140_in_variableDeclaratorRest2330); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_140.add(char_literal150);

                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2332);
                            variableInitializer151=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer151.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: variableInitializer, 138
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 400:42: -> ( '[' )+ ( variableInitializer )?
                    {
                        if ( !(stream_138.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_138.hasNext() ) {
                            adaptor.addChild(root_0, stream_138.nextNode());

                        }
                        stream_138.reset();
                        // jkit/java/parser/Java.g:400:50: ( variableInitializer )?
                        if ( stream_variableInitializer.hasNext() ) {
                            adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                        }
                        stream_variableInitializer.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:401:4: '=' variableInitializer
                    {
                    char_literal152=(Token)match(input,140,FOLLOW_140_in_variableDeclaratorRest2347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal152);

                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest2349);
                    variableInitializer153=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer153.getTree());


                    // AST REWRITE
                    // elements: variableInitializer
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 401:28: -> variableInitializer
                    {
                        adaptor.addChild(root_0, stream_variableInitializer.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:403:2: 
                    {
                    root_0 = (Object)adaptor.nil();

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class constantDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaration"
    // jkit/java/parser/Java.g:405:1: constantDeclaration : type constantDeclarators ';' -> type constantDeclarators ;
    public final JavaParser.constantDeclaration_return constantDeclaration() throws RecognitionException {
        JavaParser.constantDeclaration_return retval = new JavaParser.constantDeclaration_return();
        retval.start = input.LT(1);
        int constantDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal156=null;
        JavaParser.type_return type154 = null;

        JavaParser.constantDeclarators_return constantDeclarators155 = null;


        Object char_literal156_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_constantDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // jkit/java/parser/Java.g:406:2: ( type constantDeclarators ';' -> type constantDeclarators )
            // jkit/java/parser/Java.g:406:4: type constantDeclarators ';'
            {
            pushFollow(FOLLOW_type_in_constantDeclaration2367);
            type154=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type154.getTree());
            pushFollow(FOLLOW_constantDeclarators_in_constantDeclaration2369);
            constantDeclarators155=constantDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarators.add(constantDeclarators155.getTree());
            char_literal156=(Token)match(input,121,FOLLOW_121_in_constantDeclaration2371); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal156);



            // AST REWRITE
            // elements: constantDeclarators, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 406:33: -> type constantDeclarators
            {
                adaptor.addChild(root_0, stream_type.nextTree());
                adaptor.addChild(root_0, stream_constantDeclarators.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, constantDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaration"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // jkit/java/parser/Java.g:409:1: constantDeclarator : Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) ;
    public final JavaParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        JavaParser.constantDeclarator_return retval = new JavaParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier157=null;
        JavaParser.constantDeclaratorRest_return constantDeclaratorRest158 = null;


        Object Identifier157_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_constantDeclaratorRest=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclaratorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // jkit/java/parser/Java.g:410:2: ( Identifier constantDeclaratorRest -> ^( Identifier constantDeclaratorRest ) )
            // jkit/java/parser/Java.g:410:4: Identifier constantDeclaratorRest
            {
            Identifier157=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator2388); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier157);

            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator2390);
            constantDeclaratorRest158=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclaratorRest.add(constantDeclaratorRest158.getTree());


            // AST REWRITE
            // elements: Identifier, constantDeclaratorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 410:38: -> ^( Identifier constantDeclaratorRest )
            {
                // jkit/java/parser/Java.g:410:41: ^( Identifier constantDeclaratorRest )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                adaptor.addChild(root_1, stream_constantDeclaratorRest.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class constantDeclarators_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarators"
    // jkit/java/parser/Java.g:413:1: constantDeclarators : i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ ;
    public final JavaParser.constantDeclarators_return constantDeclarators() throws RecognitionException {
        JavaParser.constantDeclarators_return retval = new JavaParser.constantDeclarators_return();
        retval.start = input.LT(1);
        int constantDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal159=null;
        List list_i=null;
        JavaParser.constantDeclarator_return i = null;
        Object char_literal159_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_constantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule constantDeclarator");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // jkit/java/parser/Java.g:414:2: (i+= constantDeclarator ( ',' i+= constantDeclarator )* -> ( $i)+ )
            // jkit/java/parser/Java.g:414:4: i+= constantDeclarator ( ',' i+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2413);
            i=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            if (list_i==null) list_i=new ArrayList();
            list_i.add(i.getTree());

            // jkit/java/parser/Java.g:414:26: ( ',' i+= constantDeclarator )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==130) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // jkit/java/parser/Java.g:414:27: ',' i+= constantDeclarator
            	    {
            	    char_literal159=(Token)match(input,130,FOLLOW_130_in_constantDeclarators2416); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal159);

            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclarators2420);
            	    i=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_constantDeclarator.add(i.getTree());
            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i.getTree());


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: i
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
            root_0 = (Object)adaptor.nil();
            // 414:55: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextTree());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, constantDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarators"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclaratorRest"
    // jkit/java/parser/Java.g:417:1: constantDeclaratorRest : ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer ;
    public final JavaParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        JavaParser.constantDeclaratorRest_return retval = new JavaParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal160=null;
        Token char_literal161=null;
        Token char_literal162=null;
        JavaParser.variableInitializer_return variableInitializer163 = null;


        Object char_literal160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal162_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // jkit/java/parser/Java.g:418:2: ( ( '[' ']' )* '=' variableInitializer -> ( '[' )* variableInitializer )
            // jkit/java/parser/Java.g:418:4: ( '[' ']' )* '=' variableInitializer
            {
            // jkit/java/parser/Java.g:418:4: ( '[' ']' )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==138) ) {
                    alt54=1;
                }


                switch (alt54) {
            	case 1 :
            	    // jkit/java/parser/Java.g:418:5: '[' ']'
            	    {
            	    char_literal160=(Token)match(input,138,FOLLOW_138_in_constantDeclaratorRest2441); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_138.add(char_literal160);

            	    char_literal161=(Token)match(input,139,FOLLOW_139_in_constantDeclaratorRest2443); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_139.add(char_literal161);


            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            char_literal162=(Token)match(input,140,FOLLOW_140_in_constantDeclaratorRest2447); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_140.add(char_literal162);

            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest2449);
            variableInitializer163=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer163.getTree());


            // AST REWRITE
            // elements: variableInitializer, 138
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 418:39: -> ( '[' )* variableInitializer
            {
                // jkit/java/parser/Java.g:418:42: ( '[' )*
                while ( stream_138.hasNext() ) {
                    adaptor.addChild(root_0, stream_138.nextNode());

                }
                stream_138.reset();
                adaptor.addChild(root_0, stream_variableInitializer.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // jkit/java/parser/Java.g:421:1: variableDeclaratorId : Identifier ( '[' ']' )* ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier164=null;
        Token char_literal165=null;
        Token char_literal166=null;

        Object Identifier164_tree=null;
        Object char_literal165_tree=null;
        Object char_literal166_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // jkit/java/parser/Java.g:422:2: ( Identifier ( '[' ']' )* )
            // jkit/java/parser/Java.g:422:4: Identifier ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier164=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId2468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier164_tree = (Object)adaptor.create(Identifier164);
            adaptor.addChild(root_0, Identifier164_tree);
            }
            // jkit/java/parser/Java.g:422:15: ( '[' ']' )*
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==138) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // jkit/java/parser/Java.g:422:16: '[' ']'
            	    {
            	    char_literal165=(Token)match(input,138,FOLLOW_138_in_variableDeclaratorId2471); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal165_tree = (Object)adaptor.create(char_literal165);
            	    adaptor.addChild(root_0, char_literal165_tree);
            	    }
            	    char_literal166=(Token)match(input,139,FOLLOW_139_in_variableDeclaratorId2473); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal166_tree = (Object)adaptor.create(char_literal166);
            	    adaptor.addChild(root_0, char_literal166_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop55;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // jkit/java/parser/Java.g:425:1: variableInitializer : ( arrayInitializer | expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arrayInitializer_return arrayInitializer167 = null;

        JavaParser.expression_return expression168 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // jkit/java/parser/Java.g:426:2: ( arrayInitializer | expression )
            int alt56=2;
            alt56 = dfa56.predict(input);
            switch (alt56) {
                case 1 :
                    // jkit/java/parser/Java.g:426:4: arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer2486);
                    arrayInitializer167=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayInitializer167.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:427:9: expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer2496);
                    expression168=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression168.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // jkit/java/parser/Java.g:430:1: arrayInitializer : '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal169=null;
        Token char_literal171=null;
        Token char_literal173=null;
        Token char_literal174=null;
        JavaParser.variableInitializer_return variableInitializer170 = null;

        JavaParser.variableInitializer_return variableInitializer172 = null;


        Object char_literal169_tree=null;
        Object char_literal171_tree=null;
        Object char_literal173_tree=null;
        Object char_literal174_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_variableInitializer=new RewriteRuleSubtreeStream(adaptor,"rule variableInitializer");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // jkit/java/parser/Java.g:431:2: ( '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}' -> ^( ARRAYVAL ( variableInitializer )* ) )
            // jkit/java/parser/Java.g:431:4: '{' ( variableInitializer ( ',' variableInitializer )* ( ',' )? )? '}'
            {
            char_literal169=(Token)match(input,133,FOLLOW_133_in_arrayInitializer2508); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal169);

            // jkit/java/parser/Java.g:431:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // jkit/java/parser/Java.g:431:9: variableInitializer ( ',' variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2511);
                    variableInitializer170=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer170.getTree());
                    // jkit/java/parser/Java.g:431:29: ( ',' variableInitializer )*
                    loop57:
                    do {
                        int alt57=2;
                        alt57 = dfa57.predict(input);
                        switch (alt57) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:431:30: ',' variableInitializer
                    	    {
                    	    char_literal171=(Token)match(input,130,FOLLOW_130_in_arrayInitializer2514); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal171);

                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer2516);
                    	    variableInitializer172=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableInitializer.add(variableInitializer172.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop57;
                        }
                    } while (true);

                    // jkit/java/parser/Java.g:431:56: ( ',' )?
                    int alt58=2;
                    int LA58_0 = input.LA(1);

                    if ( (LA58_0==130) ) {
                        alt58=1;
                    }
                    switch (alt58) {
                        case 1 :
                            // jkit/java/parser/Java.g:431:57: ','
                            {
                            char_literal173=(Token)match(input,130,FOLLOW_130_in_arrayInitializer2521); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_130.add(char_literal173);


                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal174=(Token)match(input,134,FOLLOW_134_in_arrayInitializer2528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal174);



            // AST REWRITE
            // elements: variableInitializer
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 431:70: -> ^( ARRAYVAL ( variableInitializer )* )
            {
                // jkit/java/parser/Java.g:431:73: ^( ARRAYVAL ( variableInitializer )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYVAL, "ARRAYVAL"), root_1);

                // jkit/java/parser/Java.g:431:84: ( variableInitializer )*
                while ( stream_variableInitializer.hasNext() ) {
                    adaptor.addChild(root_1, stream_variableInitializer.nextTree());

                }
                stream_variableInitializer.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // jkit/java/parser/Java.g:434:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal176=null;
        Token string_literal177=null;
        Token string_literal178=null;
        Token string_literal179=null;
        Token string_literal180=null;
        Token string_literal181=null;
        Token string_literal182=null;
        Token string_literal183=null;
        Token string_literal184=null;
        Token string_literal185=null;
        Token string_literal186=null;
        JavaParser.annotation_return annotation175 = null;


        Object string_literal176_tree=null;
        Object string_literal177_tree=null;
        Object string_literal178_tree=null;
        Object string_literal179_tree=null;
        Object string_literal180_tree=null;
        Object string_literal181_tree=null;
        Object string_literal182_tree=null;
        Object string_literal183_tree=null;
        Object string_literal184_tree=null;
        Object string_literal185_tree=null;
        Object string_literal186_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // jkit/java/parser/Java.g:435:5: ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' )
            int alt60=12;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // jkit/java/parser/Java.g:435:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_modifier2553);
                    annotation175=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation175.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:436:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal176=(Token)match(input,141,FOLLOW_141_in_modifier2563); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal176_tree = (Object)adaptor.create(string_literal176);
                    adaptor.addChild(root_0, string_literal176_tree);
                    }

                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:437:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal177=(Token)match(input,142,FOLLOW_142_in_modifier2573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal177_tree = (Object)adaptor.create(string_literal177);
                    adaptor.addChild(root_0, string_literal177_tree);
                    }

                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:438:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal178=(Token)match(input,143,FOLLOW_143_in_modifier2583); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal178_tree = (Object)adaptor.create(string_literal178);
                    adaptor.addChild(root_0, string_literal178_tree);
                    }

                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:439:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal179=(Token)match(input,123,FOLLOW_123_in_modifier2593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal179_tree = (Object)adaptor.create(string_literal179);
                    adaptor.addChild(root_0, string_literal179_tree);
                    }

                    }
                    break;
                case 6 :
                    // jkit/java/parser/Java.g:440:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,144,FOLLOW_144_in_modifier2603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }

                    }
                    break;
                case 7 :
                    // jkit/java/parser/Java.g:441:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal181=(Token)match(input,145,FOLLOW_145_in_modifier2613); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal181_tree = (Object)adaptor.create(string_literal181);
                    adaptor.addChild(root_0, string_literal181_tree);
                    }

                    }
                    break;
                case 8 :
                    // jkit/java/parser/Java.g:442:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal182=(Token)match(input,146,FOLLOW_146_in_modifier2623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal182_tree = (Object)adaptor.create(string_literal182);
                    adaptor.addChild(root_0, string_literal182_tree);
                    }

                    }
                    break;
                case 9 :
                    // jkit/java/parser/Java.g:443:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal183=(Token)match(input,147,FOLLOW_147_in_modifier2633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal183_tree = (Object)adaptor.create(string_literal183);
                    adaptor.addChild(root_0, string_literal183_tree);
                    }

                    }
                    break;
                case 10 :
                    // jkit/java/parser/Java.g:444:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal184=(Token)match(input,148,FOLLOW_148_in_modifier2643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal184_tree = (Object)adaptor.create(string_literal184);
                    adaptor.addChild(root_0, string_literal184_tree);
                    }

                    }
                    break;
                case 11 :
                    // jkit/java/parser/Java.g:445:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal185=(Token)match(input,149,FOLLOW_149_in_modifier2653); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal185_tree = (Object)adaptor.create(string_literal185);
                    adaptor.addChild(root_0, string_literal185_tree);
                    }

                    }
                    break;
                case 12 :
                    // jkit/java/parser/Java.g:446:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal186=(Token)match(input,150,FOLLOW_150_in_modifier2663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal186_tree = (Object)adaptor.create(string_literal186);
                    adaptor.addChild(root_0, string_literal186_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageOrTypeName"
    // jkit/java/parser/Java.g:449:1: packageOrTypeName : Identifier ( '.' Identifier )* ;
    public final JavaParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        JavaParser.packageOrTypeName_return retval = new JavaParser.packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier187=null;
        Token char_literal188=null;
        Token Identifier189=null;

        Object Identifier187_tree=null;
        Object char_literal188_tree=null;
        Object Identifier189_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // jkit/java/parser/Java.g:450:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/parser/Java.g:450:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier187=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier187_tree = (Object)adaptor.create(Identifier187);
            adaptor.addChild(root_0, Identifier187_tree);
            }
            // jkit/java/parser/Java.g:450:15: ( '.' Identifier )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==124) ) {
                    int LA61_1 = input.LA(2);

                    if ( (LA61_1==Identifier) ) {
                        int LA61_2 = input.LA(3);

                        if ( (synpred90_Java()) ) {
                            alt61=1;
                        }


                    }


                }


                switch (alt61) {
            	case 1 :
            	    // jkit/java/parser/Java.g:450:16: '.' Identifier
            	    {
            	    char_literal188=(Token)match(input,124,FOLLOW_124_in_packageOrTypeName2680); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal188_tree = (Object)adaptor.create(char_literal188);
            	    adaptor.addChild(root_0, char_literal188_tree);
            	    }
            	    Identifier189=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2682); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier189_tree = (Object)adaptor.create(Identifier189);
            	    adaptor.addChild(root_0, Identifier189_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // jkit/java/parser/Java.g:453:1: enumConstantName : Identifier ;
    public final JavaParser.enumConstantName_return enumConstantName() throws RecognitionException {
        JavaParser.enumConstantName_return retval = new JavaParser.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier190=null;

        Object Identifier190_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // jkit/java/parser/Java.g:454:5: ( Identifier )
            // jkit/java/parser/Java.g:454:9: Identifier
            {
            root_0 = (Object)adaptor.nil();

            Identifier190=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2700); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier190_tree = (Object)adaptor.create(Identifier190);
            adaptor.addChild(root_0, Identifier190_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // jkit/java/parser/Java.g:457:1: typeName : ( Identifier | packageOrTypeName '.' Identifier );
    public final JavaParser.typeName_return typeName() throws RecognitionException {
        JavaParser.typeName_return retval = new JavaParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier191=null;
        Token char_literal193=null;
        Token Identifier194=null;
        JavaParser.packageOrTypeName_return packageOrTypeName192 = null;


        Object Identifier191_tree=null;
        Object char_literal193_tree=null;
        Object Identifier194_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // jkit/java/parser/Java.g:458:2: ( Identifier | packageOrTypeName '.' Identifier )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==Identifier) ) {
                int LA62_1 = input.LA(2);

                if ( (LA62_1==124) ) {
                    alt62=2;
                }
                else if ( (LA62_1==EOF) ) {
                    alt62=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 62, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // jkit/java/parser/Java.g:458:6: Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    Identifier191=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier191_tree = (Object)adaptor.create(Identifier191);
                    adaptor.addChild(root_0, Identifier191_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:459:9: packageOrTypeName '.' Identifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2726);
                    packageOrTypeName192=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, packageOrTypeName192.getTree());
                    char_literal193=(Token)match(input,124,FOLLOW_124_in_typeName2728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal193_tree = (Object)adaptor.create(char_literal193);
                    adaptor.addChild(root_0, char_literal193_tree);
                    }
                    Identifier194=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier194_tree = (Object)adaptor.create(Identifier194);
                    adaptor.addChild(root_0, Identifier194_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // jkit/java/parser/Java.g:462:1: type : (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal195=null;
        Token char_literal196=null;
        Token char_literal197=null;
        Token char_literal199=null;
        Token char_literal200=null;
        List list_i=null;
        JavaParser.primitiveType_return primitiveType198 = null;

        JavaParser.refComponent_return i = null;
        Object char_literal195_tree=null;
        Object char_literal196_tree=null;
        Object char_literal197_tree=null;
        Object char_literal199_tree=null;
        Object char_literal200_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // jkit/java/parser/Java.g:463:2: (i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )* -> ^( TYPE ( $i)+ ( '[' )* ) | primitiveType ( '[' ']' )* -> ^( TYPE primitiveType ( '[' )* ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Identifier) ) {
                alt66=1;
            }
            else if ( ((LA66_0>=151 && LA66_0<=158)) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // jkit/java/parser/Java.g:463:4: i+= refComponent ( '.' i+= refComponent )* ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_refComponent_in_type2743);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/parser/Java.g:463:20: ( '.' i+= refComponent )*
                    loop63:
                    do {
                        int alt63=2;
                        alt63 = dfa63.predict(input);
                        switch (alt63) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:463:21: '.' i+= refComponent
                    	    {
                    	    char_literal195=(Token)match(input,124,FOLLOW_124_in_type2746); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal195);

                    	    pushFollow(FOLLOW_refComponent_in_type2750);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // jkit/java/parser/Java.g:463:43: ( '[' ']' )*
                    loop64:
                    do {
                        int alt64=2;
                        alt64 = dfa64.predict(input);
                        switch (alt64) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:463:44: '[' ']'
                    	    {
                    	    char_literal196=(Token)match(input,138,FOLLOW_138_in_type2755); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal196);

                    	    char_literal197=(Token)match(input,139,FOLLOW_139_in_type2757); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_139.add(char_literal197);


                    	    }
                    	    break;

                    	default :
                    	    break loop64;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: i, 138
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: i
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                    root_0 = (Object)adaptor.nil();
                    // 463:54: -> ^( TYPE ( $i)+ ( '[' )* )
                    {
                        // jkit/java/parser/Java.g:463:57: ^( TYPE ( $i)+ ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        if ( !(stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextTree());

                        }
                        stream_i.reset();
                        // jkit/java/parser/Java.g:463:68: ( '[' )*
                        while ( stream_138.hasNext() ) {
                            adaptor.addChild(root_1, stream_138.nextNode());

                        }
                        stream_138.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:464:4: primitiveType ( '[' ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2779);
                    primitiveType198=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType198.getTree());
                    // jkit/java/parser/Java.g:464:18: ( '[' ']' )*
                    loop65:
                    do {
                        int alt65=2;
                        alt65 = dfa65.predict(input);
                        switch (alt65) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:464:19: '[' ']'
                    	    {
                    	    char_literal199=(Token)match(input,138,FOLLOW_138_in_type2782); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_138.add(char_literal199);

                    	    char_literal200=(Token)match(input,139,FOLLOW_139_in_type2784); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_139.add(char_literal200);


                    	    }
                    	    break;

                    	default :
                    	    break loop65;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: 138, primitiveType
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 464:29: -> ^( TYPE primitiveType ( '[' )* )
                    {
                        // jkit/java/parser/Java.g:464:32: ^( TYPE primitiveType ( '[' )* )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                        adaptor.addChild(root_1, stream_primitiveType.nextTree());
                        // jkit/java/parser/Java.g:464:53: ( '[' )*
                        while ( stream_138.hasNext() ) {
                            adaptor.addChild(root_1, stream_138.nextNode());

                        }
                        stream_138.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class refComponent_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "refComponent"
    // jkit/java/parser/Java.g:467:1: refComponent : Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) ;
    public final JavaParser.refComponent_return refComponent() throws RecognitionException {
        JavaParser.refComponent_return retval = new JavaParser.refComponent_return();
        retval.start = input.LT(1);
        int refComponent_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier201=null;
        JavaParser.typeArguments_return typeArguments202 = null;


        Object Identifier201_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_typeArguments=new RewriteRuleSubtreeStream(adaptor,"rule typeArguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // jkit/java/parser/Java.g:468:5: ( Identifier ( typeArguments )? -> ^( Identifier ( typeArguments )? ) )
            // jkit/java/parser/Java.g:468:7: Identifier ( typeArguments )?
            {
            Identifier201=(Token)match(input,Identifier,FOLLOW_Identifier_in_refComponent2813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier201);

            // jkit/java/parser/Java.g:468:18: ( typeArguments )?
            int alt67=2;
            alt67 = dfa67.predict(input);
            switch (alt67) {
                case 1 :
                    // jkit/java/parser/Java.g:468:19: typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_refComponent2816);
                    typeArguments202=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeArguments.add(typeArguments202.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: Identifier, typeArguments
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 468:35: -> ^( Identifier ( typeArguments )? )
            {
                // jkit/java/parser/Java.g:468:38: ^( Identifier ( typeArguments )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_Identifier.nextNode(), root_1);

                // jkit/java/parser/Java.g:468:51: ( typeArguments )?
                if ( stream_typeArguments.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeArguments.nextTree());

                }
                stream_typeArguments.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, refComponent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "refComponent"

    public static class primitiveType_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // jkit/java/parser/Java.g:471:1: primitiveType : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token set203=null;

        Object set203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // jkit/java/parser/Java.g:472:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            // jkit/java/parser/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set203=(Token)input.LT(1);
            if ( (input.LA(1)>=151 && input.LA(1)<=158) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set203));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // jkit/java/parser/Java.g:482:1: variableModifier : ( 'final' | annotation );
    public final JavaParser.variableModifier_return variableModifier() throws RecognitionException {
        JavaParser.variableModifier_return retval = new JavaParser.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal204=null;
        JavaParser.annotation_return annotation205 = null;


        Object string_literal204_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // jkit/java/parser/Java.g:483:2: ( 'final' | annotation )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==145) ) {
                alt68=1;
            }
            else if ( (LA68_0==167) ) {
                alt68=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // jkit/java/parser/Java.g:483:4: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal204=(Token)match(input,145,FOLLOW_145_in_variableModifier2916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal204_tree = (Object)adaptor.create(string_literal204);
                    adaptor.addChild(root_0, string_literal204_tree);
                    }

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:484:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier2926);
                    annotation205=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation205.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // jkit/java/parser/Java.g:487:1: typeArguments : '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal206=null;
        Token char_literal207=null;
        Token char_literal208=null;
        List list_t=null;
        JavaParser.typeArgument_return t = null;
        Object char_literal206_tree=null;
        Object char_literal207_tree=null;
        Object char_literal208_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleSubtreeStream stream_typeArgument=new RewriteRuleSubtreeStream(adaptor,"rule typeArgument");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // jkit/java/parser/Java.g:488:2: ( '<' t+= typeArgument ( ',' t+= typeArgument )* '>' -> ( $t)+ )
            // jkit/java/parser/Java.g:488:4: '<' t+= typeArgument ( ',' t+= typeArgument )* '>'
            {
            char_literal206=(Token)match(input,129,FOLLOW_129_in_typeArguments2937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal206);

            pushFollow(FOLLOW_typeArgument_in_typeArguments2941);
            t=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // jkit/java/parser/Java.g:488:24: ( ',' t+= typeArgument )*
            loop69:
            do {
                int alt69=2;
                int LA69_0 = input.LA(1);

                if ( (LA69_0==130) ) {
                    alt69=1;
                }


                switch (alt69) {
            	case 1 :
            	    // jkit/java/parser/Java.g:488:25: ',' t+= typeArgument
            	    {
            	    char_literal207=(Token)match(input,130,FOLLOW_130_in_typeArguments2944); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_130.add(char_literal207);

            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2948);
            	    t=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_typeArgument.add(t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop69;
                }
            } while (true);

            char_literal208=(Token)match(input,131,FOLLOW_131_in_typeArguments2952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal208);



            // AST REWRITE
            // elements: t
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: t
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_t=new RewriteRuleSubtreeStream(adaptor,"token t",list_t);
            root_0 = (Object)adaptor.nil();
            // 488:51: -> ( $t)+
            {
                if ( !(stream_t.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_t.hasNext() ) {
                    adaptor.addChild(root_0, stream_t.nextTree());

                }
                stream_t.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // jkit/java/parser/Java.g:491:1: typeArgument : ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal210=null;
        Token string_literal211=null;
        Token string_literal213=null;
        JavaParser.type_return type209 = null;

        JavaParser.type_return type212 = null;

        JavaParser.type_return type214 = null;


        Object char_literal210_tree=null;
        Object string_literal211_tree=null;
        Object string_literal213_tree=null;
        RewriteRuleTokenStream stream_127=new RewriteRuleTokenStream(adaptor,"token 127");
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // jkit/java/parser/Java.g:492:2: ( type | '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) ) )
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==Identifier||(LA73_0>=151 && LA73_0<=158)) ) {
                alt73=1;
            }
            else if ( (LA73_0==159) ) {
                alt73=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }
            switch (alt73) {
                case 1 :
                    // jkit/java/parser/Java.g:492:4: type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument2970);
                    type209=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type209.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:493:4: '?' ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    {
                    char_literal210=(Token)match(input,159,FOLLOW_159_in_typeArgument2975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal210);

                    // jkit/java/parser/Java.g:493:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )
                    int alt72=2;
                    alt72 = dfa72.predict(input);
                    switch (alt72) {
                        case 1 :
                            // jkit/java/parser/Java.g:494:4: ( 'extends' type )?
                            {
                            // jkit/java/parser/Java.g:494:4: ( 'extends' type )?
                            int alt70=2;
                            int LA70_0 = input.LA(1);

                            if ( (LA70_0==127) ) {
                                alt70=1;
                            }
                            switch (alt70) {
                                case 1 :
                                    // jkit/java/parser/Java.g:494:5: 'extends' type
                                    {
                                    string_literal211=(Token)match(input,127,FOLLOW_127_in_typeArgument2984); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_127.add(string_literal211);

                                    pushFollow(FOLLOW_type_in_typeArgument2986);
                                    type212=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type212.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: 159, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 494:22: -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                            {
                                // jkit/java/parser/Java.g:494:25: ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/parser/Java.g:494:32: ^( '?' ( ^( EXTENDS type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_2);

                                // jkit/java/parser/Java.g:494:38: ( ^( EXTENDS type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/parser/Java.g:494:38: ^( EXTENDS type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(EXTENDS, "EXTENDS"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:495:12: ( 'super' type )?
                            {
                            // jkit/java/parser/Java.g:495:12: ( 'super' type )?
                            int alt71=2;
                            int LA71_0 = input.LA(1);

                            if ( (LA71_0==160) ) {
                                alt71=1;
                            }
                            switch (alt71) {
                                case 1 :
                                    // jkit/java/parser/Java.g:495:13: 'super' type
                                    {
                                    string_literal213=(Token)match(input,160,FOLLOW_160_in_typeArgument3019); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_160.add(string_literal213);

                                    pushFollow(FOLLOW_type_in_typeArgument3021);
                                    type214=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_type.add(type214.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: type, 159
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 495:28: -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                            {
                                // jkit/java/parser/Java.g:495:31: ^( TYPE ^( '?' ( ^( SUPER type ) )? ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                                // jkit/java/parser/Java.g:495:38: ^( '?' ( ^( SUPER type ) )? )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot(stream_159.nextNode(), root_2);

                                // jkit/java/parser/Java.g:495:44: ( ^( SUPER type ) )?
                                if ( stream_type.hasNext() ) {
                                    // jkit/java/parser/Java.g:495:44: ^( SUPER type )
                                    {
                                    Object root_3 = (Object)adaptor.nil();
                                    root_3 = (Object)adaptor.becomeRoot((Object)adaptor.create(SUPER, "SUPER"), root_3);

                                    adaptor.addChild(root_3, stream_type.nextTree());

                                    adaptor.addChild(root_2, root_3);
                                    }

                                }
                                stream_type.reset();

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // jkit/java/parser/Java.g:499:1: qualifiedNameList : qualifiedName ( ',' qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal216=null;
        JavaParser.qualifiedName_return qualifiedName215 = null;

        JavaParser.qualifiedName_return qualifiedName217 = null;


        Object char_literal216_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // jkit/java/parser/Java.g:500:2: ( qualifiedName ( ',' qualifiedName )* )
            // jkit/java/parser/Java.g:500:4: qualifiedName ( ',' qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList3063);
            qualifiedName215=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName215.getTree());
            // jkit/java/parser/Java.g:500:18: ( ',' qualifiedName )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( (LA74_0==130) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // jkit/java/parser/Java.g:500:19: ',' qualifiedName
            	    {
            	    char_literal216=(Token)match(input,130,FOLLOW_130_in_qualifiedNameList3066); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList3069);
            	    qualifiedName217=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qualifiedName217.getTree());

            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // jkit/java/parser/Java.g:503:1: formalParameters : '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal218=null;
        Token char_literal220=null;
        JavaParser.formalParameterDecls_return formalParameterDecls219 = null;


        Object char_literal218_tree=null;
        Object char_literal220_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // jkit/java/parser/Java.g:504:2: ( '(' ( formalParameterDecls )? ')' -> ( formalParameterDecls )? )
            // jkit/java/parser/Java.g:504:4: '(' ( formalParameterDecls )? ')'
            {
            char_literal218=(Token)match(input,161,FOLLOW_161_in_formalParameters3083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(char_literal218);

            // jkit/java/parser/Java.g:504:8: ( formalParameterDecls )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==Identifier||LA75_0==145||(LA75_0>=151 && LA75_0<=158)||LA75_0==167) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters3085);
                    formalParameterDecls219=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls219.getTree());

                    }
                    break;

            }

            char_literal220=(Token)match(input,162,FOLLOW_162_in_formalParameters3088); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(char_literal220);



            // AST REWRITE
            // elements: formalParameterDecls
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 504:34: -> ( formalParameterDecls )?
            {
                // jkit/java/parser/Java.g:504:37: ( formalParameterDecls )?
                if ( stream_formalParameterDecls.hasNext() ) {
                    adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                }
                stream_formalParameterDecls.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // jkit/java/parser/Java.g:507:1: formalParameterDecls : ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) ;
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal224=null;
        Token string_literal226=null;
        JavaParser.variableModifier_return variableModifier221 = null;

        JavaParser.type_return type222 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId223 = null;

        JavaParser.formalParameterDecls_return formalParameterDecls225 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId227 = null;


        Object char_literal224_tree=null;
        Object string_literal226_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_163=new RewriteRuleTokenStream(adaptor,"token 163");
        RewriteRuleSubtreeStream stream_variableDeclaratorId=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclaratorId");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_formalParameterDecls=new RewriteRuleSubtreeStream(adaptor,"rule formalParameterDecls");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // jkit/java/parser/Java.g:508:2: ( ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ) )
            // jkit/java/parser/Java.g:508:4: ( variableModifier )* type ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            {
            // jkit/java/parser/Java.g:508:4: ( variableModifier )*
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);

                if ( (LA76_0==145||LA76_0==167) ) {
                    alt76=1;
                }


                switch (alt76) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls3105);
            	    variableModifier221=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier221.getTree());

            	    }
            	    break;

            	default :
            	    break loop76;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls3108);
            type222=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type222.getTree());
            // jkit/java/parser/Java.g:508:27: ( variableDeclaratorId ( ',' formalParameterDecls )? -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )? | '...' variableDeclaratorId -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Identifier) ) {
                alt78=1;
            }
            else if ( (LA78_0==163) ) {
                alt78=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // jkit/java/parser/Java.g:509:9: variableDeclaratorId ( ',' formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls3120);
                    variableDeclaratorId223=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId223.getTree());
                    // jkit/java/parser/Java.g:509:30: ( ',' formalParameterDecls )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==130) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // jkit/java/parser/Java.g:509:31: ',' formalParameterDecls
                            {
                            char_literal224=(Token)match(input,130,FOLLOW_130_in_formalParameterDecls3123); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_130.add(char_literal224);

                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls3125);
                            formalParameterDecls225=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_formalParameterDecls.add(formalParameterDecls225.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: variableDeclaratorId, type, variableModifier, formalParameterDecls
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 509:58: -> ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId ) ( formalParameterDecls )?
                    {
                        // jkit/java/parser/Java.g:509:61: ^( PARAMETER ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_1);

                        // jkit/java/parser/Java.g:509:73: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:509:85: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:509:131: ( formalParameterDecls )?
                        if ( stream_formalParameterDecls.hasNext() ) {
                            adaptor.addChild(root_0, stream_formalParameterDecls.nextTree());

                        }
                        stream_formalParameterDecls.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:510:11: '...' variableDeclaratorId
                    {
                    string_literal226=(Token)match(input,163,FOLLOW_163_in_formalParameterDecls3159); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_163.add(string_literal226);

                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls3161);
                    variableDeclaratorId227=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclaratorId.add(variableDeclaratorId227.getTree());


                    // AST REWRITE
                    // elements: variableModifier, variableDeclaratorId, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 510:38: -> ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                    {
                        // jkit/java/parser/Java.g:510:41: ^( VARARGS ^( MODIFIERS ( variableModifier )* ) type variableDeclaratorId )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARARGS, "VARARGS"), root_1);

                        // jkit/java/parser/Java.g:510:51: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:510:63: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclaratorId.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // jkit/java/parser/Java.g:515:1: methodBody : block -> block ;
    public final JavaParser.methodBody_return methodBody() throws RecognitionException {
        JavaParser.methodBody_return retval = new JavaParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.block_return block228 = null;


        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // jkit/java/parser/Java.g:516:2: ( block -> block )
            // jkit/java/parser/Java.g:516:4: block
            {
            pushFollow(FOLLOW_block_in_methodBody3204);
            block228=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block228.getTree());


            // AST REWRITE
            // elements: block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 516:10: -> block
            {
                adaptor.addChild(root_0, stream_block.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // jkit/java/parser/Java.g:519:1: qualifiedName : i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal229=null;
        Token i=null;
        List list_i=null;

        Object char_literal229_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // jkit/java/parser/Java.g:520:2: (i+= Identifier ( '.' i+= Identifier )* -> ( $i)+ )
            // jkit/java/parser/Java.g:520:4: i+= Identifier ( '.' i+= Identifier )*
            {
            i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(i);

            if (list_i==null) list_i=new ArrayList();
            list_i.add(i);

            // jkit/java/parser/Java.g:520:18: ( '.' i+= Identifier )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==124) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // jkit/java/parser/Java.g:520:19: '.' i+= Identifier
            	    {
            	    char_literal229=(Token)match(input,124,FOLLOW_124_in_qualifiedName3225); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_124.add(char_literal229);

            	    i=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName3229); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_Identifier.add(i);

            	    if (list_i==null) list_i=new ArrayList();
            	    list_i.add(i);


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);



            // AST REWRITE
            // elements: i
            // token labels: 
            // rule labels: retval
            // token list labels: i
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 520:39: -> ( $i)+
            {
                if ( !(stream_i.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_i.hasNext() ) {
                    adaptor.addChild(root_0, stream_i.nextNode());

                }
                stream_i.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // jkit/java/parser/Java.g:523:1: literal : ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token FloatingPointLiteral231=null;
        Token CharacterLiteral232=null;
        Token StringLiteral233=null;
        Token string_literal235=null;
        JavaParser.integerLiteral_return integerLiteral230 = null;

        JavaParser.booleanLiteral_return booleanLiteral234 = null;


        Object FloatingPointLiteral231_tree=null;
        Object CharacterLiteral232_tree=null;
        Object StringLiteral233_tree=null;
        Object string_literal235_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_FloatingPointLiteral=new RewriteRuleTokenStream(adaptor,"token FloatingPointLiteral");
        RewriteRuleTokenStream stream_164=new RewriteRuleTokenStream(adaptor,"token 164");
        RewriteRuleTokenStream stream_CharacterLiteral=new RewriteRuleTokenStream(adaptor,"token CharacterLiteral");
        RewriteRuleSubtreeStream stream_booleanLiteral=new RewriteRuleSubtreeStream(adaptor,"rule booleanLiteral");
        RewriteRuleSubtreeStream stream_integerLiteral=new RewriteRuleSubtreeStream(adaptor,"rule integerLiteral");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // jkit/java/parser/Java.g:524:2: ( integerLiteral -> ^( INTVAL integerLiteral ) | FloatingPointLiteral -> ^( FLOATVAL FloatingPointLiteral ) | CharacterLiteral -> ^( CHARVAL CharacterLiteral ) | StringLiteral -> ^( STRINGVAL StringLiteral ) | booleanLiteral -> ^( BOOLVAL booleanLiteral ) | 'null' -> ^( NULLVAL ) )
            int alt80=6;
            switch ( input.LA(1) ) {
            case HexLiteral:
            case OctalLiteral:
            case DecimalLiteral:
                {
                alt80=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt80=2;
                }
                break;
            case CharacterLiteral:
                {
                alt80=3;
                }
                break;
            case StringLiteral:
                {
                alt80=4;
                }
                break;
            case 165:
            case 166:
                {
                alt80=5;
                }
                break;
            case 164:
                {
                alt80=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // jkit/java/parser/Java.g:524:6: integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal3252);
                    integerLiteral230=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_integerLiteral.add(integerLiteral230.getTree());


                    // AST REWRITE
                    // elements: integerLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 524:21: -> ^( INTVAL integerLiteral )
                    {
                        // jkit/java/parser/Java.g:524:24: ^( INTVAL integerLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTVAL, "INTVAL"), root_1);

                        adaptor.addChild(root_1, stream_integerLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:525:9: FloatingPointLiteral
                    {
                    FloatingPointLiteral231=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal3270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FloatingPointLiteral.add(FloatingPointLiteral231);



                    // AST REWRITE
                    // elements: FloatingPointLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 525:30: -> ^( FLOATVAL FloatingPointLiteral )
                    {
                        // jkit/java/parser/Java.g:525:33: ^( FLOATVAL FloatingPointLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FLOATVAL, "FLOATVAL"), root_1);

                        adaptor.addChild(root_1, stream_FloatingPointLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:526:9: CharacterLiteral
                    {
                    CharacterLiteral232=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal3288); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CharacterLiteral.add(CharacterLiteral232);



                    // AST REWRITE
                    // elements: CharacterLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 526:26: -> ^( CHARVAL CharacterLiteral )
                    {
                        // jkit/java/parser/Java.g:526:29: ^( CHARVAL CharacterLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CHARVAL, "CHARVAL"), root_1);

                        adaptor.addChild(root_1, stream_CharacterLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:527:9: StringLiteral
                    {
                    StringLiteral233=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal3306); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_StringLiteral.add(StringLiteral233);



                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 527:23: -> ^( STRINGVAL StringLiteral )
                    {
                        // jkit/java/parser/Java.g:527:26: ^( STRINGVAL StringLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STRINGVAL, "STRINGVAL"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.nextNode());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:528:9: booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal3324);
                    booleanLiteral234=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_booleanLiteral.add(booleanLiteral234.getTree());


                    // AST REWRITE
                    // elements: booleanLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 528:24: -> ^( BOOLVAL booleanLiteral )
                    {
                        // jkit/java/parser/Java.g:528:27: ^( BOOLVAL booleanLiteral )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BOOLVAL, "BOOLVAL"), root_1);

                        adaptor.addChild(root_1, stream_booleanLiteral.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/parser/Java.g:529:9: 'null'
                    {
                    string_literal235=(Token)match(input,164,FOLLOW_164_in_literal3342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_164.add(string_literal235);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 529:16: -> ^( NULLVAL )
                    {
                        // jkit/java/parser/Java.g:529:19: ^( NULLVAL )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NULLVAL, "NULLVAL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // jkit/java/parser/Java.g:532:1: integerLiteral : ( HexLiteral | OctalLiteral | DecimalLiteral );
    public final JavaParser.integerLiteral_return integerLiteral() throws RecognitionException {
        JavaParser.integerLiteral_return retval = new JavaParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set236=null;

        Object set236_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // jkit/java/parser/Java.g:533:5: ( HexLiteral | OctalLiteral | DecimalLiteral )
            // jkit/java/parser/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set236=(Token)input.LT(1);
            if ( (input.LA(1)>=HexLiteral && input.LA(1)<=DecimalLiteral) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set236));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // jkit/java/parser/Java.g:538:1: booleanLiteral : ( 'true' | 'false' );
    public final JavaParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        JavaParser.booleanLiteral_return retval = new JavaParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token set237=null;

        Object set237_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // jkit/java/parser/Java.g:539:5: ( 'true' | 'false' )
            // jkit/java/parser/Java.g:
            {
            root_0 = (Object)adaptor.nil();

            set237=(Token)input.LT(1);
            if ( (input.LA(1)>=165 && input.LA(1)<=166) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (Object)adaptor.create(set237));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // jkit/java/parser/Java.g:545:1: annotations : ( annotation )+ ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotation_return annotation238 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // jkit/java/parser/Java.g:546:2: ( ( annotation )+ )
            // jkit/java/parser/Java.g:546:4: ( annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/parser/Java.g:546:4: ( annotation )+
            int cnt81=0;
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3430);
            	    annotation238=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation238.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt81 >= 1 ) break loop81;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(81, input);
                        throw eee;
                }
                cnt81++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // jkit/java/parser/Java.g:549:1: annotation : lc= '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION[$lc] annotationName ( elementValuePairs )? ) ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal240=null;
        Token char_literal242=null;
        JavaParser.annotationName_return annotationName239 = null;

        JavaParser.elementValuePairs_return elementValuePairs241 = null;


        Object lc_tree=null;
        Object char_literal240_tree=null;
        Object char_literal242_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_annotationName=new RewriteRuleSubtreeStream(adaptor,"rule annotationName");
        RewriteRuleSubtreeStream stream_elementValuePairs=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairs");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // jkit/java/parser/Java.g:550:2: (lc= '@' annotationName ( '(' ( elementValuePairs )? ')' )? -> ^( ANNOTATION[$lc] annotationName ( elementValuePairs )? ) )
            // jkit/java/parser/Java.g:550:4: lc= '@' annotationName ( '(' ( elementValuePairs )? ')' )?
            {
            lc=(Token)match(input,167,FOLLOW_167_in_annotation3444); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(lc);

            pushFollow(FOLLOW_annotationName_in_annotation3446);
            annotationName239=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationName.add(annotationName239.getTree());
            // jkit/java/parser/Java.g:550:26: ( '(' ( elementValuePairs )? ')' )?
            int alt83=2;
            alt83 = dfa83.predict(input);
            switch (alt83) {
                case 1 :
                    // jkit/java/parser/Java.g:550:27: '(' ( elementValuePairs )? ')'
                    {
                    char_literal240=(Token)match(input,161,FOLLOW_161_in_annotation3449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal240);

                    // jkit/java/parser/Java.g:550:31: ( elementValuePairs )?
                    int alt82=2;
                    alt82 = dfa82.predict(input);
                    switch (alt82) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3451);
                            elementValuePairs241=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairs.add(elementValuePairs241.getTree());

                            }
                            break;

                    }

                    char_literal242=(Token)match(input,162,FOLLOW_162_in_annotation3454); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal242);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairs, annotationName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 550:56: -> ^( ANNOTATION[$lc] annotationName ( elementValuePairs )? )
            {
                // jkit/java/parser/Java.g:550:59: ^( ANNOTATION[$lc] annotationName ( elementValuePairs )? )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, lc), root_1);

                adaptor.addChild(root_1, stream_annotationName.nextTree());
                // jkit/java/parser/Java.g:550:92: ( elementValuePairs )?
                if ( stream_elementValuePairs.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairs.nextTree());

                }
                stream_elementValuePairs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // jkit/java/parser/Java.g:553:1: annotationName : Identifier ( '.' Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier243=null;
        Token char_literal244=null;
        Token Identifier245=null;

        Object Identifier243_tree=null;
        Object char_literal244_tree=null;
        Object Identifier245_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // jkit/java/parser/Java.g:554:2: ( Identifier ( '.' Identifier )* )
            // jkit/java/parser/Java.g:554:4: Identifier ( '.' Identifier )*
            {
            root_0 = (Object)adaptor.nil();

            Identifier243=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3480); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier243_tree = (Object)adaptor.create(Identifier243);
            adaptor.addChild(root_0, Identifier243_tree);
            }
            // jkit/java/parser/Java.g:554:15: ( '.' Identifier )*
            loop84:
            do {
                int alt84=2;
                alt84 = dfa84.predict(input);
                switch (alt84) {
            	case 1 :
            	    // jkit/java/parser/Java.g:554:16: '.' Identifier
            	    {
            	    char_literal244=(Token)match(input,124,FOLLOW_124_in_annotationName3483); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal244_tree = (Object)adaptor.create(char_literal244);
            	    adaptor.addChild(root_0, char_literal244_tree);
            	    }
            	    Identifier245=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3485); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    Identifier245_tree = (Object)adaptor.create(Identifier245);
            	    adaptor.addChild(root_0, Identifier245_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop84;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // jkit/java/parser/Java.g:557:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal247=null;
        JavaParser.elementValuePair_return elementValuePair246 = null;

        JavaParser.elementValuePair_return elementValuePair248 = null;


        Object char_literal247_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // jkit/java/parser/Java.g:558:2: ( elementValuePair ( ',' elementValuePair )* )
            // jkit/java/parser/Java.g:558:4: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3499);
            elementValuePair246=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair246.getTree());
            // jkit/java/parser/Java.g:558:21: ( ',' elementValuePair )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==130) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // jkit/java/parser/Java.g:558:22: ',' elementValuePair
            	    {
            	    char_literal247=(Token)match(input,130,FOLLOW_130_in_elementValuePairs3502); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal247_tree = (Object)adaptor.create(char_literal247);
            	    adaptor.addChild(root_0, char_literal247_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3504);
            	    elementValuePair248=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair248.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // jkit/java/parser/Java.g:561:1: elementValuePair : ( ( Identifier '=' ) elementValue -> ^( ASSIGN ^( VAR Identifier ) elementValue ) | elementValue -> elementValue );
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier249=null;
        Token char_literal250=null;
        JavaParser.elementValue_return elementValue251 = null;

        JavaParser.elementValue_return elementValue252 = null;


        Object Identifier249_tree=null;
        Object char_literal250_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // jkit/java/parser/Java.g:562:2: ( ( Identifier '=' ) elementValue -> ^( ASSIGN ^( VAR Identifier ) elementValue ) | elementValue -> elementValue )
            int alt86=2;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // jkit/java/parser/Java.g:562:4: ( Identifier '=' ) elementValue
                    {
                    // jkit/java/parser/Java.g:562:4: ( Identifier '=' )
                    // jkit/java/parser/Java.g:562:5: Identifier '='
                    {
                    Identifier249=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier249);

                    char_literal250=(Token)match(input,140,FOLLOW_140_in_elementValuePair3521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal250);


                    }

                    pushFollow(FOLLOW_elementValue_in_elementValuePair3524);
                    elementValue251=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue251.getTree());


                    // AST REWRITE
                    // elements: Identifier, elementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 562:34: -> ^( ASSIGN ^( VAR Identifier ) elementValue )
                    {
                        // jkit/java/parser/Java.g:562:37: ^( ASSIGN ^( VAR Identifier ) elementValue )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        // jkit/java/parser/Java.g:562:46: ^( VAR Identifier )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_2);

                        adaptor.addChild(root_2, stream_Identifier.nextNode());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_elementValue.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:563:4: elementValue
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValuePair3543);
                    elementValue252=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue252.getTree());


                    // AST REWRITE
                    // elements: elementValue
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 563:17: -> elementValue
                    {
                        adaptor.addChild(root_0, stream_elementValue.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // jkit/java/parser/Java.g:566:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.conditionalExpression_return conditionalExpression253 = null;

        JavaParser.annotation_return annotation254 = null;

        JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer255 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // jkit/java/parser/Java.g:567:2: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt87=3;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // jkit/java/parser/Java.g:567:4: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3559);
                    conditionalExpression253=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression253.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:568:6: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue3566);
                    annotation254=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation254.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:569:6: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3573);
                    elementValueArrayInitializer255=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer255.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // jkit/java/parser/Java.g:572:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? '}' -> ^( ARRAYVAL ( elementValue )+ ) ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal256=null;
        Token char_literal258=null;
        Token char_literal260=null;
        JavaParser.elementValue_return elementValue257 = null;

        JavaParser.elementValue_return elementValue259 = null;


        Object char_literal256_tree=null;
        Object char_literal258_tree=null;
        Object char_literal260_tree=null;
        RewriteRuleTokenStream stream_130=new RewriteRuleTokenStream(adaptor,"token 130");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_elementValue=new RewriteRuleSubtreeStream(adaptor,"rule elementValue");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // jkit/java/parser/Java.g:573:2: ( '{' ( elementValue ( ',' elementValue )* )? '}' -> ^( ARRAYVAL ( elementValue )+ ) )
            // jkit/java/parser/Java.g:573:4: '{' ( elementValue ( ',' elementValue )* )? '}'
            {
            char_literal256=(Token)match(input,133,FOLLOW_133_in_elementValueArrayInitializer3585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal256);

            // jkit/java/parser/Java.g:573:8: ( elementValue ( ',' elementValue )* )?
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    // jkit/java/parser/Java.g:573:9: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3588);
                    elementValue257=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValue.add(elementValue257.getTree());
                    // jkit/java/parser/Java.g:573:22: ( ',' elementValue )*
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==130) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:573:23: ',' elementValue
                    	    {
                    	    char_literal258=(Token)match(input,130,FOLLOW_130_in_elementValueArrayInitializer3591); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_130.add(char_literal258);

                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3593);
                    	    elementValue259=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValue.add(elementValue259.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop88;
                        }
                    } while (true);


                    }
                    break;

            }

            char_literal260=(Token)match(input,134,FOLLOW_134_in_elementValueArrayInitializer3600); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal260);



            // AST REWRITE
            // elements: elementValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 573:49: -> ^( ARRAYVAL ( elementValue )+ )
            {
                // jkit/java/parser/Java.g:573:52: ^( ARRAYVAL ( elementValue )+ )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYVAL, "ARRAYVAL"), root_1);

                if ( !(stream_elementValue.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_elementValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValue.nextTree());

                }
                stream_elementValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // jkit/java/parser/Java.g:576:1: annotationTypeDeclaration : '@' 'interface' Identifier annotationTypeBody -> Identifier ( annotationTypeBody )? ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal261=null;
        Token string_literal262=null;
        Token Identifier263=null;
        JavaParser.annotationTypeBody_return annotationTypeBody264 = null;


        Object char_literal261_tree=null;
        Object string_literal262_tree=null;
        Object Identifier263_tree=null;
        RewriteRuleTokenStream stream_167=new RewriteRuleTokenStream(adaptor,"token 167");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_135=new RewriteRuleTokenStream(adaptor,"token 135");
        RewriteRuleSubtreeStream stream_annotationTypeBody=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // jkit/java/parser/Java.g:577:2: ( '@' 'interface' Identifier annotationTypeBody -> Identifier ( annotationTypeBody )? )
            // jkit/java/parser/Java.g:577:4: '@' 'interface' Identifier annotationTypeBody
            {
            char_literal261=(Token)match(input,167,FOLLOW_167_in_annotationTypeDeclaration3621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_167.add(char_literal261);

            string_literal262=(Token)match(input,135,FOLLOW_135_in_annotationTypeDeclaration3623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_135.add(string_literal262);

            Identifier263=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier263);

            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3627);
            annotationTypeBody264=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_annotationTypeBody.add(annotationTypeBody264.getTree());


            // AST REWRITE
            // elements: Identifier, annotationTypeBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 577:50: -> Identifier ( annotationTypeBody )?
            {
                adaptor.addChild(root_0, stream_Identifier.nextNode());
                // jkit/java/parser/Java.g:577:64: ( annotationTypeBody )?
                if ( stream_annotationTypeBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_annotationTypeBody.nextTree());

                }
                stream_annotationTypeBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // jkit/java/parser/Java.g:580:1: annotationTypeBody : '{' ( annotationTypeElementDeclarations )? '}' ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal265=null;
        Token char_literal267=null;
        JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations266 = null;


        Object char_literal265_tree=null;
        Object char_literal267_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // jkit/java/parser/Java.g:581:2: ( '{' ( annotationTypeElementDeclarations )? '}' )
            // jkit/java/parser/Java.g:581:4: '{' ( annotationTypeElementDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal265=(Token)match(input,133,FOLLOW_133_in_annotationTypeBody3646); if (state.failed) return retval;
            // jkit/java/parser/Java.g:581:9: ( annotationTypeElementDeclarations )?
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // jkit/java/parser/Java.g:581:10: annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3650);
                    annotationTypeElementDeclarations266=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclarations266.getTree());

                    }
                    break;

            }

            char_literal267=(Token)match(input,134,FOLLOW_134_in_annotationTypeBody3654); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // jkit/java/parser/Java.g:584:1: annotationTypeElementDeclarations : ( annotationTypeElementDeclaration )* ;
    public final JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        JavaParser.annotationTypeElementDeclarations_return retval = new JavaParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration268 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // jkit/java/parser/Java.g:585:2: ( ( annotationTypeElementDeclaration )* )
            // jkit/java/parser/Java.g:585:4: ( annotationTypeElementDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/parser/Java.g:585:4: ( annotationTypeElementDeclaration )*
            loop91:
            do {
                int alt91=2;
                alt91 = dfa91.predict(input);
                switch (alt91) {
            	case 1 :
            	    // jkit/java/parser/Java.g:585:5: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3668);
            	    annotationTypeElementDeclaration268=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration268.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // jkit/java/parser/Java.g:588:1: annotationTypeElementDeclaration : ( modifier )* ( type ( annotationMethodRest ';' -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest ) | annotationConstantRest ';' -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest ) ) | classDeclaration ( ';' )? -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration ( ';' )? -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration ( ';' )? -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration ( ';' )? -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) ) ;
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal272=null;
        Token char_literal274=null;
        Token char_literal276=null;
        Token char_literal278=null;
        Token char_literal280=null;
        Token char_literal282=null;
        JavaParser.modifier_return modifier269 = null;

        JavaParser.type_return type270 = null;

        JavaParser.annotationMethodRest_return annotationMethodRest271 = null;

        JavaParser.annotationConstantRest_return annotationConstantRest273 = null;

        JavaParser.classDeclaration_return classDeclaration275 = null;

        JavaParser.enumDeclaration_return enumDeclaration277 = null;

        JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration279 = null;

        JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration281 = null;


        Object char_literal272_tree=null;
        Object char_literal274_tree=null;
        Object char_literal276_tree=null;
        Object char_literal278_tree=null;
        Object char_literal280_tree=null;
        Object char_literal282_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_normalInterfaceDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule normalInterfaceDeclaration");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_annotationTypeDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule annotationTypeDeclaration");
        RewriteRuleSubtreeStream stream_modifier=new RewriteRuleSubtreeStream(adaptor,"rule modifier");
        RewriteRuleSubtreeStream stream_annotationMethodRest=new RewriteRuleSubtreeStream(adaptor,"rule annotationMethodRest");
        RewriteRuleSubtreeStream stream_enumDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule enumDeclaration");
        RewriteRuleSubtreeStream stream_classDeclaration=new RewriteRuleSubtreeStream(adaptor,"rule classDeclaration");
        RewriteRuleSubtreeStream stream_annotationConstantRest=new RewriteRuleSubtreeStream(adaptor,"rule annotationConstantRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // jkit/java/parser/Java.g:589:2: ( ( modifier )* ( type ( annotationMethodRest ';' -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest ) | annotationConstantRest ';' -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest ) ) | classDeclaration ( ';' )? -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration ( ';' )? -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration ( ';' )? -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration ( ';' )? -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) ) )
            // jkit/java/parser/Java.g:589:4: ( modifier )* ( type ( annotationMethodRest ';' -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest ) | annotationConstantRest ';' -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest ) ) | classDeclaration ( ';' )? -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration ( ';' )? -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration ( ';' )? -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration ( ';' )? -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) )
            {
            // jkit/java/parser/Java.g:589:4: ( modifier )*
            loop92:
            do {
                int alt92=2;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // jkit/java/parser/Java.g:589:5: modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3683);
            	    modifier269=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_modifier.add(modifier269.getTree());

            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            // jkit/java/parser/Java.g:590:3: ( type ( annotationMethodRest ';' -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest ) | annotationConstantRest ';' -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest ) ) | classDeclaration ( ';' )? -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration ( ';' )? -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) | normalInterfaceDeclaration ( ';' )? -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration ( ';' )? -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) )
            int alt98=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
                {
                alt98=1;
                }
                break;
            case 126:
                {
                alt98=2;
                }
                break;
            case ENUM:
                {
                alt98=3;
                }
                break;
            case 135:
                {
                alt98=4;
                }
                break;
            case 167:
                {
                alt98=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }

            switch (alt98) {
                case 1 :
                    // jkit/java/parser/Java.g:591:4: type ( annotationMethodRest ';' -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest ) | annotationConstantRest ';' -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest ) )
                    {
                    pushFollow(FOLLOW_type_in_annotationTypeElementDeclaration3695);
                    type270=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type270.getTree());
                    // jkit/java/parser/Java.g:592:4: ( annotationMethodRest ';' -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest ) | annotationConstantRest ';' -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest ) )
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Identifier) ) {
                        int LA93_1 = input.LA(2);

                        if ( (LA93_1==161) ) {
                            alt93=1;
                        }
                        else if ( (LA93_1==121||LA93_1==130||LA93_1==138||LA93_1==140) ) {
                            alt93=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 93, 1, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 93, 0, input);

                        throw nvae;
                    }
                    switch (alt93) {
                        case 1 :
                            // jkit/java/parser/Java.g:593:5: annotationMethodRest ';'
                            {
                            pushFollow(FOLLOW_annotationMethodRest_in_annotationTypeElementDeclaration3707);
                            annotationMethodRest271=annotationMethodRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotationMethodRest.add(annotationMethodRest271.getTree());
                            char_literal272=(Token)match(input,121,FOLLOW_121_in_annotationTypeElementDeclaration3709); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal272);



                            // AST REWRITE
                            // elements: type, annotationMethodRest, modifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 593:30: -> ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest )
                            {
                                // jkit/java/parser/Java.g:593:33: ^( METHOD ^( MODIFIERS ( modifier )* ) type annotationMethodRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(METHOD, "METHOD"), root_1);

                                // jkit/java/parser/Java.g:593:42: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:593:54: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_annotationMethodRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:594:7: annotationConstantRest ';'
                            {
                            pushFollow(FOLLOW_annotationConstantRest_in_annotationTypeElementDeclaration3734);
                            annotationConstantRest273=annotationConstantRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_annotationConstantRest.add(annotationConstantRest273.getTree());
                            char_literal274=(Token)match(input,121,FOLLOW_121_in_annotationTypeElementDeclaration3736); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal274);



                            // AST REWRITE
                            // elements: modifier, annotationConstantRest, type
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 594:34: -> ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest )
                            {
                                // jkit/java/parser/Java.g:594:37: ^( FIELD ^( MODIFIERS ( modifier )* ) type annotationConstantRest )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FIELD, "FIELD"), root_1);

                                // jkit/java/parser/Java.g:594:45: ^( MODIFIERS ( modifier )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                                // jkit/java/parser/Java.g:594:57: ( modifier )*
                                while ( stream_modifier.hasNext() ) {
                                    adaptor.addChild(root_2, stream_modifier.nextTree());

                                }
                                stream_modifier.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_type.nextTree());
                                adaptor.addChild(root_1, stream_annotationConstantRest.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:596:6: classDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementDeclaration3765);
                    classDeclaration275=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classDeclaration.add(classDeclaration275.getTree());
                    // jkit/java/parser/Java.g:596:23: ( ';' )?
                    int alt94=2;
                    alt94 = dfa94.predict(input);
                    switch (alt94) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: ';'
                            {
                            char_literal276=(Token)match(input,121,FOLLOW_121_in_annotationTypeElementDeclaration3767); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal276);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: classDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 596:28: -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                    {
                        // jkit/java/parser/Java.g:596:31: ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CLASS, "CLASS"), root_1);

                        // jkit/java/parser/Java.g:596:39: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:596:51: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_classDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:597:6: enumDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementDeclaration3790);
                    enumDeclaration277=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumDeclaration.add(enumDeclaration277.getTree());
                    // jkit/java/parser/Java.g:597:22: ( ';' )?
                    int alt95=2;
                    alt95 = dfa95.predict(input);
                    switch (alt95) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: ';'
                            {
                            char_literal278=(Token)match(input,121,FOLLOW_121_in_annotationTypeElementDeclaration3792); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal278);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: modifier, enumDeclaration
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 597:27: -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                    {
                        // jkit/java/parser/Java.g:597:30: ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ENUM, "ENUM"), root_1);

                        // jkit/java/parser/Java.g:597:37: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:597:49: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_enumDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:598:6: normalInterfaceDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementDeclaration3815);
                    normalInterfaceDeclaration279=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_normalInterfaceDeclaration.add(normalInterfaceDeclaration279.getTree());
                    // jkit/java/parser/Java.g:598:33: ( ';' )?
                    int alt96=2;
                    alt96 = dfa96.predict(input);
                    switch (alt96) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: ';'
                            {
                            char_literal280=(Token)match(input,121,FOLLOW_121_in_annotationTypeElementDeclaration3817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal280);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: normalInterfaceDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 598:38: -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                    {
                        // jkit/java/parser/Java.g:598:41: ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INTERFACE, "INTERFACE"), root_1);

                        // jkit/java/parser/Java.g:598:53: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:598:65: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_normalInterfaceDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:599:6: annotationTypeDeclaration ( ';' )?
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementDeclaration3840);
                    annotationTypeDeclaration281=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_annotationTypeDeclaration.add(annotationTypeDeclaration281.getTree());
                    // jkit/java/parser/Java.g:599:32: ( ';' )?
                    int alt97=2;
                    alt97 = dfa97.predict(input);
                    switch (alt97) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: ';'
                            {
                            char_literal282=(Token)match(input,121,FOLLOW_121_in_annotationTypeElementDeclaration3842); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_121.add(char_literal282);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: annotationTypeDeclaration, modifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 599:37: -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                    {
                        // jkit/java/parser/Java.g:599:40: ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                        // jkit/java/parser/Java.g:599:53: ^( MODIFIERS ( modifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:599:65: ( modifier )*
                        while ( stream_modifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_modifier.nextTree());

                        }
                        stream_modifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_annotationTypeDeclaration.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // jkit/java/parser/Java.g:603:1: annotationMethodRest : Identifier '(' ')' ( defaultValue )? ;
    public final JavaParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        JavaParser.annotationMethodRest_return retval = new JavaParser.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier283=null;
        Token char_literal284=null;
        Token char_literal285=null;
        JavaParser.defaultValue_return defaultValue286 = null;


        Object Identifier283_tree=null;
        Object char_literal284_tree=null;
        Object char_literal285_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // jkit/java/parser/Java.g:604:3: ( Identifier '(' ')' ( defaultValue )? )
            // jkit/java/parser/Java.g:604:5: Identifier '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            Identifier283=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3875); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            Identifier283_tree = (Object)adaptor.create(Identifier283);
            adaptor.addChild(root_0, Identifier283_tree);
            }
            char_literal284=(Token)match(input,161,FOLLOW_161_in_annotationMethodRest3877); if (state.failed) return retval;
            char_literal285=(Token)match(input,162,FOLLOW_162_in_annotationMethodRest3880); if (state.failed) return retval;
            // jkit/java/parser/Java.g:604:26: ( defaultValue )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==168) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // jkit/java/parser/Java.g:604:27: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3884);
                    defaultValue286=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue286.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // jkit/java/parser/Java.g:607:1: annotationConstantRest : variableDeclarators ;
    public final JavaParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        JavaParser.annotationConstantRest_return retval = new JavaParser.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableDeclarators_return variableDeclarators287 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // jkit/java/parser/Java.g:608:3: ( variableDeclarators )
            // jkit/java/parser/Java.g:608:5: variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3901);
            variableDeclarators287=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclarators287.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // jkit/java/parser/Java.g:611:1: defaultValue : 'default' elementValue ;
    public final JavaParser.defaultValue_return defaultValue() throws RecognitionException {
        JavaParser.defaultValue_return retval = new JavaParser.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal288=null;
        JavaParser.elementValue_return elementValue289 = null;


        Object string_literal288_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // jkit/java/parser/Java.g:612:3: ( 'default' elementValue )
            // jkit/java/parser/Java.g:612:5: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal288=(Token)match(input,168,FOLLOW_168_in_defaultValue3916); if (state.failed) return retval;
            pushFollow(FOLLOW_elementValue_in_defaultValue3919);
            elementValue289=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue289.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // jkit/java/parser/Java.g:617:1: block : '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal290=null;
        Token char_literal292=null;
        JavaParser.blockStatement_return blockStatement291 = null;


        Object char_literal290_tree=null;
        Object char_literal292_tree=null;
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // jkit/java/parser/Java.g:618:2: ( '{' ( blockStatement )* '}' -> ^( BLOCK ( blockStatement )* ) )
            // jkit/java/parser/Java.g:618:4: '{' ( blockStatement )* '}'
            {
            char_literal290=(Token)match(input,133,FOLLOW_133_in_block3933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_133.add(char_literal290);

            // jkit/java/parser/Java.g:618:8: ( blockStatement )*
            loop100:
            do {
                int alt100=2;
                alt100 = dfa100.predict(input);
                switch (alt100) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3935);
            	    blockStatement291=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement291.getTree());

            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            char_literal292=(Token)match(input,134,FOLLOW_134_in_block3938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_134.add(char_literal292);



            // AST REWRITE
            // elements: blockStatement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 618:28: -> ^( BLOCK ( blockStatement )* )
            {
                // jkit/java/parser/Java.g:618:31: ^( BLOCK ( blockStatement )* )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                // jkit/java/parser/Java.g:618:39: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // jkit/java/parser/Java.g:621:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.localVariableDeclaration_return localVariableDeclaration293 = null;

        JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration294 = null;

        JavaParser.statement_return statement295 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // jkit/java/parser/Java.g:622:2: ( localVariableDeclaration | classOrInterfaceDeclaration | statement )
            int alt101=3;
            alt101 = dfa101.predict(input);
            switch (alt101) {
                case 1 :
                    // jkit/java/parser/Java.g:622:4: localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3959);
                    localVariableDeclaration293=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, localVariableDeclaration293.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:623:4: classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3964);
                    classOrInterfaceDeclaration294=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classOrInterfaceDeclaration294.getTree());

                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:624:7: statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement3972);
                    statement295=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, statement295.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // jkit/java/parser/Java.g:627:1: localVariableDeclaration : ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal299=null;
        JavaParser.variableModifier_return variableModifier296 = null;

        JavaParser.type_return type297 = null;

        JavaParser.variableDeclarators_return variableDeclarators298 = null;


        Object char_literal299_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // jkit/java/parser/Java.g:628:2: ( ( variableModifier )* type variableDeclarators ';' -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) )
            // jkit/java/parser/Java.g:628:4: ( variableModifier )* type variableDeclarators ';'
            {
            // jkit/java/parser/Java.g:628:4: ( variableModifier )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==145||LA102_0==167) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3984);
            	    variableModifier296=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier296.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3987);
            type297=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type297.getTree());
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3989);
            variableDeclarators298=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators298.getTree());
            char_literal299=(Token)match(input,121,FOLLOW_121_in_localVariableDeclaration3991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_121.add(char_literal299);



            // AST REWRITE
            // elements: type, variableDeclarators, variableModifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 628:51: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
            {
                // jkit/java/parser/Java.g:628:54: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/parser/Java.g:628:63: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/parser/Java.g:628:75: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // jkit/java/parser/Java.g:631:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token fc=null;
        Token char_literal302=null;
        Token char_literal304=null;
        Token string_literal307=null;
        Token char_literal309=null;
        Token char_literal311=null;
        Token string_literal316=null;
        Token char_literal318=null;
        Token char_literal325=null;
        Token char_literal327=null;
        Token char_literal331=null;
        Token char_literal333=null;
        Token Identifier334=null;
        Token char_literal335=null;
        Token Identifier336=null;
        Token char_literal337=null;
        Token char_literal338=null;
        Token char_literal340=null;
        Token char_literal341=null;
        JavaParser.block_return block300 = null;

        JavaParser.expression_return expression301 = null;

        JavaParser.expression_return expression303 = null;

        JavaParser.parExpression_return parExpression305 = null;

        JavaParser.statement_return statement306 = null;

        JavaParser.statement_return statement308 = null;

        JavaParser.forControl_return forControl310 = null;

        JavaParser.statement_return statement312 = null;

        JavaParser.parExpression_return parExpression313 = null;

        JavaParser.statement_return statement314 = null;

        JavaParser.statement_return statement315 = null;

        JavaParser.parExpression_return parExpression317 = null;

        JavaParser.block_return block319 = null;

        JavaParser.catches_return catches320 = null;

        JavaParser.block_return block321 = null;

        JavaParser.catches_return catches322 = null;

        JavaParser.block_return block323 = null;

        JavaParser.parExpression_return parExpression324 = null;

        JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups326 = null;

        JavaParser.parExpression_return parExpression328 = null;

        JavaParser.block_return block329 = null;

        JavaParser.expression_return expression330 = null;

        JavaParser.expression_return expression332 = null;

        JavaParser.statementExpression_return statementExpression339 = null;

        JavaParser.statement_return statement342 = null;


        Object lc_tree=null;
        Object fc_tree=null;
        Object char_literal302_tree=null;
        Object char_literal304_tree=null;
        Object string_literal307_tree=null;
        Object char_literal309_tree=null;
        Object char_literal311_tree=null;
        Object string_literal316_tree=null;
        Object char_literal318_tree=null;
        Object char_literal325_tree=null;
        Object char_literal327_tree=null;
        Object char_literal331_tree=null;
        Object char_literal333_tree=null;
        Object Identifier334_tree=null;
        Object char_literal335_tree=null;
        Object Identifier336_tree=null;
        Object char_literal337_tree=null;
        Object char_literal338_tree=null;
        Object char_literal340_tree=null;
        Object char_literal341_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_176=new RewriteRuleTokenStream(adaptor,"token 176");
        RewriteRuleTokenStream stream_172=new RewriteRuleTokenStream(adaptor,"token 172");
        RewriteRuleTokenStream stream_179=new RewriteRuleTokenStream(adaptor,"token 179");
        RewriteRuleTokenStream stream_171=new RewriteRuleTokenStream(adaptor,"token 171");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_178=new RewriteRuleTokenStream(adaptor,"token 178");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleTokenStream stream_180=new RewriteRuleTokenStream(adaptor,"token 180");
        RewriteRuleTokenStream stream_133=new RewriteRuleTokenStream(adaptor,"token 133");
        RewriteRuleTokenStream stream_173=new RewriteRuleTokenStream(adaptor,"token 173");
        RewriteRuleTokenStream stream_177=new RewriteRuleTokenStream(adaptor,"token 177");
        RewriteRuleTokenStream stream_134=new RewriteRuleTokenStream(adaptor,"token 134");
        RewriteRuleTokenStream stream_174=new RewriteRuleTokenStream(adaptor,"token 174");
        RewriteRuleTokenStream stream_181=new RewriteRuleTokenStream(adaptor,"token 181");
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleTokenStream stream_175=new RewriteRuleTokenStream(adaptor,"token 175");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleTokenStream stream_182=new RewriteRuleTokenStream(adaptor,"token 182");
        RewriteRuleTokenStream stream_147=new RewriteRuleTokenStream(adaptor,"token 147");
        RewriteRuleTokenStream stream_169=new RewriteRuleTokenStream(adaptor,"token 169");
        RewriteRuleSubtreeStream stream_parExpression=new RewriteRuleSubtreeStream(adaptor,"rule parExpression");
        RewriteRuleSubtreeStream stream_statementExpression=new RewriteRuleSubtreeStream(adaptor,"rule statementExpression");
        RewriteRuleSubtreeStream stream_statement=new RewriteRuleSubtreeStream(adaptor,"rule statement");
        RewriteRuleSubtreeStream stream_catches=new RewriteRuleSubtreeStream(adaptor,"rule catches");
        RewriteRuleSubtreeStream stream_switchBlockStatementGroups=new RewriteRuleSubtreeStream(adaptor,"rule switchBlockStatementGroups");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        RewriteRuleSubtreeStream stream_forControl=new RewriteRuleSubtreeStream(adaptor,"rule forControl");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // jkit/java/parser/Java.g:632:2: ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) )
            int alt109=16;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // jkit/java/parser/Java.g:632:4: block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement4020);
                    block300=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, block300.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:633:7: lc= 'assert' expression ( ':' expression )? ';'
                    {
                    lc=(Token)match(input,169,FOLLOW_169_in_statement4030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_169.add(lc);

                    pushFollow(FOLLOW_expression_in_statement4032);
                    expression301=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression301.getTree());
                    // jkit/java/parser/Java.g:633:30: ( ':' expression )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==170) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // jkit/java/parser/Java.g:633:31: ':' expression
                            {
                            char_literal302=(Token)match(input,170,FOLLOW_170_in_statement4035); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_170.add(char_literal302);

                            pushFollow(FOLLOW_expression_in_statement4037);
                            expression303=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression303.getTree());

                            }
                            break;

                    }

                    char_literal304=(Token)match(input,121,FOLLOW_121_in_statement4041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal304);



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 633:52: -> ^( ASSERT[$lc] expression ( expression )? )
                    {
                        // jkit/java/parser/Java.g:633:55: ^( ASSERT[$lc] expression ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSERT, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        // jkit/java/parser/Java.g:633:80: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:634:7: lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )?
                    {
                    lc=(Token)match(input,171,FOLLOW_171_in_statement4063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_171.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4065);
                    parExpression305=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression305.getTree());
                    pushFollow(FOLLOW_statement_in_statement4067);
                    statement306=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement306.getTree());
                    // jkit/java/parser/Java.g:634:39: ( options {k=1; } : 'else' statement )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==172) ) {
                        int LA104_2 = input.LA(2);

                        if ( (synpred154_Java()) ) {
                            alt104=1;
                        }
                    }
                    switch (alt104) {
                        case 1 :
                            // jkit/java/parser/Java.g:634:55: 'else' statement
                            {
                            string_literal307=(Token)match(input,172,FOLLOW_172_in_statement4077); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_172.add(string_literal307);

                            pushFollow(FOLLOW_statement_in_statement4079);
                            statement308=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_statement.add(statement308.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: statement, parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 634:74: -> ^( IF[$lc] parExpression statement ( statement )? )
                    {
                        // jkit/java/parser/Java.g:634:77: ^( IF[$lc] parExpression statement ( statement )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(IF, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());
                        // jkit/java/parser/Java.g:634:111: ( statement )?
                        if ( stream_statement.hasNext() ) {
                            adaptor.addChild(root_1, stream_statement.nextTree());

                        }
                        stream_statement.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:635:7: lc= 'for' '(' forControl ')' statement
                    {
                    lc=(Token)match(input,173,FOLLOW_173_in_statement4105); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_173.add(lc);

                    char_literal309=(Token)match(input,161,FOLLOW_161_in_statement4107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal309);

                    pushFollow(FOLLOW_forControl_in_statement4109);
                    forControl310=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forControl.add(forControl310.getTree());
                    char_literal311=(Token)match(input,162,FOLLOW_162_in_statement4111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal311);

                    pushFollow(FOLLOW_statement_in_statement4113);
                    statement312=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement312.getTree());


                    // AST REWRITE
                    // elements: forControl, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 635:45: -> ^( FOR[$lc] forControl statement )
                    {
                        // jkit/java/parser/Java.g:635:48: ^( FOR[$lc] forControl statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOR, lc), root_1);

                        adaptor.addChild(root_1, stream_forControl.nextTree());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:636:7: lc= 'while' parExpression statement
                    {
                    lc=(Token)match(input,174,FOLLOW_174_in_statement4134); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_174.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4136);
                    parExpression313=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression313.getTree());
                    pushFollow(FOLLOW_statement_in_statement4138);
                    statement314=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement314.getTree());


                    // AST REWRITE
                    // elements: statement, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 636:42: -> ^( WHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/parser/Java.g:636:45: ^( WHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(WHILE, lc), root_1);

                        // jkit/java/parser/Java.g:636:58: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/parser/Java.g:637:7: lc= 'do' statement 'while' parExpression ';'
                    {
                    lc=(Token)match(input,175,FOLLOW_175_in_statement4163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_175.add(lc);

                    pushFollow(FOLLOW_statement_in_statement4165);
                    statement315=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement315.getTree());
                    string_literal316=(Token)match(input,174,FOLLOW_174_in_statement4167); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_174.add(string_literal316);

                    pushFollow(FOLLOW_parExpression_in_statement4169);
                    parExpression317=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression317.getTree());
                    char_literal318=(Token)match(input,121,FOLLOW_121_in_statement4171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal318);



                    // AST REWRITE
                    // elements: parExpression, statement
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 637:51: -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                    {
                        // jkit/java/parser/Java.g:637:54: ^( DOWHILE[$lc] ^( TEST parExpression ) statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DOWHILE, lc), root_1);

                        // jkit/java/parser/Java.g:637:69: ^( TEST parExpression )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_2);

                        adaptor.addChild(root_2, stream_parExpression.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/parser/Java.g:638:7: lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    {
                    lc=(Token)match(input,176,FOLLOW_176_in_statement4196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_176.add(lc);

                    pushFollow(FOLLOW_block_in_statement4198);
                    block319=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block319.getTree());
                    // jkit/java/parser/Java.g:639:7: ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) )
                    int alt105=3;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==183) ) {
                        int LA105_1 = input.LA(2);

                        if ( (LA105_1==161) ) {
                            int LA105_3 = input.LA(3);

                            if ( (synpred159_Java()) ) {
                                alt105=1;
                            }
                            else if ( (synpred160_Java()) ) {
                                alt105=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 105, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 105, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA105_0==177) ) {
                        alt105=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 105, 0, input);

                        throw nvae;
                    }
                    switch (alt105) {
                        case 1 :
                            // jkit/java/parser/Java.g:639:9: catches fc= 'finally' block
                            {
                            pushFollow(FOLLOW_catches_in_statement4208);
                            catches320=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches320.getTree());
                            fc=(Token)match(input,177,FOLLOW_177_in_statement4212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_177.add(fc);

                            pushFollow(FOLLOW_block_in_statement4214);
                            block321=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block321.getTree());


                            // AST REWRITE
                            // elements: catches, block, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 639:36: -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/parser/Java.g:639:39: ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());
                                // jkit/java/parser/Java.g:639:64: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:640:9: catches
                            {
                            pushFollow(FOLLOW_catches_in_statement4242);
                            catches322=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_catches.add(catches322.getTree());


                            // AST REWRITE
                            // elements: block, catches
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 640:17: -> ^( TRY[$lc] block catches )
                            {
                                // jkit/java/parser/Java.g:640:20: ^( TRY[$lc] block catches )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                adaptor.addChild(root_1, stream_catches.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/parser/Java.g:641:9: fc= 'finally' block
                            {
                            fc=(Token)match(input,177,FOLLOW_177_in_statement4265); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_177.add(fc);

                            pushFollow(FOLLOW_block_in_statement4267);
                            block323=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_block.add(block323.getTree());


                            // AST REWRITE
                            // elements: block, block
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 641:28: -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                            {
                                // jkit/java/parser/Java.g:641:31: ^( TRY[$lc] block ^( FINALLY[$fc] block ) )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TRY, lc), root_1);

                                adaptor.addChild(root_1, stream_block.nextTree());
                                // jkit/java/parser/Java.g:641:48: ^( FINALLY[$fc] block )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(FINALLY, fc), root_2);

                                adaptor.addChild(root_2, stream_block.nextTree());

                                adaptor.addChild(root_1, root_2);
                                }

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // jkit/java/parser/Java.g:643:7: lc= 'switch' parExpression '{' switchBlockStatementGroups '}'
                    {
                    lc=(Token)match(input,178,FOLLOW_178_in_statement4301); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_178.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4303);
                    parExpression324=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression324.getTree());
                    char_literal325=(Token)match(input,133,FOLLOW_133_in_statement4305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_133.add(char_literal325);

                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement4307);
                    switchBlockStatementGroups326=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_switchBlockStatementGroups.add(switchBlockStatementGroups326.getTree());
                    char_literal327=(Token)match(input,134,FOLLOW_134_in_statement4309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_134.add(char_literal327);



                    // AST REWRITE
                    // elements: switchBlockStatementGroups, parExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 643:68: -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                    {
                        // jkit/java/parser/Java.g:643:71: ^( SWITCH[$lc] parExpression switchBlockStatementGroups )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SWITCH, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_switchBlockStatementGroups.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/parser/Java.g:644:7: lc= 'synchronized' parExpression block
                    {
                    lc=(Token)match(input,147,FOLLOW_147_in_statement4330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_147.add(lc);

                    pushFollow(FOLLOW_parExpression_in_statement4332);
                    parExpression328=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_parExpression.add(parExpression328.getTree());
                    pushFollow(FOLLOW_block_in_statement4334);
                    block329=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_block.add(block329.getTree());


                    // AST REWRITE
                    // elements: parExpression, block
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 644:45: -> ^( SYNCHRONIZED[$lc] parExpression block )
                    {
                        // jkit/java/parser/Java.g:644:48: ^( SYNCHRONIZED[$lc] parExpression block )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SYNCHRONIZED, lc), root_1);

                        adaptor.addChild(root_1, stream_parExpression.nextTree());
                        adaptor.addChild(root_1, stream_block.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/parser/Java.g:645:7: lc= 'return' ( expression )? ';'
                    {
                    lc=(Token)match(input,179,FOLLOW_179_in_statement4355); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_179.add(lc);

                    // jkit/java/parser/Java.g:645:19: ( expression )?
                    int alt106=2;
                    alt106 = dfa106.predict(input);
                    switch (alt106) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: expression
                            {
                            pushFollow(FOLLOW_expression_in_statement4357);
                            expression330=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression330.getTree());

                            }
                            break;

                    }

                    char_literal331=(Token)match(input,121,FOLLOW_121_in_statement4360); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal331);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 645:35: -> ^( RETURN[$lc] ( expression )? )
                    {
                        // jkit/java/parser/Java.g:645:38: ^( RETURN[$lc] ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(RETURN, lc), root_1);

                        // jkit/java/parser/Java.g:645:52: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/parser/Java.g:646:7: lc= 'throw' expression ';'
                    {
                    lc=(Token)match(input,180,FOLLOW_180_in_statement4380); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_180.add(lc);

                    pushFollow(FOLLOW_expression_in_statement4382);
                    expression332=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression332.getTree());
                    char_literal333=(Token)match(input,121,FOLLOW_121_in_statement4384); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal333);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 646:33: -> ^( THROW[$lc] expression )
                    {
                        // jkit/java/parser/Java.g:646:36: ^( THROW[$lc] expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(THROW, lc), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/parser/Java.g:647:7: lc= 'break' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,181,FOLLOW_181_in_statement4403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_181.add(lc);

                    // jkit/java/parser/Java.g:647:18: ( Identifier )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==Identifier) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: Identifier
                            {
                            Identifier334=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4405); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier334);


                            }
                            break;

                    }

                    char_literal335=(Token)match(input,121,FOLLOW_121_in_statement4408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal335);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 647:34: -> ^( BREAK[$lc] ( Identifier )? )
                    {
                        // jkit/java/parser/Java.g:647:37: ^( BREAK[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BREAK, lc), root_1);

                        // jkit/java/parser/Java.g:647:50: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/parser/Java.g:648:7: lc= 'continue' ( Identifier )? ';'
                    {
                    lc=(Token)match(input,182,FOLLOW_182_in_statement4428); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_182.add(lc);

                    // jkit/java/parser/Java.g:648:21: ( Identifier )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Identifier) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: Identifier
                            {
                            Identifier336=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4430); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_Identifier.add(Identifier336);


                            }
                            break;

                    }

                    char_literal337=(Token)match(input,121,FOLLOW_121_in_statement4433); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal337);



                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 648:37: -> ^( CONTINUE[$lc] ( Identifier )? )
                    {
                        // jkit/java/parser/Java.g:648:40: ^( CONTINUE[$lc] ( Identifier )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONTINUE, lc), root_1);

                        // jkit/java/parser/Java.g:648:56: ( Identifier )?
                        if ( stream_Identifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_Identifier.nextNode());

                        }
                        stream_Identifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // jkit/java/parser/Java.g:649:7: ';'
                    {
                    char_literal338=(Token)match(input,121,FOLLOW_121_in_statement4451); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal338);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 649:11: -> ^( BLOCK )
                    {
                        // jkit/java/parser/Java.g:649:14: ^( BLOCK )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 15 :
                    // jkit/java/parser/Java.g:650:7: statementExpression ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement4466);
                    statementExpression339=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statementExpression.add(statementExpression339.getTree());
                    char_literal340=(Token)match(input,121,FOLLOW_121_in_statement4468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal340);



                    // AST REWRITE
                    // elements: statementExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 650:31: -> statementExpression
                    {
                        adaptor.addChild(root_0, stream_statementExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 16 :
                    // jkit/java/parser/Java.g:651:7: lc= Identifier ':' statement
                    {
                    lc=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(lc);

                    char_literal341=(Token)match(input,170,FOLLOW_170_in_statement4484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(char_literal341);

                    pushFollow(FOLLOW_statement_in_statement4486);
                    statement342=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_statement.add(statement342.getTree());


                    // AST REWRITE
                    // elements: statement, Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 651:35: -> ^( LABEL[$lc] Identifier statement )
                    {
                        // jkit/java/parser/Java.g:651:38: ^( LABEL[$lc] Identifier statement )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABEL, lc), root_1);

                        adaptor.addChild(root_1, stream_Identifier.nextNode());
                        adaptor.addChild(root_1, stream_statement.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // jkit/java/parser/Java.g:654:1: catches : catchClause ( catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.catchClause_return catchClause343 = null;

        JavaParser.catchClause_return catchClause344 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // jkit/java/parser/Java.g:655:2: ( catchClause ( catchClause )* )
            // jkit/java/parser/Java.g:655:4: catchClause ( catchClause )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_catchClause_in_catches4508);
            catchClause343=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause343.getTree());
            // jkit/java/parser/Java.g:655:16: ( catchClause )*
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // jkit/java/parser/Java.g:655:17: catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4511);
            	    catchClause344=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, catchClause344.getTree());

            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // jkit/java/parser/Java.g:658:1: catchClause : lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal345=null;
        Token char_literal347=null;
        JavaParser.formalParameter_return formalParameter346 = null;

        JavaParser.block_return block348 = null;


        Object lc_tree=null;
        Object char_literal345_tree=null;
        Object char_literal347_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_183=new RewriteRuleTokenStream(adaptor,"token 183");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_formalParameter=new RewriteRuleSubtreeStream(adaptor,"rule formalParameter");
        RewriteRuleSubtreeStream stream_block=new RewriteRuleSubtreeStream(adaptor,"rule block");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // jkit/java/parser/Java.g:659:2: (lc= 'catch' '(' formalParameter ')' block -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block ) )
            // jkit/java/parser/Java.g:659:4: lc= 'catch' '(' formalParameter ')' block
            {
            lc=(Token)match(input,183,FOLLOW_183_in_catchClause4527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_183.add(lc);

            char_literal345=(Token)match(input,161,FOLLOW_161_in_catchClause4529); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_161.add(char_literal345);

            pushFollow(FOLLOW_formalParameter_in_catchClause4531);
            formalParameter346=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_formalParameter.add(formalParameter346.getTree());
            char_literal347=(Token)match(input,162,FOLLOW_162_in_catchClause4533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_162.add(char_literal347);

            pushFollow(FOLLOW_block_in_catchClause4535);
            block348=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_block.add(block348.getTree());


            // AST REWRITE
            // elements: formalParameter, block
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 659:45: -> ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
            {
                // jkit/java/parser/Java.g:659:48: ^( CATCH[$lc] ^( PARAMETER formalParameter ) block )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CATCH, lc), root_1);

                // jkit/java/parser/Java.g:659:61: ^( PARAMETER formalParameter )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(PARAMETER, "PARAMETER"), root_2);

                adaptor.addChild(root_2, stream_formalParameter.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_block.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // jkit/java/parser/Java.g:662:1: formalParameter : ( variableModifier )* type variableDeclaratorId ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier349 = null;

        JavaParser.type_return type350 = null;

        JavaParser.variableDeclaratorId_return variableDeclaratorId351 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // jkit/java/parser/Java.g:663:2: ( ( variableModifier )* type variableDeclaratorId )
            // jkit/java/parser/Java.g:663:4: ( variableModifier )* type variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/parser/Java.g:663:4: ( variableModifier )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==145||LA111_0==167) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4561);
            	    variableModifier349=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, variableModifier349.getTree());

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4564);
            type350=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, type350.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4566);
            variableDeclaratorId351=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, variableDeclaratorId351.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // jkit/java/parser/Java.g:666:1: switchBlockStatementGroups : ( switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup352 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // jkit/java/parser/Java.g:667:2: ( ( switchBlockStatementGroup )* )
            // jkit/java/parser/Java.g:667:4: ( switchBlockStatementGroup )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/parser/Java.g:667:4: ( switchBlockStatementGroup )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==168||LA112_0==184) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // jkit/java/parser/Java.g:667:5: switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4580);
            	    switchBlockStatementGroup352=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, switchBlockStatementGroup352.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // jkit/java/parser/Java.g:670:1: switchBlockStatementGroup : switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.switchLabel_return switchLabel353 = null;

        JavaParser.blockStatement_return blockStatement354 = null;


        RewriteRuleSubtreeStream stream_blockStatement=new RewriteRuleSubtreeStream(adaptor,"rule blockStatement");
        RewriteRuleSubtreeStream stream_switchLabel=new RewriteRuleSubtreeStream(adaptor,"rule switchLabel");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // jkit/java/parser/Java.g:671:2: ( switchLabel ( blockStatement )* -> ^( switchLabel ^( BLOCK ( blockStatement )* ) ) )
            // jkit/java/parser/Java.g:671:4: switchLabel ( blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4594);
            switchLabel353=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_switchLabel.add(switchLabel353.getTree());
            // jkit/java/parser/Java.g:671:16: ( blockStatement )*
            loop113:
            do {
                int alt113=2;
                alt113 = dfa113.predict(input);
                switch (alt113) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4596);
            	    blockStatement354=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_blockStatement.add(blockStatement354.getTree());

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);



            // AST REWRITE
            // elements: blockStatement, switchLabel
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 671:32: -> ^( switchLabel ^( BLOCK ( blockStatement )* ) )
            {
                // jkit/java/parser/Java.g:671:35: ^( switchLabel ^( BLOCK ( blockStatement )* ) )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot(stream_switchLabel.nextNode(), root_1);

                // jkit/java/parser/Java.g:671:49: ^( BLOCK ( blockStatement )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(BLOCK, "BLOCK"), root_2);

                // jkit/java/parser/Java.g:671:57: ( blockStatement )*
                while ( stream_blockStatement.hasNext() ) {
                    adaptor.addChild(root_2, stream_blockStatement.nextTree());

                }
                stream_blockStatement.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // jkit/java/parser/Java.g:674:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal356=null;
        Token char_literal358=null;
        Token char_literal359=null;
        JavaParser.constantExpression_return constantExpression355 = null;

        JavaParser.enumConstantName_return enumConstantName357 = null;


        Object lc_tree=null;
        Object char_literal356_tree=null;
        Object char_literal358_tree=null;
        Object char_literal359_tree=null;
        RewriteRuleTokenStream stream_168=new RewriteRuleTokenStream(adaptor,"token 168");
        RewriteRuleTokenStream stream_184=new RewriteRuleTokenStream(adaptor,"token 184");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_enumConstantName=new RewriteRuleSubtreeStream(adaptor,"rule enumConstantName");
        RewriteRuleSubtreeStream stream_constantExpression=new RewriteRuleSubtreeStream(adaptor,"rule constantExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // jkit/java/parser/Java.g:675:2: (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) )
            int alt114=3;
            alt114 = dfa114.predict(input);
            switch (alt114) {
                case 1 :
                    // jkit/java/parser/Java.g:675:4: lc= 'case' constantExpression ':'
                    {
                    lc=(Token)match(input,184,FOLLOW_184_in_switchLabel4624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(lc);

                    pushFollow(FOLLOW_constantExpression_in_switchLabel4626);
                    constantExpression355=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constantExpression.add(constantExpression355.getTree());
                    char_literal356=(Token)match(input,170,FOLLOW_170_in_switchLabel4628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(char_literal356);



                    // AST REWRITE
                    // elements: constantExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 675:37: -> ^( CASE[$lc] constantExpression )
                    {
                        // jkit/java/parser/Java.g:675:40: ^( CASE[$lc] constantExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_constantExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:676:4: lc= 'case' enumConstantName ':'
                    {
                    lc=(Token)match(input,184,FOLLOW_184_in_switchLabel4644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_184.add(lc);

                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4646);
                    enumConstantName357=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_enumConstantName.add(enumConstantName357.getTree());
                    char_literal358=(Token)match(input,170,FOLLOW_170_in_switchLabel4648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(char_literal358);



                    // AST REWRITE
                    // elements: enumConstantName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 676:35: -> ^( CASE[$lc] enumConstantName )
                    {
                        // jkit/java/parser/Java.g:676:38: ^( CASE[$lc] enumConstantName )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CASE, lc), root_1);

                        adaptor.addChild(root_1, stream_enumConstantName.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:677:4: lc= 'default' ':'
                    {
                    lc=(Token)match(input,168,FOLLOW_168_in_switchLabel4664); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_168.add(lc);

                    char_literal359=(Token)match(input,170,FOLLOW_170_in_switchLabel4666); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(char_literal359);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 677:21: -> ^( DEFAULT )
                    {
                        // jkit/java/parser/Java.g:677:24: ^( DEFAULT )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEFAULT, "DEFAULT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreStatementExpressions"
    // jkit/java/parser/Java.g:680:1: moreStatementExpressions : ( ',' statementExpression )* ;
    public final JavaParser.moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        JavaParser.moreStatementExpressions_return retval = new JavaParser.moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal360=null;
        JavaParser.statementExpression_return statementExpression361 = null;


        Object char_literal360_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // jkit/java/parser/Java.g:681:2: ( ( ',' statementExpression )* )
            // jkit/java/parser/Java.g:681:4: ( ',' statementExpression )*
            {
            root_0 = (Object)adaptor.nil();

            // jkit/java/parser/Java.g:681:4: ( ',' statementExpression )*
            loop115:
            do {
                int alt115=2;
                int LA115_0 = input.LA(1);

                if ( (LA115_0==130) ) {
                    alt115=1;
                }


                switch (alt115) {
            	case 1 :
            	    // jkit/java/parser/Java.g:681:5: ',' statementExpression
            	    {
            	    char_literal360=(Token)match(input,130,FOLLOW_130_in_moreStatementExpressions4685); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal360_tree = (Object)adaptor.create(char_literal360);
            	    adaptor.addChild(root_0, char_literal360_tree);
            	    }
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4687);
            	    statementExpression361=statementExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, statementExpression361.getTree());

            	    }
            	    break;

            	default :
            	    break loop115;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moreStatementExpressions"

    public static class forControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // jkit/java/parser/Java.g:684:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );
    public final JavaParser.forControl_return forControl() throws RecognitionException {
        JavaParser.forControl_return retval = new JavaParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal364=null;
        Token char_literal365=null;
        JavaParser.expression_return fc = null;

        JavaParser.forUpdate_return fu = null;

        JavaParser.forVarControl_return forVarControl362 = null;

        JavaParser.forInit_return forInit363 = null;


        Object char_literal364_tree=null;
        Object char_literal365_tree=null;
        RewriteRuleTokenStream stream_121=new RewriteRuleTokenStream(adaptor,"token 121");
        RewriteRuleSubtreeStream stream_forUpdate=new RewriteRuleSubtreeStream(adaptor,"rule forUpdate");
        RewriteRuleSubtreeStream stream_forInit=new RewriteRuleSubtreeStream(adaptor,"rule forInit");
        RewriteRuleSubtreeStream stream_forVarControl=new RewriteRuleSubtreeStream(adaptor,"rule forVarControl");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // jkit/java/parser/Java.g:686:2: ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) )
            int alt119=2;
            alt119 = dfa119.predict(input);
            switch (alt119) {
                case 1 :
                    // jkit/java/parser/Java.g:686:4: forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4708);
                    forVarControl362=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_forVarControl.add(forVarControl362.getTree());


                    // AST REWRITE
                    // elements: forVarControl
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 686:18: -> ^( FOREACH forVarControl )
                    {
                        // jkit/java/parser/Java.g:686:21: ^( FOREACH forVarControl )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(FOREACH, "FOREACH"), root_1);

                        adaptor.addChild(root_1, stream_forVarControl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:687:4: ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )?
                    {
                    // jkit/java/parser/Java.g:687:4: ( forInit )?
                    int alt116=2;
                    alt116 = dfa116.predict(input);
                    switch (alt116) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4721);
                            forInit363=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forInit.add(forInit363.getTree());

                            }
                            break;

                    }

                    char_literal364=(Token)match(input,121,FOLLOW_121_in_forControl4724); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal364);

                    // jkit/java/parser/Java.g:687:19: (fc= expression )?
                    int alt117=2;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: fc= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4728);
                            fc=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(fc.getTree());

                            }
                            break;

                    }

                    char_literal365=(Token)match(input,121,FOLLOW_121_in_forControl4731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_121.add(char_literal365);

                    // jkit/java/parser/Java.g:687:38: (fu= forUpdate )?
                    int alt118=2;
                    alt118 = dfa118.predict(input);
                    switch (alt118) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: fu= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4735);
                            fu=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_forUpdate.add(fu.getTree());

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: forUpdate, expression, forInit
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 687:50: -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? )
                    {
                        // jkit/java/parser/Java.g:687:53: ^( INIT ( forInit )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INIT, "INIT"), root_1);

                        // jkit/java/parser/Java.g:687:60: ( forInit )?
                        if ( stream_forInit.hasNext() ) {
                            adaptor.addChild(root_1, stream_forInit.nextTree());

                        }
                        stream_forInit.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:687:70: ^( TEST ( expression )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TEST, "TEST"), root_1);

                        // jkit/java/parser/Java.g:687:77: ( expression )?
                        if ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.nextTree());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }
                        // jkit/java/parser/Java.g:687:90: ^( STEP ( forUpdate )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(STEP, "STEP"), root_1);

                        // jkit/java/parser/Java.g:687:97: ( forUpdate )?
                        if ( stream_forUpdate.hasNext() ) {
                            adaptor.addChild(root_1, stream_forUpdate.nextTree());

                        }
                        stream_forUpdate.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // jkit/java/parser/Java.g:690:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.variableModifier_return variableModifier366 = null;

        JavaParser.type_return type367 = null;

        JavaParser.variableDeclarators_return variableDeclarators368 = null;

        JavaParser.expressionList_return expressionList369 = null;


        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_variableDeclarators=new RewriteRuleSubtreeStream(adaptor,"rule variableDeclarators");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // jkit/java/parser/Java.g:691:2: ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList )
            int alt121=2;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // jkit/java/parser/Java.g:691:4: ( variableModifier )* type variableDeclarators
                    {
                    // jkit/java/parser/Java.g:691:4: ( variableModifier )*
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==145||LA120_0==167) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:0:0: variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4770);
                    	    variableModifier366=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier366.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop120;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4773);
                    type367=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type367.getTree());
                    pushFollow(FOLLOW_variableDeclarators_in_forInit4775);
                    variableDeclarators368=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variableDeclarators.add(variableDeclarators368.getTree());


                    // AST REWRITE
                    // elements: type, variableDeclarators, variableModifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 691:47: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                    {
                        // jkit/java/parser/Java.g:691:50: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                        // jkit/java/parser/Java.g:691:59: ^( MODIFIERS ( variableModifier )* )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                        // jkit/java/parser/Java.g:691:71: ( variableModifier )*
                        while ( stream_variableModifier.hasNext() ) {
                            adaptor.addChild(root_2, stream_variableModifier.nextTree());

                        }
                        stream_variableModifier.reset();

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_variableDeclarators.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:692:4: expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit4797);
                    expressionList369=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList369.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forVarControl"
    // jkit/java/parser/Java.g:695:1: forVarControl : ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression ;
    public final JavaParser.forVarControl_return forVarControl() throws RecognitionException {
        JavaParser.forVarControl_return retval = new JavaParser.forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier372=null;
        Token char_literal373=null;
        JavaParser.variableModifier_return variableModifier370 = null;

        JavaParser.type_return type371 = null;

        JavaParser.expression_return expression374 = null;


        Object Identifier372_tree=null;
        Object char_literal373_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_variableModifier=new RewriteRuleSubtreeStream(adaptor,"rule variableModifier");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // jkit/java/parser/Java.g:696:2: ( ( variableModifier )* type Identifier ':' expression -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression )
            // jkit/java/parser/Java.g:696:4: ( variableModifier )* type Identifier ':' expression
            {
            // jkit/java/parser/Java.g:696:4: ( variableModifier )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==145||LA122_0==167) ) {
                    alt122=1;
                }


                switch (alt122) {
            	case 1 :
            	    // jkit/java/parser/Java.g:0:0: variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4809);
            	    variableModifier370=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variableModifier.add(variableModifier370.getTree());

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4812);
            type371=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_type.add(type371.getTree());
            Identifier372=(Token)match(input,Identifier,FOLLOW_Identifier_in_forVarControl4814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier372);

            char_literal373=(Token)match(input,170,FOLLOW_170_in_forVarControl4816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_170.add(char_literal373);

            pushFollow(FOLLOW_expression_in_forVarControl4818);
            expression374=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression374.getTree());


            // AST REWRITE
            // elements: variableModifier, expression, Identifier, type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 696:53: -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier ) expression
            {
                // jkit/java/parser/Java.g:696:56: ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VARDEF, "VARDEF"), root_1);

                // jkit/java/parser/Java.g:696:65: ^( MODIFIERS ( variableModifier )* )
                {
                Object root_2 = (Object)adaptor.nil();
                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(MODIFIERS, "MODIFIERS"), root_2);

                // jkit/java/parser/Java.g:696:77: ( variableModifier )*
                while ( stream_variableModifier.hasNext() ) {
                    adaptor.addChild(root_2, stream_variableModifier.nextTree());

                }
                stream_variableModifier.reset();

                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_1, stream_type.nextTree());
                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // jkit/java/parser/Java.g:699:1: forUpdate : expressionList ;
    public final JavaParser.forUpdate_return forUpdate() throws RecognitionException {
        JavaParser.forUpdate_return retval = new JavaParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expressionList_return expressionList375 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // jkit/java/parser/Java.g:700:2: ( expressionList )
            // jkit/java/parser/Java.g:700:4: expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate4848);
            expressionList375=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList375.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // jkit/java/parser/Java.g:705:1: parExpression : '(' expression ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal376=null;
        Token char_literal378=null;
        JavaParser.expression_return expression377 = null;


        Object char_literal376_tree=null;
        Object char_literal378_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // jkit/java/parser/Java.g:706:2: ( '(' expression ')' )
            // jkit/java/parser/Java.g:706:4: '(' expression ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal376=(Token)match(input,161,FOLLOW_161_in_parExpression4861); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4864);
            expression377=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression377.getTree());
            char_literal378=(Token)match(input,162,FOLLOW_162_in_parExpression4866); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // jkit/java/parser/Java.g:709:1: expressionList : expression ( ',' expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal380=null;
        JavaParser.expression_return expression379 = null;

        JavaParser.expression_return expression381 = null;


        Object char_literal380_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // jkit/java/parser/Java.g:710:5: ( expression ( ',' expression )* )
            // jkit/java/parser/Java.g:710:9: expression ( ',' expression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList4884);
            expression379=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression379.getTree());
            // jkit/java/parser/Java.g:710:20: ( ',' expression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==130) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // jkit/java/parser/Java.g:710:21: ',' expression
            	    {
            	    char_literal380=(Token)match(input,130,FOLLOW_130_in_expressionList4887); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4890);
            	    expression381=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression381.getTree());

            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // jkit/java/parser/Java.g:713:1: statementExpression : expression ;
    public final JavaParser.statementExpression_return statementExpression() throws RecognitionException {
        JavaParser.statementExpression_return retval = new JavaParser.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression382 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // jkit/java/parser/Java.g:714:2: ( expression )
            // jkit/java/parser/Java.g:714:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression4906);
            expression382=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // jkit/java/parser/Java.g:717:1: constantExpression : expression ;
    public final JavaParser.constantExpression_return constantExpression() throws RecognitionException {
        JavaParser.constantExpression_return retval = new JavaParser.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.expression_return expression383 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // jkit/java/parser/Java.g:718:2: ( expression )
            // jkit/java/parser/Java.g:718:4: expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression4918);
            expression383=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression383.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // jkit/java/parser/Java.g:721:1: expression : conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | lc= '+' '=' expression -> ^( ASSIGNOP[$lc] ADD conditionalExpression expression ) | lc= '-' '=' expression -> ^( ASSIGNOP[$lc] SUB conditionalExpression expression ) | lc= '*' '=' expression -> ^( ASSIGNOP[$lc] MUL conditionalExpression expression ) | lc= '/' '=' expression -> ^( ASSIGNOP[$lc] DIV conditionalExpression expression ) | lc= '&=' expression -> ^( ASSIGNOP[$lc] AND conditionalExpression expression ) | lc= '|=' expression -> ^( ASSIGNOP[$lc] OR conditionalExpression expression ) | lc= '^=' expression -> ^( ASSIGNOP[$lc] XOR conditionalExpression expression ) | lc= '%' '=' expression -> ^( ASSIGNOP[$lc] MOD conditionalExpression expression ) | lc= '<' '<' '=' expression -> ^( ASSIGNOP[$lc] SHL conditionalExpression expression ) | lc= '>' '>' '=' expression -> ^( ASSIGNOP[$lc] SHR conditionalExpression expression ) | lc= '>' '>' '>' '=' expression -> ^( ASSIGNOP[$lc] USHR conditionalExpression expression ) | -> conditionalExpression ) ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token char_literal385=null;
        Token char_literal387=null;
        Token char_literal389=null;
        Token char_literal391=null;
        Token char_literal393=null;
        Token char_literal398=null;
        Token char_literal400=null;
        Token char_literal401=null;
        Token char_literal403=null;
        Token char_literal404=null;
        Token char_literal406=null;
        Token char_literal407=null;
        Token char_literal408=null;
        JavaParser.conditionalExpression_return conditionalExpression384 = null;

        JavaParser.expression_return expression386 = null;

        JavaParser.expression_return expression388 = null;

        JavaParser.expression_return expression390 = null;

        JavaParser.expression_return expression392 = null;

        JavaParser.expression_return expression394 = null;

        JavaParser.expression_return expression395 = null;

        JavaParser.expression_return expression396 = null;

        JavaParser.expression_return expression397 = null;

        JavaParser.expression_return expression399 = null;

        JavaParser.expression_return expression402 = null;

        JavaParser.expression_return expression405 = null;

        JavaParser.expression_return expression409 = null;


        Object lc_tree=null;
        Object char_literal385_tree=null;
        Object char_literal387_tree=null;
        Object char_literal389_tree=null;
        Object char_literal391_tree=null;
        Object char_literal393_tree=null;
        Object char_literal398_tree=null;
        Object char_literal400_tree=null;
        Object char_literal401_tree=null;
        Object char_literal403_tree=null;
        Object char_literal404_tree=null;
        Object char_literal406_tree=null;
        Object char_literal407_tree=null;
        Object char_literal408_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_188=new RewriteRuleTokenStream(adaptor,"token 188");
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleTokenStream stream_189=new RewriteRuleTokenStream(adaptor,"token 189");
        RewriteRuleTokenStream stream_190=new RewriteRuleTokenStream(adaptor,"token 190");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_conditionalExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // jkit/java/parser/Java.g:722:2: ( conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | lc= '+' '=' expression -> ^( ASSIGNOP[$lc] ADD conditionalExpression expression ) | lc= '-' '=' expression -> ^( ASSIGNOP[$lc] SUB conditionalExpression expression ) | lc= '*' '=' expression -> ^( ASSIGNOP[$lc] MUL conditionalExpression expression ) | lc= '/' '=' expression -> ^( ASSIGNOP[$lc] DIV conditionalExpression expression ) | lc= '&=' expression -> ^( ASSIGNOP[$lc] AND conditionalExpression expression ) | lc= '|=' expression -> ^( ASSIGNOP[$lc] OR conditionalExpression expression ) | lc= '^=' expression -> ^( ASSIGNOP[$lc] XOR conditionalExpression expression ) | lc= '%' '=' expression -> ^( ASSIGNOP[$lc] MOD conditionalExpression expression ) | lc= '<' '<' '=' expression -> ^( ASSIGNOP[$lc] SHL conditionalExpression expression ) | lc= '>' '>' '=' expression -> ^( ASSIGNOP[$lc] SHR conditionalExpression expression ) | lc= '>' '>' '>' '=' expression -> ^( ASSIGNOP[$lc] USHR conditionalExpression expression ) | -> conditionalExpression ) )
            // jkit/java/parser/Java.g:722:4: conditionalExpression ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | lc= '+' '=' expression -> ^( ASSIGNOP[$lc] ADD conditionalExpression expression ) | lc= '-' '=' expression -> ^( ASSIGNOP[$lc] SUB conditionalExpression expression ) | lc= '*' '=' expression -> ^( ASSIGNOP[$lc] MUL conditionalExpression expression ) | lc= '/' '=' expression -> ^( ASSIGNOP[$lc] DIV conditionalExpression expression ) | lc= '&=' expression -> ^( ASSIGNOP[$lc] AND conditionalExpression expression ) | lc= '|=' expression -> ^( ASSIGNOP[$lc] OR conditionalExpression expression ) | lc= '^=' expression -> ^( ASSIGNOP[$lc] XOR conditionalExpression expression ) | lc= '%' '=' expression -> ^( ASSIGNOP[$lc] MOD conditionalExpression expression ) | lc= '<' '<' '=' expression -> ^( ASSIGNOP[$lc] SHL conditionalExpression expression ) | lc= '>' '>' '=' expression -> ^( ASSIGNOP[$lc] SHR conditionalExpression expression ) | lc= '>' '>' '>' '=' expression -> ^( ASSIGNOP[$lc] USHR conditionalExpression expression ) | -> conditionalExpression )
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4930);
            conditionalExpression384=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalExpression.add(conditionalExpression384.getTree());
            // jkit/java/parser/Java.g:723:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | lc= '+' '=' expression -> ^( ASSIGNOP[$lc] ADD conditionalExpression expression ) | lc= '-' '=' expression -> ^( ASSIGNOP[$lc] SUB conditionalExpression expression ) | lc= '*' '=' expression -> ^( ASSIGNOP[$lc] MUL conditionalExpression expression ) | lc= '/' '=' expression -> ^( ASSIGNOP[$lc] DIV conditionalExpression expression ) | lc= '&=' expression -> ^( ASSIGNOP[$lc] AND conditionalExpression expression ) | lc= '|=' expression -> ^( ASSIGNOP[$lc] OR conditionalExpression expression ) | lc= '^=' expression -> ^( ASSIGNOP[$lc] XOR conditionalExpression expression ) | lc= '%' '=' expression -> ^( ASSIGNOP[$lc] MOD conditionalExpression expression ) | lc= '<' '<' '=' expression -> ^( ASSIGNOP[$lc] SHL conditionalExpression expression ) | lc= '>' '>' '=' expression -> ^( ASSIGNOP[$lc] SHR conditionalExpression expression ) | lc= '>' '>' '>' '=' expression -> ^( ASSIGNOP[$lc] USHR conditionalExpression expression ) | -> conditionalExpression )
            int alt124=13;
            alt124 = dfa124.predict(input);
            switch (alt124) {
                case 1 :
                    // jkit/java/parser/Java.g:724:4: '=' expression
                    {
                    char_literal385=(Token)match(input,140,FOLLOW_140_in_expression4940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal385);

                    pushFollow(FOLLOW_expression_in_expression4942);
                    expression386=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression386.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 724:19: -> ^( ASSIGN conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:724:22: ^( ASSIGN conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGN, "ASSIGN"), root_1);

                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:725:6: lc= '+' '=' expression
                    {
                    lc=(Token)match(input,185,FOLLOW_185_in_expression4961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(lc);

                    char_literal387=(Token)match(input,140,FOLLOW_140_in_expression4963); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal387);

                    pushFollow(FOLLOW_expression_in_expression4965);
                    expression388=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression388.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 725:28: -> ^( ASSIGNOP[$lc] ADD conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:725:31: ^( ASSIGNOP[$lc] ADD conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(ADD, "ADD"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:726:6: lc= '-' '=' expression
                    {
                    lc=(Token)match(input,186,FOLLOW_186_in_expression4987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(lc);

                    char_literal389=(Token)match(input,140,FOLLOW_140_in_expression4989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal389);

                    pushFollow(FOLLOW_expression_in_expression4991);
                    expression390=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression390.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 726:28: -> ^( ASSIGNOP[$lc] SUB conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:726:31: ^( ASSIGNOP[$lc] SUB conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(SUB, "SUB"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:727:6: lc= '*' '=' expression
                    {
                    lc=(Token)match(input,125,FOLLOW_125_in_expression5013); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_125.add(lc);

                    char_literal391=(Token)match(input,140,FOLLOW_140_in_expression5015); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal391);

                    pushFollow(FOLLOW_expression_in_expression5017);
                    expression392=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression392.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 727:28: -> ^( ASSIGNOP[$lc] MUL conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:727:31: ^( ASSIGNOP[$lc] MUL conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(MUL, "MUL"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:728:6: lc= '/' '=' expression
                    {
                    lc=(Token)match(input,187,FOLLOW_187_in_expression5039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_187.add(lc);

                    char_literal393=(Token)match(input,140,FOLLOW_140_in_expression5041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal393);

                    pushFollow(FOLLOW_expression_in_expression5043);
                    expression394=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression394.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 728:28: -> ^( ASSIGNOP[$lc] DIV conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:728:31: ^( ASSIGNOP[$lc] DIV conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(DIV, "DIV"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // jkit/java/parser/Java.g:729:6: lc= '&=' expression
                    {
                    lc=(Token)match(input,188,FOLLOW_188_in_expression5068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_188.add(lc);

                    pushFollow(FOLLOW_expression_in_expression5070);
                    expression395=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression395.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 729:25: -> ^( ASSIGNOP[$lc] AND conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:729:28: ^( ASSIGNOP[$lc] AND conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(AND, "AND"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/parser/Java.g:730:6: lc= '|=' expression
                    {
                    lc=(Token)match(input,189,FOLLOW_189_in_expression5092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_189.add(lc);

                    pushFollow(FOLLOW_expression_in_expression5094);
                    expression396=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression396.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 730:25: -> ^( ASSIGNOP[$lc] OR conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:730:28: ^( ASSIGNOP[$lc] OR conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(OR, "OR"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/parser/Java.g:731:6: lc= '^=' expression
                    {
                    lc=(Token)match(input,190,FOLLOW_190_in_expression5116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_190.add(lc);

                    pushFollow(FOLLOW_expression_in_expression5118);
                    expression397=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression397.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 731:25: -> ^( ASSIGNOP[$lc] XOR conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:731:28: ^( ASSIGNOP[$lc] XOR conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(XOR, "XOR"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 9 :
                    // jkit/java/parser/Java.g:732:6: lc= '%' '=' expression
                    {
                    lc=(Token)match(input,191,FOLLOW_191_in_expression5143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_191.add(lc);

                    char_literal398=(Token)match(input,140,FOLLOW_140_in_expression5145); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal398);

                    pushFollow(FOLLOW_expression_in_expression5147);
                    expression399=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression399.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 732:28: -> ^( ASSIGNOP[$lc] MOD conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:732:31: ^( ASSIGNOP[$lc] MOD conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(MOD, "MOD"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 10 :
                    // jkit/java/parser/Java.g:733:6: lc= '<' '<' '=' expression
                    {
                    lc=(Token)match(input,129,FOLLOW_129_in_expression5169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(lc);

                    char_literal400=(Token)match(input,129,FOLLOW_129_in_expression5171); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal400);

                    char_literal401=(Token)match(input,140,FOLLOW_140_in_expression5173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal401);

                    pushFollow(FOLLOW_expression_in_expression5175);
                    expression402=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 733:32: -> ^( ASSIGNOP[$lc] SHL conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:733:35: ^( ASSIGNOP[$lc] SHL conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(SHL, "SHL"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 11 :
                    // jkit/java/parser/Java.g:734:6: lc= '>' '>' '=' expression
                    {
                    lc=(Token)match(input,131,FOLLOW_131_in_expression5197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(lc);

                    char_literal403=(Token)match(input,131,FOLLOW_131_in_expression5199); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal403);

                    char_literal404=(Token)match(input,140,FOLLOW_140_in_expression5201); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal404);

                    pushFollow(FOLLOW_expression_in_expression5203);
                    expression405=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression405.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 734:32: -> ^( ASSIGNOP[$lc] SHR conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:734:35: ^( ASSIGNOP[$lc] SHR conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(SHR, "SHR"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // jkit/java/parser/Java.g:735:6: lc= '>' '>' '>' '=' expression
                    {
                    lc=(Token)match(input,131,FOLLOW_131_in_expression5225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(lc);

                    char_literal406=(Token)match(input,131,FOLLOW_131_in_expression5227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal406);

                    char_literal407=(Token)match(input,131,FOLLOW_131_in_expression5229); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal407);

                    char_literal408=(Token)match(input,140,FOLLOW_140_in_expression5231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal408);

                    pushFollow(FOLLOW_expression_in_expression5233);
                    expression409=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression409.getTree());


                    // AST REWRITE
                    // elements: conditionalExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 735:36: -> ^( ASSIGNOP[$lc] USHR conditionalExpression expression )
                    {
                        // jkit/java/parser/Java.g:735:39: ^( ASSIGNOP[$lc] USHR conditionalExpression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ASSIGNOP, lc), root_1);

                        adaptor.addChild(root_1, (Object)adaptor.create(USHR, "USHR"));
                        adaptor.addChild(root_1, stream_conditionalExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // jkit/java/parser/Java.g:736:6: 
                    {

                    // AST REWRITE
                    // elements: conditionalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 736:6: -> conditionalExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // jkit/java/parser/Java.g:740:1: conditionalExpression : conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal411=null;
        Token char_literal413=null;
        JavaParser.conditionalOrExpression_return conditionalOrExpression410 = null;

        JavaParser.expression_return expression412 = null;

        JavaParser.expression_return expression414 = null;


        Object char_literal411_tree=null;
        Object char_literal413_tree=null;
        RewriteRuleTokenStream stream_159=new RewriteRuleTokenStream(adaptor,"token 159");
        RewriteRuleTokenStream stream_170=new RewriteRuleTokenStream(adaptor,"token 170");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // jkit/java/parser/Java.g:741:5: ( conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression ) )
            // jkit/java/parser/Java.g:741:9: conditionalOrExpression ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression5277);
            conditionalOrExpression410=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression410.getTree());
            // jkit/java/parser/Java.g:742:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // jkit/java/parser/Java.g:743:7: '?' expression ':' expression
                    {
                    char_literal411=(Token)match(input,159,FOLLOW_159_in_conditionalExpression5294); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_159.add(char_literal411);

                    pushFollow(FOLLOW_expression_in_conditionalExpression5296);
                    expression412=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression412.getTree());
                    char_literal413=(Token)match(input,170,FOLLOW_170_in_conditionalExpression5298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_170.add(char_literal413);

                    pushFollow(FOLLOW_expression_in_conditionalExpression5300);
                    expression414=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression414.getTree());


                    // AST REWRITE
                    // elements: expression, conditionalOrExpression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 743:37: -> ^( CONDEXPR conditionalOrExpression expression expression )
                    {
                        // jkit/java/parser/Java.g:743:40: ^( CONDEXPR conditionalOrExpression expression expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CONDEXPR, "CONDEXPR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:744:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 744:9: -> conditionalOrExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // jkit/java/parser/Java.g:748:1: conditionalOrExpression : conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal416=null;
        JavaParser.conditionalAndExpression_return conditionalAndExpression415 = null;

        JavaParser.conditionalOrExpression_return conditionalOrExpression417 = null;


        Object string_literal416_tree=null;
        RewriteRuleTokenStream stream_192=new RewriteRuleTokenStream(adaptor,"token 192");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_conditionalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // jkit/java/parser/Java.g:749:5: ( conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression ) )
            // jkit/java/parser/Java.g:749:9: conditionalAndExpression ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5347);
            conditionalAndExpression415=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression415.getTree());
            // jkit/java/parser/Java.g:750:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )
            int alt126=2;
            alt126 = dfa126.predict(input);
            switch (alt126) {
                case 1 :
                    // jkit/java/parser/Java.g:751:7: ( '||' conditionalOrExpression )
                    {
                    // jkit/java/parser/Java.g:751:7: ( '||' conditionalOrExpression )
                    // jkit/java/parser/Java.g:751:8: '||' conditionalOrExpression
                    {
                    string_literal416=(Token)match(input,192,FOLLOW_192_in_conditionalOrExpression5365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_192.add(string_literal416);

                    pushFollow(FOLLOW_conditionalOrExpression_in_conditionalOrExpression5367);
                    conditionalOrExpression417=conditionalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalOrExpression.add(conditionalOrExpression417.getTree());

                    }



                    // AST REWRITE
                    // elements: conditionalOrExpression, conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 751:38: -> ^( LOR conditionalAndExpression conditionalOrExpression )
                    {
                        // jkit/java/parser/Java.g:751:41: ^( LOR conditionalAndExpression conditionalOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LOR, "LOR"), root_1);

                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:752:9: 
                    {

                    // AST REWRITE
                    // elements: conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 752:9: -> conditionalAndExpression
                    {
                        adaptor.addChild(root_0, stream_conditionalAndExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // jkit/java/parser/Java.g:756:1: conditionalAndExpression : inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal419=null;
        JavaParser.inclusiveOrExpression_return inclusiveOrExpression418 = null;

        JavaParser.conditionalAndExpression_return conditionalAndExpression420 = null;


        Object string_literal419_tree=null;
        RewriteRuleTokenStream stream_193=new RewriteRuleTokenStream(adaptor,"token 193");
        RewriteRuleSubtreeStream stream_conditionalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule conditionalAndExpression");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // jkit/java/parser/Java.g:757:5: ( inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression ) )
            // jkit/java/parser/Java.g:757:9: inclusiveOrExpression ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5413);
            inclusiveOrExpression418=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression418.getTree());
            // jkit/java/parser/Java.g:758:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // jkit/java/parser/Java.g:759:7: ( '&&' conditionalAndExpression )
                    {
                    // jkit/java/parser/Java.g:759:7: ( '&&' conditionalAndExpression )
                    // jkit/java/parser/Java.g:759:8: '&&' conditionalAndExpression
                    {
                    string_literal419=(Token)match(input,193,FOLLOW_193_in_conditionalAndExpression5431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_193.add(string_literal419);

                    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalAndExpression5433);
                    conditionalAndExpression420=conditionalAndExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_conditionalAndExpression.add(conditionalAndExpression420.getTree());

                    }



                    // AST REWRITE
                    // elements: inclusiveOrExpression, conditionalAndExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 759:39: -> ^( LAND inclusiveOrExpression conditionalAndExpression )
                    {
                        // jkit/java/parser/Java.g:759:42: ^( LAND inclusiveOrExpression conditionalAndExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LAND, "LAND"), root_1);

                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_conditionalAndExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:760:9: 
                    {

                    // AST REWRITE
                    // elements: inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 760:9: -> inclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_inclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // jkit/java/parser/Java.g:764:1: inclusiveOrExpression : exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal422=null;
        JavaParser.exclusiveOrExpression_return exclusiveOrExpression421 = null;

        JavaParser.inclusiveOrExpression_return inclusiveOrExpression423 = null;


        Object char_literal422_tree=null;
        RewriteRuleTokenStream stream_194=new RewriteRuleTokenStream(adaptor,"token 194");
        RewriteRuleSubtreeStream stream_inclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule inclusiveOrExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // jkit/java/parser/Java.g:765:5: ( exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression ) )
            // jkit/java/parser/Java.g:765:9: exclusiveOrExpression ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5485);
            exclusiveOrExpression421=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression421.getTree());
            // jkit/java/parser/Java.g:766:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )
            int alt128=2;
            alt128 = dfa128.predict(input);
            switch (alt128) {
                case 1 :
                    // jkit/java/parser/Java.g:767:10: ( '|' inclusiveOrExpression )
                    {
                    // jkit/java/parser/Java.g:767:10: ( '|' inclusiveOrExpression )
                    // jkit/java/parser/Java.g:767:11: '|' inclusiveOrExpression
                    {
                    char_literal422=(Token)match(input,194,FOLLOW_194_in_inclusiveOrExpression5507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_194.add(char_literal422);

                    pushFollow(FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5509);
                    inclusiveOrExpression423=inclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_inclusiveOrExpression.add(inclusiveOrExpression423.getTree());

                    }



                    // AST REWRITE
                    // elements: exclusiveOrExpression, inclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 767:38: -> ^( OR exclusiveOrExpression inclusiveOrExpression )
                    {
                        // jkit/java/parser/Java.g:767:41: ^( OR exclusiveOrExpression inclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(OR, "OR"), root_1);

                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());
                        adaptor.addChild(root_1, stream_inclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:768:6: 
                    {

                    // AST REWRITE
                    // elements: exclusiveOrExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 768:6: -> exclusiveOrExpression
                    {
                        adaptor.addChild(root_0, stream_exclusiveOrExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // jkit/java/parser/Java.g:772:1: exclusiveOrExpression : andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal425=null;
        JavaParser.andExpression_return andExpression424 = null;

        JavaParser.exclusiveOrExpression_return exclusiveOrExpression426 = null;


        Object char_literal425_tree=null;
        RewriteRuleTokenStream stream_195=new RewriteRuleTokenStream(adaptor,"token 195");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        RewriteRuleSubtreeStream stream_exclusiveOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule exclusiveOrExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // jkit/java/parser/Java.g:773:5: ( andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression ) )
            // jkit/java/parser/Java.g:773:9: andExpression ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5556);
            andExpression424=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression424.getTree());
            // jkit/java/parser/Java.g:774:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // jkit/java/parser/Java.g:775:6: ( '^' exclusiveOrExpression )
                    {
                    // jkit/java/parser/Java.g:775:6: ( '^' exclusiveOrExpression )
                    // jkit/java/parser/Java.g:775:7: '^' exclusiveOrExpression
                    {
                    char_literal425=(Token)match(input,195,FOLLOW_195_in_exclusiveOrExpression5572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_195.add(char_literal425);

                    pushFollow(FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5574);
                    exclusiveOrExpression426=exclusiveOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_exclusiveOrExpression.add(exclusiveOrExpression426.getTree());

                    }



                    // AST REWRITE
                    // elements: exclusiveOrExpression, andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 775:34: -> ^( XOR andExpression exclusiveOrExpression )
                    {
                        // jkit/java/parser/Java.g:775:37: ^( XOR andExpression exclusiveOrExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(XOR, "XOR"), root_1);

                        adaptor.addChild(root_1, stream_andExpression.nextTree());
                        adaptor.addChild(root_1, stream_exclusiveOrExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:776:8: 
                    {

                    // AST REWRITE
                    // elements: andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 776:8: -> andExpression
                    {
                        adaptor.addChild(root_0, stream_andExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // jkit/java/parser/Java.g:780:1: andExpression : equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal428=null;
        JavaParser.equalityExpression_return equalityExpression427 = null;

        JavaParser.andExpression_return andExpression429 = null;


        Object char_literal428_tree=null;
        RewriteRuleTokenStream stream_132=new RewriteRuleTokenStream(adaptor,"token 132");
        RewriteRuleSubtreeStream stream_equalityExpression=new RewriteRuleSubtreeStream(adaptor,"rule equalityExpression");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // jkit/java/parser/Java.g:781:5: ( equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression ) )
            // jkit/java/parser/Java.g:781:9: equalityExpression ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5618);
            equalityExpression427=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_equalityExpression.add(equalityExpression427.getTree());
            // jkit/java/parser/Java.g:782:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )
            int alt130=2;
            alt130 = dfa130.predict(input);
            switch (alt130) {
                case 1 :
                    // jkit/java/parser/Java.g:783:6: ( '&' andExpression )
                    {
                    // jkit/java/parser/Java.g:783:6: ( '&' andExpression )
                    // jkit/java/parser/Java.g:783:7: '&' andExpression
                    {
                    char_literal428=(Token)match(input,132,FOLLOW_132_in_andExpression5634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_132.add(char_literal428);

                    pushFollow(FOLLOW_andExpression_in_andExpression5636);
                    andExpression429=andExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_andExpression.add(andExpression429.getTree());

                    }



                    // AST REWRITE
                    // elements: equalityExpression, andExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 783:26: -> ^( AND equalityExpression andExpression )
                    {
                        // jkit/java/parser/Java.g:783:29: ^( AND equalityExpression andExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(AND, "AND"), root_1);

                        adaptor.addChild(root_1, stream_equalityExpression.nextTree());
                        adaptor.addChild(root_1, stream_andExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:784:8: 
                    {

                    // AST REWRITE
                    // elements: equalityExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 784:8: -> equalityExpression
                    {
                        adaptor.addChild(root_0, stream_equalityExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // jkit/java/parser/Java.g:788:1: equalityExpression : instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal431=null;
        Token string_literal433=null;
        JavaParser.instanceOfExpression_return instanceOfExpression430 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression432 = null;

        JavaParser.instanceOfExpression_return instanceOfExpression434 = null;


        Object string_literal431_tree=null;
        Object string_literal433_tree=null;
        RewriteRuleTokenStream stream_196=new RewriteRuleTokenStream(adaptor,"token 196");
        RewriteRuleTokenStream stream_197=new RewriteRuleTokenStream(adaptor,"token 197");
        RewriteRuleSubtreeStream stream_instanceOfExpression=new RewriteRuleSubtreeStream(adaptor,"rule instanceOfExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // jkit/java/parser/Java.g:789:5: ( instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression ) )
            // jkit/java/parser/Java.g:789:9: instanceOfExpression ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5680);
            instanceOfExpression430=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression430.getTree());
            // jkit/java/parser/Java.g:790:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )
            int alt131=3;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // jkit/java/parser/Java.g:791:6: ( '==' instanceOfExpression )
                    {
                    // jkit/java/parser/Java.g:791:6: ( '==' instanceOfExpression )
                    // jkit/java/parser/Java.g:791:7: '==' instanceOfExpression
                    {
                    string_literal431=(Token)match(input,196,FOLLOW_196_in_equalityExpression5696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_196.add(string_literal431);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5698);
                    instanceOfExpression432=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression432.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 791:34: -> ^( EQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/parser/Java.g:791:37: ^( EQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(EQ, "EQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:792:8: ( '!=' instanceOfExpression )
                    {
                    // jkit/java/parser/Java.g:792:8: ( '!=' instanceOfExpression )
                    // jkit/java/parser/Java.g:792:9: '!=' instanceOfExpression
                    {
                    string_literal433=(Token)match(input,197,FOLLOW_197_in_equalityExpression5719); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_197.add(string_literal433);

                    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5721);
                    instanceOfExpression434=instanceOfExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_instanceOfExpression.add(instanceOfExpression434.getTree());

                    }



                    // AST REWRITE
                    // elements: instanceOfExpression, instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 792:36: -> ^( NEQ instanceOfExpression instanceOfExpression )
                    {
                        // jkit/java/parser/Java.g:792:39: ^( NEQ instanceOfExpression instanceOfExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEQ, "NEQ"), root_1);

                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());
                        adaptor.addChild(root_1, stream_instanceOfExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:793:8: 
                    {

                    // AST REWRITE
                    // elements: instanceOfExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 793:8: -> instanceOfExpression
                    {
                        adaptor.addChild(root_0, stream_instanceOfExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // jkit/java/parser/Java.g:797:1: instanceOfExpression : relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal436=null;
        JavaParser.relationalExpression_return relationalExpression435 = null;

        JavaParser.type_return type437 = null;


        Object string_literal436_tree=null;
        RewriteRuleTokenStream stream_198=new RewriteRuleTokenStream(adaptor,"token 198");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_relationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule relationalExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // jkit/java/parser/Java.g:798:5: ( relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression ) )
            // jkit/java/parser/Java.g:798:9: relationalExpression ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5765);
            relationalExpression435=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_relationalExpression.add(relationalExpression435.getTree());
            // jkit/java/parser/Java.g:799:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // jkit/java/parser/Java.g:800:6: ( 'instanceof' type )
                    {
                    // jkit/java/parser/Java.g:800:6: ( 'instanceof' type )
                    // jkit/java/parser/Java.g:800:7: 'instanceof' type
                    {
                    string_literal436=(Token)match(input,198,FOLLOW_198_in_instanceOfExpression5780); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_198.add(string_literal436);

                    pushFollow(FOLLOW_type_in_instanceOfExpression5782);
                    type437=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type437.getTree());

                    }



                    // AST REWRITE
                    // elements: relationalExpression, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 800:26: -> ^( INSTANCEOF relationalExpression type )
                    {
                        // jkit/java/parser/Java.g:800:29: ^( INSTANCEOF relationalExpression type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INSTANCEOF, "INSTANCEOF"), root_1);

                        adaptor.addChild(root_1, stream_relationalExpression.nextTree());
                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:801:8: 
                    {

                    // AST REWRITE
                    // elements: relationalExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 801:8: -> relationalExpression
                    {
                        adaptor.addChild(root_0, stream_relationalExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // jkit/java/parser/Java.g:805:1: relationalExpression : shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal439=null;
        Token char_literal440=null;
        Token char_literal442=null;
        Token char_literal444=null;
        Token char_literal445=null;
        Token char_literal447=null;
        JavaParser.shiftExpression_return shiftExpression438 = null;

        JavaParser.shiftExpression_return shiftExpression441 = null;

        JavaParser.shiftExpression_return shiftExpression443 = null;

        JavaParser.shiftExpression_return shiftExpression446 = null;

        JavaParser.shiftExpression_return shiftExpression448 = null;


        Object char_literal439_tree=null;
        Object char_literal440_tree=null;
        Object char_literal442_tree=null;
        Object char_literal444_tree=null;
        Object char_literal445_tree=null;
        Object char_literal447_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleTokenStream stream_140=new RewriteRuleTokenStream(adaptor,"token 140");
        RewriteRuleSubtreeStream stream_shiftExpression=new RewriteRuleSubtreeStream(adaptor,"rule shiftExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // jkit/java/parser/Java.g:806:5: ( shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression ) )
            // jkit/java/parser/Java.g:806:9: shiftExpression ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5826);
            shiftExpression438=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression438.getTree());
            // jkit/java/parser/Java.g:807:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )
            int alt133=5;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // jkit/java/parser/Java.g:808:6: ( '<' '=' shiftExpression )
                    {
                    // jkit/java/parser/Java.g:808:6: ( '<' '=' shiftExpression )
                    // jkit/java/parser/Java.g:808:7: '<' '=' shiftExpression
                    {
                    char_literal439=(Token)match(input,129,FOLLOW_129_in_relationalExpression5842); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal439);

                    char_literal440=(Token)match(input,140,FOLLOW_140_in_relationalExpression5844); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal440);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5846);
                    shiftExpression441=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression441.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 808:32: -> ^( LTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/parser/Java.g:808:35: ^( LTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LTEQ, "LTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:809:8: ( '<' shiftExpression )
                    {
                    // jkit/java/parser/Java.g:809:8: ( '<' shiftExpression )
                    // jkit/java/parser/Java.g:809:9: '<' shiftExpression
                    {
                    char_literal442=(Token)match(input,129,FOLLOW_129_in_relationalExpression5867); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_129.add(char_literal442);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5869);
                    shiftExpression443=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression443.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 809:30: -> ^( LT shiftExpression shiftExpression )
                    {
                        // jkit/java/parser/Java.g:809:33: ^( LT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LT, "LT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:810:8: ( '>' '=' shiftExpression )
                    {
                    // jkit/java/parser/Java.g:810:8: ( '>' '=' shiftExpression )
                    // jkit/java/parser/Java.g:810:9: '>' '=' shiftExpression
                    {
                    char_literal444=(Token)match(input,131,FOLLOW_131_in_relationalExpression5890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal444);

                    char_literal445=(Token)match(input,140,FOLLOW_140_in_relationalExpression5892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_140.add(char_literal445);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5894);
                    shiftExpression446=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression446.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 810:34: -> ^( GTEQ shiftExpression shiftExpression )
                    {
                        // jkit/java/parser/Java.g:810:37: ^( GTEQ shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GTEQ, "GTEQ"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:811:8: ( '>' shiftExpression )
                    {
                    // jkit/java/parser/Java.g:811:8: ( '>' shiftExpression )
                    // jkit/java/parser/Java.g:811:9: '>' shiftExpression
                    {
                    char_literal447=(Token)match(input,131,FOLLOW_131_in_relationalExpression5915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_131.add(char_literal447);

                    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5917);
                    shiftExpression448=shiftExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_shiftExpression.add(shiftExpression448.getTree());

                    }



                    // AST REWRITE
                    // elements: shiftExpression, shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 811:30: -> ^( GT shiftExpression shiftExpression )
                    {
                        // jkit/java/parser/Java.g:811:33: ^( GT shiftExpression shiftExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GT, "GT"), root_1);

                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());
                        adaptor.addChild(root_1, stream_shiftExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:812:8: 
                    {

                    // AST REWRITE
                    // elements: shiftExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 812:8: -> shiftExpression
                    {
                        adaptor.addChild(root_0, stream_shiftExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // jkit/java/parser/Java.g:816:1: shiftExpression : additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal450=null;
        Token char_literal451=null;
        Token char_literal453=null;
        Token char_literal454=null;
        Token char_literal455=null;
        Token i=null;
        List list_i=null;
        JavaParser.additiveExpression_return additiveExpression449 = null;

        JavaParser.additiveExpression_return additiveExpression452 = null;

        JavaParser.additiveExpression_return additiveExpression456 = null;


        Object char_literal450_tree=null;
        Object char_literal451_tree=null;
        Object char_literal453_tree=null;
        Object char_literal454_tree=null;
        Object char_literal455_tree=null;
        Object i_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // jkit/java/parser/Java.g:817:5: ( additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression ) )
            // jkit/java/parser/Java.g:817:9: additiveExpression ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5962);
            additiveExpression449=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression449.getTree());
            // jkit/java/parser/Java.g:818:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )
            int alt137=3;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    // jkit/java/parser/Java.g:819:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    {
                    // jkit/java/parser/Java.g:819:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+
                    int cnt135=0;
                    loop135:
                    do {
                        int alt135=2;
                        alt135 = dfa135.predict(input);
                        switch (alt135) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:819:7: (i+= '<' '<' | i+= '>' '>' ) additiveExpression
                    	    {
                    	    // jkit/java/parser/Java.g:819:7: (i+= '<' '<' | i+= '>' '>' )
                    	    int alt134=2;
                    	    int LA134_0 = input.LA(1);

                    	    if ( (LA134_0==129) ) {
                    	        alt134=1;
                    	    }
                    	    else if ( (LA134_0==131) ) {
                    	        alt134=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 134, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt134) {
                    	        case 1 :
                    	            // jkit/java/parser/Java.g:819:8: i+= '<' '<'
                    	            {
                    	            i=(Token)match(input,129,FOLLOW_129_in_shiftExpression5981); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_129.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal450=(Token)match(input,129,FOLLOW_129_in_shiftExpression5983); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_129.add(char_literal450);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/parser/Java.g:819:19: i+= '>' '>'
                    	            {
                    	            i=(Token)match(input,131,FOLLOW_131_in_shiftExpression5987); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_131.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);

                    	            char_literal451=(Token)match(input,131,FOLLOW_131_in_shiftExpression5989); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_131.add(char_literal451);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5992);
                    	    additiveExpression452=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression452.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt135 >= 1 ) break loop135;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(135, input);
                                throw eee;
                        }
                        cnt135++;
                    } while (true);



                    // AST REWRITE
                    // elements: i, additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 819:52: -> ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                    {
                        // jkit/java/parser/Java.g:819:55: ^( LABINOP additiveExpression ( $i additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_i.hasNext()||stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_i.hasNext()||stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_i.reset();
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:821:8: ( '>' '>' '>' additiveExpression )+
                    {
                    // jkit/java/parser/Java.g:821:8: ( '>' '>' '>' additiveExpression )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        alt136 = dfa136.predict(input);
                        switch (alt136) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:821:9: '>' '>' '>' additiveExpression
                    	    {
                    	    char_literal453=(Token)match(input,131,FOLLOW_131_in_shiftExpression6026); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_131.add(char_literal453);

                    	    char_literal454=(Token)match(input,131,FOLLOW_131_in_shiftExpression6028); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_131.add(char_literal454);

                    	    char_literal455=(Token)match(input,131,FOLLOW_131_in_shiftExpression6030); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_131.add(char_literal455);

                    	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression6032);
                    	    additiveExpression456=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression456.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);



                    // AST REWRITE
                    // elements: additiveExpression, additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 821:42: -> ^( USHR additiveExpression ( additiveExpression )+ )
                    {
                        // jkit/java/parser/Java.g:821:45: ^( USHR additiveExpression ( additiveExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(USHR, "USHR"), root_1);

                        adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                        if ( !(stream_additiveExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_additiveExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                        }
                        stream_additiveExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:822:8: 
                    {

                    // AST REWRITE
                    // elements: additiveExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 822:8: -> additiveExpression
                    {
                        adaptor.addChild(root_0, stream_additiveExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // jkit/java/parser/Java.g:826:1: additiveExpression : multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.multiplicativeExpression_return multiplicativeExpression457 = null;

        JavaParser.multiplicativeExpression_return multiplicativeExpression458 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_multiplicativeExpression=new RewriteRuleSubtreeStream(adaptor,"rule multiplicativeExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // jkit/java/parser/Java.g:827:5: ( multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression ) )
            // jkit/java/parser/Java.g:827:9: multiplicativeExpression ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6075);
            multiplicativeExpression457=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression457.getTree());
            // jkit/java/parser/Java.g:828:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )
            int alt140=2;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    // jkit/java/parser/Java.g:829:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    {
                    // jkit/java/parser/Java.g:829:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+
                    int cnt139=0;
                    loop139:
                    do {
                        int alt139=2;
                        alt139 = dfa139.predict(input);
                        switch (alt139) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:829:7: (i+= '+' | i+= '-' ) multiplicativeExpression
                    	    {
                    	    // jkit/java/parser/Java.g:829:7: (i+= '+' | i+= '-' )
                    	    int alt138=2;
                    	    int LA138_0 = input.LA(1);

                    	    if ( (LA138_0==185) ) {
                    	        alt138=1;
                    	    }
                    	    else if ( (LA138_0==186) ) {
                    	        alt138=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 138, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt138) {
                    	        case 1 :
                    	            // jkit/java/parser/Java.g:829:8: i+= '+'
                    	            {
                    	            i=(Token)match(input,185,FOLLOW_185_in_additiveExpression6094); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_185.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/parser/Java.g:829:15: i+= '-'
                    	            {
                    	            i=(Token)match(input,186,FOLLOW_186_in_additiveExpression6098); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_186.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression6101);
                    	    multiplicativeExpression458=multiplicativeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_multiplicativeExpression.add(multiplicativeExpression458.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt139 >= 1 ) break loop139;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(139, input);
                                throw eee;
                        }
                        cnt139++;
                    } while (true);



                    // AST REWRITE
                    // elements: multiplicativeExpression, i, multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 829:50: -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                    {
                        // jkit/java/parser/Java.g:829:53: ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());
                        if ( !(stream_multiplicativeExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_multiplicativeExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_multiplicativeExpression.nextTree());

                        }
                        stream_multiplicativeExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:830:8: 
                    {

                    // AST REWRITE
                    // elements: multiplicativeExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 830:8: -> multiplicativeExpression
                    {
                        adaptor.addChild(root_0, stream_multiplicativeExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // jkit/java/parser/Java.g:834:1: multiplicativeExpression : unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token i=null;
        List list_i=null;
        JavaParser.unaryExpression_return unaryExpression459 = null;

        JavaParser.unaryExpression_return unaryExpression460 = null;


        Object i_tree=null;
        RewriteRuleTokenStream stream_125=new RewriteRuleTokenStream(adaptor,"token 125");
        RewriteRuleTokenStream stream_187=new RewriteRuleTokenStream(adaptor,"token 187");
        RewriteRuleTokenStream stream_191=new RewriteRuleTokenStream(adaptor,"token 191");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // jkit/java/parser/Java.g:835:5: ( unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression ) )
            // jkit/java/parser/Java.g:835:9: unaryExpression ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6152);
            unaryExpression459=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression459.getTree());
            // jkit/java/parser/Java.g:836:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )
            int alt143=2;
            alt143 = dfa143.predict(input);
            switch (alt143) {
                case 1 :
                    // jkit/java/parser/Java.g:837:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    {
                    // jkit/java/parser/Java.g:837:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+
                    int cnt142=0;
                    loop142:
                    do {
                        int alt142=2;
                        alt142 = dfa142.predict(input);
                        switch (alt142) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:837:8: (i+= '*' | i+= '/' | i+= '%' ) unaryExpression
                    	    {
                    	    // jkit/java/parser/Java.g:837:8: (i+= '*' | i+= '/' | i+= '%' )
                    	    int alt141=3;
                    	    switch ( input.LA(1) ) {
                    	    case 125:
                    	        {
                    	        alt141=1;
                    	        }
                    	        break;
                    	    case 187:
                    	        {
                    	        alt141=2;
                    	        }
                    	        break;
                    	    case 191:
                    	        {
                    	        alt141=3;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 141, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt141) {
                    	        case 1 :
                    	            // jkit/java/parser/Java.g:837:9: i+= '*'
                    	            {
                    	            i=(Token)match(input,125,FOLLOW_125_in_multiplicativeExpression6172); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_125.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // jkit/java/parser/Java.g:837:16: i+= '/'
                    	            {
                    	            i=(Token)match(input,187,FOLLOW_187_in_multiplicativeExpression6176); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_187.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // jkit/java/parser/Java.g:837:23: i+= '%'
                    	            {
                    	            i=(Token)match(input,191,FOLLOW_191_in_multiplicativeExpression6180); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_191.add(i);

                    	            if (list_i==null) list_i=new ArrayList();
                    	            list_i.add(i);


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression6183);
                    	    unaryExpression460=unaryExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression460.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt142 >= 1 ) break loop142;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(142, input);
                                throw eee;
                        }
                        cnt142++;
                    } while (true);



                    // AST REWRITE
                    // elements: unaryExpression, unaryExpression, i
                    // token labels: 
                    // rule labels: retval
                    // token list labels: i
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i", list_i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 837:49: -> ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                    {
                        // jkit/java/parser/Java.g:837:52: ^( LABINOP unaryExpression ( $i unaryExpression )+ )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(LABINOP, "LABINOP"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());
                        if ( !(stream_unaryExpression.hasNext()||stream_i.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_unaryExpression.hasNext()||stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                            adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        }
                        stream_unaryExpression.reset();
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:838:8: 
                    {

                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 838:8: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // jkit/java/parser/Java.g:842:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal461=null;
        Token char_literal463=null;
        Token string_literal465=null;
        Token string_literal467=null;
        JavaParser.unaryExpression_return unaryExpression462 = null;

        JavaParser.unaryExpression_return unaryExpression464 = null;

        JavaParser.unaryExpression_return unaryExpression466 = null;

        JavaParser.unaryExpression_return unaryExpression468 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus469 = null;


        Object char_literal461_tree=null;
        Object char_literal463_tree=null;
        Object string_literal465_tree=null;
        Object string_literal467_tree=null;
        RewriteRuleTokenStream stream_185=new RewriteRuleTokenStream(adaptor,"token 185");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_186=new RewriteRuleTokenStream(adaptor,"token 186");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // jkit/java/parser/Java.g:843:5: ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus )
            int alt144=5;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // jkit/java/parser/Java.g:843:9: '+' unaryExpression
                    {
                    char_literal461=(Token)match(input,185,FOLLOW_185_in_unaryExpression6235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_185.add(char_literal461);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6237);
                    unaryExpression462=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression462.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 843:29: -> unaryExpression
                    {
                        adaptor.addChild(root_0, stream_unaryExpression.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:844:7: '-' unaryExpression
                    {
                    char_literal463=(Token)match(input,186,FOLLOW_186_in_unaryExpression6249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_186.add(char_literal463);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6251);
                    unaryExpression464=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression464.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 844:27: -> ^( NEG unaryExpression )
                    {
                        // jkit/java/parser/Java.g:844:30: ^( NEG unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEG, "NEG"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:845:9: '++' unaryExpression
                    {
                    string_literal465=(Token)match(input,199,FOLLOW_199_in_unaryExpression6269); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_199.add(string_literal465);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6271);
                    unaryExpression466=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression466.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 845:30: -> ^( PREINC unaryExpression )
                    {
                        // jkit/java/parser/Java.g:845:33: ^( PREINC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREINC, "PREINC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:846:9: '--' unaryExpression
                    {
                    string_literal467=(Token)match(input,200,FOLLOW_200_in_unaryExpression6289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_200.add(string_literal467);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression6291);
                    unaryExpression468=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression468.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 846:30: -> ^( PREDEC unaryExpression )
                    {
                        // jkit/java/parser/Java.g:846:33: ^( PREDEC unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(PREDEC, "PREDEC"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:847:9: unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6309);
                    unaryExpressionNotPlusMinus469=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus469.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 847:37: -> unaryExpressionNotPlusMinus
                    {
                        adaptor.addChild(root_0, stream_unaryExpressionNotPlusMinus.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // jkit/java/parser/Java.g:850:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal470=null;
        Token char_literal472=null;
        Token string_literal477=null;
        Token string_literal478=null;
        Token string_literal479=null;
        Token string_literal480=null;
        JavaParser.unaryExpression_return unaryExpression471 = null;

        JavaParser.unaryExpression_return unaryExpression473 = null;

        JavaParser.castExpression_return castExpression474 = null;

        JavaParser.primary_return primary475 = null;

        JavaParser.selector_return selector476 = null;


        Object char_literal470_tree=null;
        Object char_literal472_tree=null;
        Object string_literal477_tree=null;
        Object string_literal478_tree=null;
        Object string_literal479_tree=null;
        Object string_literal480_tree=null;
        RewriteRuleTokenStream stream_202=new RewriteRuleTokenStream(adaptor,"token 202");
        RewriteRuleTokenStream stream_200=new RewriteRuleTokenStream(adaptor,"token 200");
        RewriteRuleTokenStream stream_199=new RewriteRuleTokenStream(adaptor,"token 199");
        RewriteRuleTokenStream stream_201=new RewriteRuleTokenStream(adaptor,"token 201");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_primary=new RewriteRuleSubtreeStream(adaptor,"rule primary");
        RewriteRuleSubtreeStream stream_selector=new RewriteRuleSubtreeStream(adaptor,"rule selector");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // jkit/java/parser/Java.g:851:5: ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) )
            int alt148=4;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // jkit/java/parser/Java.g:851:9: '~' unaryExpression
                    {
                    char_literal470=(Token)match(input,201,FOLLOW_201_in_unaryExpressionNotPlusMinus6340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_201.add(char_literal470);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6342);
                    unaryExpression471=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression471.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 851:29: -> ^( INV unaryExpression )
                    {
                        // jkit/java/parser/Java.g:851:32: ^( INV unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INV, "INV"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:852:8: '!' unaryExpression
                    {
                    char_literal472=(Token)match(input,202,FOLLOW_202_in_unaryExpressionNotPlusMinus6359); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_202.add(char_literal472);

                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6361);
                    unaryExpression473=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression473.getTree());


                    // AST REWRITE
                    // elements: unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 852:28: -> ^( NOT unaryExpression )
                    {
                        // jkit/java/parser/Java.g:852:31: ^( NOT unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NOT, "NOT"), root_1);

                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:853:9: castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6379);
                    castExpression474=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castExpression474.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:854:6: primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus6386);
                    primary475=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primary.add(primary475.getTree());
                    // jkit/java/parser/Java.g:855:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )
                    int alt147=4;
                    alt147 = dfa147.predict(input);
                    switch (alt147) {
                        case 1 :
                            // jkit/java/parser/Java.g:856:4: ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            {
                            // jkit/java/parser/Java.g:856:4: ( selector )+
                            int cnt145=0;
                            loop145:
                            do {
                                int alt145=2;
                                alt145 = dfa145.predict(input);
                                switch (alt145) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:0:0: selector
                            	    {
                            	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus6396);
                            	    selector476=selector();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_selector.add(selector476.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt145 >= 1 ) break loop145;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(145, input);
                                        throw eee;
                                }
                                cnt145++;
                            } while (true);

                            // jkit/java/parser/Java.g:857:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )
                            int alt146=3;
                            alt146 = dfa146.predict(input);
                            switch (alt146) {
                                case 1 :
                                    // jkit/java/parser/Java.g:858:5: '++'
                                    {
                                    string_literal477=(Token)match(input,199,FOLLOW_199_in_unaryExpressionNotPlusMinus6409); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_199.add(string_literal477);



                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 858:10: -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/parser/Java.g:858:13: ^( POSTINC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                        // jkit/java/parser/Java.g:858:23: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 2 :
                                    // jkit/java/parser/Java.g:859:6: '--'
                                    {
                                    string_literal478=(Token)match(input,200,FOLLOW_200_in_unaryExpressionNotPlusMinus6431); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_200.add(string_literal478);



                                    // AST REWRITE
                                    // elements: selector, primary
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 859:11: -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                    {
                                        // jkit/java/parser/Java.g:859:14: ^( POSTDEC ^( SELECTOR primary ( selector )+ ) )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                        // jkit/java/parser/Java.g:859:24: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_2 = (Object)adaptor.nil();
                                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_2);

                                        adaptor.addChild(root_2, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_2, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_1, root_2);
                                        }

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;
                                case 3 :
                                    // jkit/java/parser/Java.g:860:7: 
                                    {

                                    // AST REWRITE
                                    // elements: primary, selector
                                    // token labels: 
                                    // rule labels: retval
                                    // token list labels: 
                                    // rule list labels: 
                                    if ( state.backtracking==0 ) {
                                    retval.tree = root_0;
                                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                                    root_0 = (Object)adaptor.nil();
                                    // 860:7: -> ^( SELECTOR primary ( selector )+ )
                                    {
                                        // jkit/java/parser/Java.g:860:10: ^( SELECTOR primary ( selector )+ )
                                        {
                                        Object root_1 = (Object)adaptor.nil();
                                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(SELECTOR, "SELECTOR"), root_1);

                                        adaptor.addChild(root_1, stream_primary.nextTree());
                                        if ( !(stream_selector.hasNext()) ) {
                                            throw new RewriteEarlyExitException();
                                        }
                                        while ( stream_selector.hasNext() ) {
                                            adaptor.addChild(root_1, stream_selector.nextTree());

                                        }
                                        stream_selector.reset();

                                        adaptor.addChild(root_0, root_1);
                                        }

                                    }

                                    retval.tree = root_0;}
                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:862:6: '++'
                            {
                            string_literal479=(Token)match(input,199,FOLLOW_199_in_unaryExpressionNotPlusMinus6475); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_199.add(string_literal479);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 862:11: -> ^( POSTINC primary )
                            {
                                // jkit/java/parser/Java.g:862:14: ^( POSTINC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTINC, "POSTINC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/parser/Java.g:863:6: '--'
                            {
                            string_literal480=(Token)match(input,200,FOLLOW_200_in_unaryExpressionNotPlusMinus6490); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_200.add(string_literal480);



                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 863:11: -> ^( POSTDEC primary )
                            {
                                // jkit/java/parser/Java.g:863:14: ^( POSTDEC primary )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(POSTDEC, "POSTDEC"), root_1);

                                adaptor.addChild(root_1, stream_primary.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // jkit/java/parser/Java.g:864:6: 
                            {

                            // AST REWRITE
                            // elements: primary
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 864:6: -> primary
                            {
                                adaptor.addChild(root_0, stream_primary.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // jkit/java/parser/Java.g:868:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal481=null;
        Token char_literal483=null;
        Token char_literal485=null;
        Token char_literal487=null;
        Token char_literal489=null;
        Token char_literal491=null;
        JavaParser.primitiveType_return primitiveType482 = null;

        JavaParser.unaryExpression_return unaryExpression484 = null;

        JavaParser.type_return type486 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus488 = null;

        JavaParser.expression_return expression490 = null;

        JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus492 = null;


        Object char_literal481_tree=null;
        Object char_literal483_tree=null;
        Object char_literal485_tree=null;
        Object char_literal487_tree=null;
        Object char_literal489_tree=null;
        Object char_literal491_tree=null;
        RewriteRuleTokenStream stream_161=new RewriteRuleTokenStream(adaptor,"token 161");
        RewriteRuleTokenStream stream_162=new RewriteRuleTokenStream(adaptor,"token 162");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_unaryExpressionNotPlusMinus=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpressionNotPlusMinus");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // jkit/java/parser/Java.g:869:5: ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->)
            int alt149=3;
            alt149 = dfa149.predict(input);
            switch (alt149) {
                case 1 :
                    // jkit/java/parser/Java.g:869:8: '(' primitiveType ')' unaryExpression
                    {
                    char_literal481=(Token)match(input,161,FOLLOW_161_in_castExpression6529); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal481);

                    pushFollow(FOLLOW_primitiveType_in_castExpression6531);
                    primitiveType482=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType482.getTree());
                    char_literal483=(Token)match(input,162,FOLLOW_162_in_castExpression6533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal483);

                    pushFollow(FOLLOW_unaryExpression_in_castExpression6535);
                    unaryExpression484=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpression.add(unaryExpression484.getTree());


                    // AST REWRITE
                    // elements: primitiveType, unaryExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 869:46: -> ^( CAST ^( TYPE primitiveType ) unaryExpression )
                    {
                        // jkit/java/parser/Java.g:869:49: ^( CAST ^( TYPE primitiveType ) unaryExpression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        // jkit/java/parser/Java.g:869:56: ^( TYPE primitiveType )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, stream_primitiveType.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:870:8: '(' type ')' unaryExpressionNotPlusMinus
                    {
                    char_literal485=(Token)match(input,161,FOLLOW_161_in_castExpression6558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal485);

                    pushFollow(FOLLOW_type_in_castExpression6560);
                    type486=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type486.getTree());
                    char_literal487=(Token)match(input,162,FOLLOW_162_in_castExpression6562); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal487);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6564);
                    unaryExpressionNotPlusMinus488=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus488.getTree());


                    // AST REWRITE
                    // elements: unaryExpressionNotPlusMinus, type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 870:49: -> ^( CAST type unaryExpressionNotPlusMinus )
                    {
                        // jkit/java/parser/Java.g:870:52: ^( CAST type unaryExpressionNotPlusMinus )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(CAST, "CAST"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());
                        adaptor.addChild(root_1, stream_unaryExpressionNotPlusMinus.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:871:8: '(' expression ')' unaryExpressionNotPlusMinus
                    {
                    char_literal489=(Token)match(input,161,FOLLOW_161_in_castExpression6583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_161.add(char_literal489);

                    pushFollow(FOLLOW_expression_in_castExpression6585);
                    expression490=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression490.getTree());
                    char_literal491=(Token)match(input,162,FOLLOW_162_in_castExpression6587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_162.add(char_literal491);

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6589);
                    unaryExpressionNotPlusMinus492=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_unaryExpressionNotPlusMinus.add(unaryExpressionNotPlusMinus492.getTree());


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 871:55: ->
                    {
                        root_0 = null;
                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // jkit/java/parser/Java.g:874:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | lc= 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID[$lc] ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token lc=null;
        Token string_literal497=null;
        Token char_literal500=null;
        Token char_literal502=null;
        Token char_literal503=null;
        Token char_literal504=null;
        Token char_literal505=null;
        Token char_literal506=null;
        Token string_literal508=null;
        Token char_literal510=null;
        Token char_literal511=null;
        Token char_literal513=null;
        Token char_literal514=null;
        Token char_literal515=null;
        Token char_literal516=null;
        Token char_literal517=null;
        Token char_literal521=null;
        Token string_literal522=null;
        Token char_literal523=null;
        Token string_literal524=null;
        Token string_literal525=null;
        Token Identifier527=null;
        List list_i=null;
        JavaParser.parExpression_return parExpression493 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments494 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix495 = null;

        JavaParser.literal_return literal496 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments498 = null;

        JavaParser.primitiveType_return primitiveType499 = null;

        JavaParser.expression_return expression501 = null;

        JavaParser.arrayInitializer_return arrayInitializer507 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments509 = null;

        JavaParser.expression_return expression512 = null;

        JavaParser.arrayInitializer_return arrayInitializer518 = null;

        JavaParser.classCreatorRest_return classCreatorRest519 = null;

        JavaParser.type_return type520 = null;

        JavaParser.arguments_return arguments526 = null;

        JavaParser.arguments_return arguments528 = null;

        JavaParser.refComponent_return i = null;
        Object lc_tree=null;
        Object string_literal497_tree=null;
        Object char_literal500_tree=null;
        Object char_literal502_tree=null;
        Object char_literal503_tree=null;
        Object char_literal504_tree=null;
        Object char_literal505_tree=null;
        Object char_literal506_tree=null;
        Object string_literal508_tree=null;
        Object char_literal510_tree=null;
        Object char_literal511_tree=null;
        Object char_literal513_tree=null;
        Object char_literal514_tree=null;
        Object char_literal515_tree=null;
        Object char_literal516_tree=null;
        Object char_literal517_tree=null;
        Object char_literal521_tree=null;
        Object string_literal522_tree=null;
        Object char_literal523_tree=null;
        Object string_literal524_tree=null;
        Object string_literal525_tree=null;
        Object Identifier527_tree=null;
        RewriteRuleTokenStream stream_136=new RewriteRuleTokenStream(adaptor,"token 136");
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleTokenStream stream_126=new RewriteRuleTokenStream(adaptor,"token 126");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_arrayInitializer=new RewriteRuleSubtreeStream(adaptor,"rule arrayInitializer");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_refComponent=new RewriteRuleSubtreeStream(adaptor,"rule refComponent");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // jkit/java/parser/Java.g:875:5: ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | lc= 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID[$lc] ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) )
            int alt163=9;
            alt163 = dfa163.predict(input);
            switch (alt163) {
                case 1 :
                    // jkit/java/parser/Java.g:875:7: parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary6609);
                    parExpression493=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parExpression493.getTree());

                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:876:6: nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6616);
                    nonWildcardTypeArguments494=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments494.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary6618);
                    explicitGenericInvocationSuffix495=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix495.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 876:63: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/parser/Java.g:876:66: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/parser/Java.g:876:75: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:877:9: literal
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_literal_in_primary6642);
                    literal496=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, literal496.getTree());

                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:878:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    {
                    string_literal497=(Token)match(input,203,FOLLOW_203_in_primary6652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_203.add(string_literal497);

                    // jkit/java/parser/Java.g:878:15: ( nonWildcardTypeArguments )?
                    int alt150=2;
                    int LA150_0 = input.LA(1);

                    if ( (LA150_0==129) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6654);
                            nonWildcardTypeArguments498=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments498.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_primitiveType_in_primary6657);
                    primitiveType499=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_primitiveType.add(primitiveType499.getTree());
                    // jkit/java/parser/Java.g:879:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )
                    int alt154=2;
                    alt154 = dfa154.predict(input);
                    switch (alt154) {
                        case 1 :
                            // jkit/java/parser/Java.g:880:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/parser/Java.g:880:7: ( '[' expression ']' )+
                            int cnt151=0;
                            loop151:
                            do {
                                int alt151=2;
                                alt151 = dfa151.predict(input);
                                switch (alt151) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:880:8: '[' expression ']'
                            	    {
                            	    char_literal500=(Token)match(input,138,FOLLOW_138_in_primary6673); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_138.add(char_literal500);

                            	    pushFollow(FOLLOW_expression_in_primary6675);
                            	    expression501=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression501.getTree());
                            	    char_literal502=(Token)match(input,139,FOLLOW_139_in_primary6677); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_139.add(char_literal502);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt151 >= 1 ) break loop151;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(151, input);
                                        throw eee;
                                }
                                cnt151++;
                            } while (true);

                            // jkit/java/parser/Java.g:880:29: ( '[' ']' )*
                            loop152:
                            do {
                                int alt152=2;
                                alt152 = dfa152.predict(input);
                                switch (alt152) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:880:30: '[' ']'
                            	    {
                            	    char_literal503=(Token)match(input,138,FOLLOW_138_in_primary6682); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_138.add(char_literal503);

                            	    char_literal504=(Token)match(input,139,FOLLOW_139_in_primary6684); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_139.add(char_literal504);


                            	    }
                            	    break;

                            	default :
                            	    break loop152;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: expression, primitiveType, 138
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 880:40: -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/parser/Java.g:880:43: ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/parser/Java.g:880:49: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/parser/Java.g:880:70: ( '[' )*
                                while ( stream_138.hasNext() ) {
                                    adaptor.addChild(root_2, stream_138.nextNode());

                                }
                                stream_138.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:880:76: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:881:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/parser/Java.g:881:9: ( '[' ']' )+
                            int cnt153=0;
                            loop153:
                            do {
                                int alt153=2;
                                int LA153_0 = input.LA(1);

                                if ( (LA153_0==138) ) {
                                    alt153=1;
                                }


                                switch (alt153) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:881:10: '[' ']'
                            	    {
                            	    char_literal505=(Token)match(input,138,FOLLOW_138_in_primary6715); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_138.add(char_literal505);

                            	    char_literal506=(Token)match(input,139,FOLLOW_139_in_primary6717); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_139.add(char_literal506);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt153 >= 1 ) break loop153;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(153, input);
                                        throw eee;
                                }
                                cnt153++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6721);
                            arrayInitializer507=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer507.getTree());


                            // AST REWRITE
                            // elements: arrayInitializer, 138, primitiveType
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 881:37: -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/parser/Java.g:881:40: ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/parser/Java.g:881:52: ^( TYPE primitiveType ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                adaptor.addChild(root_2, stream_primitiveType.nextTree());
                                // jkit/java/parser/Java.g:881:73: ( '[' )*
                                while ( stream_138.hasNext() ) {
                                    adaptor.addChild(root_2, stream_138.nextNode());

                                }
                                stream_138.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:883:9: 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    {
                    string_literal508=(Token)match(input,203,FOLLOW_203_in_primary6753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_203.add(string_literal508);

                    // jkit/java/parser/Java.g:883:15: ( nonWildcardTypeArguments )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==129) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // jkit/java/parser/Java.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary6755);
                            nonWildcardTypeArguments509=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments509.getTree());

                            }
                            break;

                    }

                    // jkit/java/parser/Java.g:883:41: (i+= refComponent ( '.' i+= refComponent )* )
                    // jkit/java/parser/Java.g:883:42: i+= refComponent ( '.' i+= refComponent )*
                    {
                    pushFollow(FOLLOW_refComponent_in_primary6761);
                    i=refComponent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    if (list_i==null) list_i=new ArrayList();
                    list_i.add(i.getTree());

                    // jkit/java/parser/Java.g:883:58: ( '.' i+= refComponent )*
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==124) ) {
                            alt156=1;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // jkit/java/parser/Java.g:883:59: '.' i+= refComponent
                    	    {
                    	    char_literal510=(Token)match(input,124,FOLLOW_124_in_primary6764); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_124.add(char_literal510);

                    	    pushFollow(FOLLOW_refComponent_in_primary6768);
                    	    i=refComponent();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_refComponent.add(i.getTree());
                    	    if (list_i==null) list_i=new ArrayList();
                    	    list_i.add(i.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);


                    }

                    // jkit/java/parser/Java.g:884:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )
                    int alt160=3;
                    alt160 = dfa160.predict(input);
                    switch (alt160) {
                        case 1 :
                            // jkit/java/parser/Java.g:885:7: ( '[' expression ']' )+ ( '[' ']' )*
                            {
                            // jkit/java/parser/Java.g:885:7: ( '[' expression ']' )+
                            int cnt157=0;
                            loop157:
                            do {
                                int alt157=2;
                                alt157 = dfa157.predict(input);
                                switch (alt157) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:885:8: '[' expression ']'
                            	    {
                            	    char_literal511=(Token)match(input,138,FOLLOW_138_in_primary6787); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_138.add(char_literal511);

                            	    pushFollow(FOLLOW_expression_in_primary6789);
                            	    expression512=expression();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_expression.add(expression512.getTree());
                            	    char_literal513=(Token)match(input,139,FOLLOW_139_in_primary6791); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_139.add(char_literal513);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt157 >= 1 ) break loop157;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(157, input);
                                        throw eee;
                                }
                                cnt157++;
                            } while (true);

                            // jkit/java/parser/Java.g:885:29: ( '[' ']' )*
                            loop158:
                            do {
                                int alt158=2;
                                alt158 = dfa158.predict(input);
                                switch (alt158) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:885:30: '[' ']'
                            	    {
                            	    char_literal514=(Token)match(input,138,FOLLOW_138_in_primary6796); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_138.add(char_literal514);

                            	    char_literal515=(Token)match(input,139,FOLLOW_139_in_primary6798); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_139.add(char_literal515);


                            	    }
                            	    break;

                            	default :
                            	    break loop158;
                                }
                            } while (true);



                            // AST REWRITE
                            // elements: 138, expression, i
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 885:40: -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                            {
                                // jkit/java/parser/Java.g:885:43: ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/parser/Java.g:885:49: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/parser/Java.g:885:60: ( '[' )*
                                while ( stream_138.hasNext() ) {
                                    adaptor.addChild(root_2, stream_138.nextNode());

                                }
                                stream_138.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:885:66: ( expression )*
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:886:9: ( '[' ']' )+ arrayInitializer
                            {
                            // jkit/java/parser/Java.g:886:9: ( '[' ']' )+
                            int cnt159=0;
                            loop159:
                            do {
                                int alt159=2;
                                int LA159_0 = input.LA(1);

                                if ( (LA159_0==138) ) {
                                    alt159=1;
                                }


                                switch (alt159) {
                            	case 1 :
                            	    // jkit/java/parser/Java.g:886:10: '[' ']'
                            	    {
                            	    char_literal516=(Token)match(input,138,FOLLOW_138_in_primary6831); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_138.add(char_literal516);

                            	    char_literal517=(Token)match(input,139,FOLLOW_139_in_primary6833); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_139.add(char_literal517);


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt159 >= 1 ) break loop159;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(159, input);
                                        throw eee;
                                }
                                cnt159++;
                            } while (true);

                            pushFollow(FOLLOW_arrayInitializer_in_primary6837);
                            arrayInitializer518=arrayInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arrayInitializer.add(arrayInitializer518.getTree());


                            // AST REWRITE
                            // elements: i, arrayInitializer, 138
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 886:37: -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                            {
                                // jkit/java/parser/Java.g:886:40: ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINIT, "ARRAYINIT"), root_1);

                                // jkit/java/parser/Java.g:886:52: ^( TYPE ( $i)+ ( '[' )* )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();
                                // jkit/java/parser/Java.g:886:63: ( '[' )*
                                while ( stream_138.hasNext() ) {
                                    adaptor.addChild(root_2, stream_138.nextNode());

                                }
                                stream_138.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                adaptor.addChild(root_1, stream_arrayInitializer.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // jkit/java/parser/Java.g:887:9: classCreatorRest
                            {
                            pushFollow(FOLLOW_classCreatorRest_in_primary6866);
                            classCreatorRest519=classCreatorRest();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest519.getTree());


                            // AST REWRITE
                            // elements: i, classCreatorRest
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: i
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                            RewriteRuleSubtreeStream stream_i=new RewriteRuleSubtreeStream(adaptor,"token i",list_i);
                            root_0 = (Object)adaptor.nil();
                            // 887:26: -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                            {
                                // jkit/java/parser/Java.g:887:29: ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                                // jkit/java/parser/Java.g:887:35: ^( TYPE ( $i)+ )
                                {
                                Object root_2 = (Object)adaptor.nil();
                                root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                                if ( !(stream_i.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_i.hasNext() ) {
                                    adaptor.addChild(root_2, stream_i.nextTree());

                                }
                                stream_i.reset();

                                adaptor.addChild(root_1, root_2);
                                }
                                // jkit/java/parser/Java.g:887:47: ( classCreatorRest )?
                                if ( stream_classCreatorRest.hasNext() ) {
                                    adaptor.addChild(root_1, stream_classCreatorRest.nextTree());

                                }
                                stream_classCreatorRest.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 6 :
                    // jkit/java/parser/Java.g:889:9: type '.' 'class'
                    {
                    pushFollow(FOLLOW_type_in_primary6898);
                    type520=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_type.add(type520.getTree());
                    char_literal521=(Token)match(input,124,FOLLOW_124_in_primary6900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal521);

                    string_literal522=(Token)match(input,126,FOLLOW_126_in_primary6902); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(string_literal522);



                    // AST REWRITE
                    // elements: type
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 889:26: -> ^( GETCLASS type )
                    {
                        // jkit/java/parser/Java.g:889:29: ^( GETCLASS type )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        adaptor.addChild(root_1, stream_type.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 7 :
                    // jkit/java/parser/Java.g:890:9: lc= 'void' '.' 'class'
                    {
                    lc=(Token)match(input,136,FOLLOW_136_in_primary6926); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_136.add(lc);

                    char_literal523=(Token)match(input,124,FOLLOW_124_in_primary6928); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal523);

                    string_literal524=(Token)match(input,126,FOLLOW_126_in_primary6930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_126.add(string_literal524);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 890:31: -> ^( GETCLASS ^( TYPE VOID[$lc] ) )
                    {
                        // jkit/java/parser/Java.g:890:34: ^( GETCLASS ^( TYPE VOID[$lc] ) )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(GETCLASS, "GETCLASS"), root_1);

                        // jkit/java/parser/Java.g:890:45: ^( TYPE VOID[$lc] )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_2);

                        adaptor.addChild(root_2, (Object)adaptor.create(VOID, lc));

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 8 :
                    // jkit/java/parser/Java.g:891:8: 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    {
                    string_literal525=(Token)match(input,160,FOLLOW_160_in_primary6952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal525);

                    // jkit/java/parser/Java.g:892:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )
                    int alt161=2;
                    alt161 = dfa161.predict(input);
                    switch (alt161) {
                        case 1 :
                            // jkit/java/parser/Java.g:893:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary6962);
                            arguments526=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments526.getTree());


                            // AST REWRITE
                            // elements: arguments, 160
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 893:14: -> ^( INVOKE 'super' ( arguments )? )
                            {
                                // jkit/java/parser/Java.g:893:17: ^( INVOKE 'super' ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_160.nextNode());
                                // jkit/java/parser/Java.g:893:34: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:894:6: 
                            {

                            // AST REWRITE
                            // elements: 160
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 894:6: -> ^( VAR 'super' )
                            {
                                // jkit/java/parser/Java.g:894:9: ^( VAR 'super' )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_160.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 9 :
                    // jkit/java/parser/Java.g:896:9: Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    {
                    Identifier527=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary7000); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier527);

                    // jkit/java/parser/Java.g:897:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )
                    int alt162=2;
                    alt162 = dfa162.predict(input);
                    switch (alt162) {
                        case 1 :
                            // jkit/java/parser/Java.g:898:7: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_primary7016);
                            arguments528=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments528.getTree());


                            // AST REWRITE
                            // elements: arguments, Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 898:17: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/parser/Java.g:898:20: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/parser/Java.g:898:40: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:899:9: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 899:9: -> ^( VAR Identifier )
                            {
                                // jkit/java/parser/Java.g:899:12: ^( VAR Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(VAR, "VAR"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class innerCreator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // jkit/java/parser/Java.g:903:1: innerCreator : Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Token Identifier529=null;
        JavaParser.classCreatorRest_return classCreatorRest530 = null;


        Object Identifier529_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_classCreatorRest=new RewriteRuleSubtreeStream(adaptor,"rule classCreatorRest");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // jkit/java/parser/Java.g:904:2: ( Identifier classCreatorRest -> ^( TYPE Identifier ) ( classCreatorRest )? )
            // jkit/java/parser/Java.g:904:4: Identifier classCreatorRest
            {
            Identifier529=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator7061); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_Identifier.add(Identifier529);

            pushFollow(FOLLOW_classCreatorRest_in_innerCreator7063);
            classCreatorRest530=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classCreatorRest.add(classCreatorRest530.getTree());


            // AST REWRITE
            // elements: Identifier, classCreatorRest
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 904:32: -> ^( TYPE Identifier ) ( classCreatorRest )?
            {
                // jkit/java/parser/Java.g:904:35: ^( TYPE Identifier )
                {
                Object root_1 = (Object)adaptor.nil();
                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE, "TYPE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.nextNode());

                adaptor.addChild(root_0, root_1);
                }
                // jkit/java/parser/Java.g:904:54: ( classCreatorRest )?
                if ( stream_classCreatorRest.hasNext() ) {
                    adaptor.addChild(root_0, stream_classCreatorRest.nextTree());

                }
                stream_classCreatorRest.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // jkit/java/parser/Java.g:907:1: classCreatorRest : arguments ( classBody )? -> ( arguments )? ( classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.arguments_return arguments531 = null;

        JavaParser.classBody_return classBody532 = null;


        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_classBody=new RewriteRuleSubtreeStream(adaptor,"rule classBody");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // jkit/java/parser/Java.g:908:2: ( arguments ( classBody )? -> ( arguments )? ( classBody )? )
            // jkit/java/parser/Java.g:908:4: arguments ( classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest7085);
            arguments531=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arguments.add(arguments531.getTree());
            // jkit/java/parser/Java.g:908:14: ( classBody )?
            int alt164=2;
            alt164 = dfa164.predict(input);
            switch (alt164) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest7087);
                    classBody532=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classBody.add(classBody532.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: arguments, classBody
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 908:25: -> ( arguments )? ( classBody )?
            {
                // jkit/java/parser/Java.g:908:28: ( arguments )?
                if ( stream_arguments.hasNext() ) {
                    adaptor.addChild(root_0, stream_arguments.nextTree());

                }
                stream_arguments.reset();
                // jkit/java/parser/Java.g:908:39: ( classBody )?
                if ( stream_classBody.hasNext() ) {
                    adaptor.addChild(root_0, stream_classBody.nextTree());

                }
                stream_classBody.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // jkit/java/parser/Java.g:911:1: explicitGenericInvocation : nonWildcardTypeArguments explicitGenericInvocationSuffix ;
    public final JavaParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        JavaParser.explicitGenericInvocation_return retval = new JavaParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments533 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix534 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // jkit/java/parser/Java.g:912:2: ( nonWildcardTypeArguments explicitGenericInvocationSuffix )
            // jkit/java/parser/Java.g:912:4: nonWildcardTypeArguments explicitGenericInvocationSuffix
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation7108);
            nonWildcardTypeArguments533=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments533.getTree());
            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation7110);
            explicitGenericInvocationSuffix534=explicitGenericInvocationSuffix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, explicitGenericInvocationSuffix534.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // jkit/java/parser/Java.g:915:1: nonWildcardTypeArguments : '<' typeList '>' -> typeList ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal535=null;
        Token char_literal537=null;
        JavaParser.typeList_return typeList536 = null;


        Object char_literal535_tree=null;
        Object char_literal537_tree=null;
        RewriteRuleTokenStream stream_131=new RewriteRuleTokenStream(adaptor,"token 131");
        RewriteRuleTokenStream stream_129=new RewriteRuleTokenStream(adaptor,"token 129");
        RewriteRuleSubtreeStream stream_typeList=new RewriteRuleSubtreeStream(adaptor,"rule typeList");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // jkit/java/parser/Java.g:916:2: ( '<' typeList '>' -> typeList )
            // jkit/java/parser/Java.g:916:4: '<' typeList '>'
            {
            char_literal535=(Token)match(input,129,FOLLOW_129_in_nonWildcardTypeArguments7122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_129.add(char_literal535);

            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments7124);
            typeList536=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_typeList.add(typeList536.getTree());
            char_literal537=(Token)match(input,131,FOLLOW_131_in_nonWildcardTypeArguments7126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_131.add(char_literal537);



            // AST REWRITE
            // elements: typeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (Object)adaptor.nil();
            // 916:21: -> typeList
            {
                adaptor.addChild(root_0, stream_typeList.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // jkit/java/parser/Java.g:919:1: explicitGenericInvocationSuffix : ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? );
    public final JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        JavaParser.explicitGenericInvocationSuffix_return retval = new JavaParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal538=null;
        Token Identifier540=null;
        JavaParser.superSuffix_return superSuffix539 = null;

        JavaParser.arguments_return arguments541 = null;


        Object string_literal538_tree=null;
        Object Identifier540_tree=null;
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_superSuffix=new RewriteRuleSubtreeStream(adaptor,"rule superSuffix");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // jkit/java/parser/Java.g:920:2: ( 'super' superSuffix -> 'super' ( superSuffix )? | Identifier arguments -> Identifier ( arguments )? )
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==160) ) {
                alt165=1;
            }
            else if ( (LA165_0==Identifier) ) {
                alt165=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 165, 0, input);

                throw nvae;
            }
            switch (alt165) {
                case 1 :
                    // jkit/java/parser/Java.g:920:4: 'super' superSuffix
                    {
                    string_literal538=(Token)match(input,160,FOLLOW_160_in_explicitGenericInvocationSuffix7142); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal538);

                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix7144);
                    superSuffix539=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_superSuffix.add(superSuffix539.getTree());


                    // AST REWRITE
                    // elements: 160, superSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 920:24: -> 'super' ( superSuffix )?
                    {
                        adaptor.addChild(root_0, stream_160.nextNode());
                        // jkit/java/parser/Java.g:920:35: ( superSuffix )?
                        if ( stream_superSuffix.hasNext() ) {
                            adaptor.addChild(root_0, stream_superSuffix.nextTree());

                        }
                        stream_superSuffix.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:921:6: Identifier arguments
                    {
                    Identifier540=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix7158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier540);

                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix7160);
                    arguments541=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments541.getTree());


                    // AST REWRITE
                    // elements: Identifier, arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 921:27: -> Identifier ( arguments )?
                    {
                        adaptor.addChild(root_0, stream_Identifier.nextNode());
                        // jkit/java/parser/Java.g:921:41: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class superSuffix_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // jkit/java/parser/Java.g:924:1: superSuffix : ( arguments -> ( arguments )? | '.' Identifier ( arguments )? );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal543=null;
        Token Identifier544=null;
        JavaParser.arguments_return arguments542 = null;

        JavaParser.arguments_return arguments545 = null;


        Object char_literal543_tree=null;
        Object Identifier544_tree=null;
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // jkit/java/parser/Java.g:925:2: ( arguments -> ( arguments )? | '.' Identifier ( arguments )? )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==161) ) {
                alt167=1;
            }
            else if ( (LA167_0==124) ) {
                alt167=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // jkit/java/parser/Java.g:925:4: arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix7179);
                    arguments542=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments542.getTree());


                    // AST REWRITE
                    // elements: arguments
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 925:14: -> ( arguments )?
                    {
                        // jkit/java/parser/Java.g:925:17: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_0, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:926:6: '.' Identifier ( arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal543=(Token)match(input,124,FOLLOW_124_in_superSuffix7191); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal543_tree = (Object)adaptor.create(char_literal543);
                    adaptor.addChild(root_0, char_literal543_tree);
                    }
                    Identifier544=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix7193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    Identifier544_tree = (Object)adaptor.create(Identifier544);
                    adaptor.addChild(root_0, Identifier544_tree);
                    }
                    // jkit/java/parser/Java.g:926:21: ( arguments )?
                    int alt166=2;
                    alt166 = dfa166.predict(input);
                    switch (alt166) {
                        case 1 :
                            // jkit/java/parser/Java.g:926:22: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix7196);
                            arguments545=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arguments545.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // jkit/java/parser/Java.g:929:1: selector : ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal546=null;
        Token string_literal547=null;
        Token char_literal549=null;
        Token string_literal550=null;
        Token char_literal553=null;
        Token char_literal556=null;
        Token Identifier557=null;
        Token char_literal559=null;
        Token char_literal561=null;
        JavaParser.arguments_return arguments548 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments551 = null;

        JavaParser.innerCreator_return innerCreator552 = null;

        JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments554 = null;

        JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix555 = null;

        JavaParser.arguments_return arguments558 = null;

        JavaParser.expression_return expression560 = null;


        Object char_literal546_tree=null;
        Object string_literal547_tree=null;
        Object char_literal549_tree=null;
        Object string_literal550_tree=null;
        Object char_literal553_tree=null;
        Object char_literal556_tree=null;
        Object Identifier557_tree=null;
        Object char_literal559_tree=null;
        Object char_literal561_tree=null;
        RewriteRuleTokenStream stream_138=new RewriteRuleTokenStream(adaptor,"token 138");
        RewriteRuleTokenStream stream_160=new RewriteRuleTokenStream(adaptor,"token 160");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_139=new RewriteRuleTokenStream(adaptor,"token 139");
        RewriteRuleTokenStream stream_203=new RewriteRuleTokenStream(adaptor,"token 203");
        RewriteRuleTokenStream stream_124=new RewriteRuleTokenStream(adaptor,"token 124");
        RewriteRuleSubtreeStream stream_arguments=new RewriteRuleSubtreeStream(adaptor,"rule arguments");
        RewriteRuleSubtreeStream stream_innerCreator=new RewriteRuleSubtreeStream(adaptor,"rule innerCreator");
        RewriteRuleSubtreeStream stream_explicitGenericInvocationSuffix=new RewriteRuleSubtreeStream(adaptor,"rule explicitGenericInvocationSuffix");
        RewriteRuleSubtreeStream stream_nonWildcardTypeArguments=new RewriteRuleSubtreeStream(adaptor,"rule nonWildcardTypeArguments");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // jkit/java/parser/Java.g:930:2: ( '.' 'super' arguments -> ^( INVOKE 'super' ( arguments )? ) | '.' 'new' ( nonWildcardTypeArguments )? innerCreator -> ^( NEW innerCreator ) | '.' nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) ) | '[' expression ']' -> ^( ARRAYINDEX expression ) )
            int alt170=5;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==124) ) {
                switch ( input.LA(2) ) {
                case 160:
                    {
                    alt170=1;
                    }
                    break;
                case 203:
                    {
                    alt170=2;
                    }
                    break;
                case Identifier:
                    {
                    alt170=4;
                    }
                    break;
                case 129:
                    {
                    alt170=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 170, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA170_0==138) ) {
                alt170=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // jkit/java/parser/Java.g:930:4: '.' 'super' arguments
                    {
                    char_literal546=(Token)match(input,124,FOLLOW_124_in_selector7210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal546);

                    string_literal547=(Token)match(input,160,FOLLOW_160_in_selector7212); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_160.add(string_literal547);

                    pushFollow(FOLLOW_arguments_in_selector7214);
                    arguments548=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_arguments.add(arguments548.getTree());


                    // AST REWRITE
                    // elements: arguments, 160
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 930:26: -> ^( INVOKE 'super' ( arguments )? )
                    {
                        // jkit/java/parser/Java.g:930:29: ^( INVOKE 'super' ( arguments )? )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        adaptor.addChild(root_1, stream_160.nextNode());
                        // jkit/java/parser/Java.g:930:46: ( arguments )?
                        if ( stream_arguments.hasNext() ) {
                            adaptor.addChild(root_1, stream_arguments.nextTree());

                        }
                        stream_arguments.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // jkit/java/parser/Java.g:931:6: '.' 'new' ( nonWildcardTypeArguments )? innerCreator
                    {
                    char_literal549=(Token)match(input,124,FOLLOW_124_in_selector7232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal549);

                    string_literal550=(Token)match(input,203,FOLLOW_203_in_selector7234); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_203.add(string_literal550);

                    // jkit/java/parser/Java.g:931:16: ( nonWildcardTypeArguments )?
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==129) ) {
                        alt168=1;
                    }
                    switch (alt168) {
                        case 1 :
                            // jkit/java/parser/Java.g:931:17: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7237);
                            nonWildcardTypeArguments551=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments551.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector7241);
                    innerCreator552=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_innerCreator.add(innerCreator552.getTree());


                    // AST REWRITE
                    // elements: innerCreator
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 931:57: -> ^( NEW innerCreator )
                    {
                        // jkit/java/parser/Java.g:931:60: ^( NEW innerCreator )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(NEW, "NEW"), root_1);

                        adaptor.addChild(root_1, stream_innerCreator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // jkit/java/parser/Java.g:932:5: '.' nonWildcardTypeArguments explicitGenericInvocationSuffix
                    {
                    char_literal553=(Token)match(input,124,FOLLOW_124_in_selector7256); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal553);

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector7258);
                    nonWildcardTypeArguments554=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_nonWildcardTypeArguments.add(nonWildcardTypeArguments554.getTree());
                    pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_selector7260);
                    explicitGenericInvocationSuffix555=explicitGenericInvocationSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_explicitGenericInvocationSuffix.add(explicitGenericInvocationSuffix555.getTree());


                    // AST REWRITE
                    // elements: nonWildcardTypeArguments, explicitGenericInvocationSuffix
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 932:66: -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                    {
                        // jkit/java/parser/Java.g:932:69: ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                        // jkit/java/parser/Java.g:932:78: ^( TYPE_PARAMETER nonWildcardTypeArguments )
                        {
                        Object root_2 = (Object)adaptor.nil();
                        root_2 = (Object)adaptor.becomeRoot((Object)adaptor.create(TYPE_PARAMETER, "TYPE_PARAMETER"), root_2);

                        adaptor.addChild(root_2, stream_nonWildcardTypeArguments.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_explicitGenericInvocationSuffix.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // jkit/java/parser/Java.g:933:4: '.' Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    {
                    char_literal556=(Token)match(input,124,FOLLOW_124_in_selector7279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_124.add(char_literal556);

                    Identifier557=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector7281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_Identifier.add(Identifier557);

                    // jkit/java/parser/Java.g:934:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )
                    int alt169=2;
                    alt169 = dfa169.predict(input);
                    switch (alt169) {
                        case 1 :
                            // jkit/java/parser/Java.g:935:4: arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector7291);
                            arguments558=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_arguments.add(arguments558.getTree());


                            // AST REWRITE
                            // elements: Identifier, arguments
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 935:14: -> ^( INVOKE Identifier ( arguments )? )
                            {
                                // jkit/java/parser/Java.g:935:17: ^( INVOKE Identifier ( arguments )? )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(INVOKE, "INVOKE"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());
                                // jkit/java/parser/Java.g:935:37: ( arguments )?
                                if ( stream_arguments.hasNext() ) {
                                    adaptor.addChild(root_1, stream_arguments.nextTree());

                                }
                                stream_arguments.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // jkit/java/parser/Java.g:936:6: 
                            {

                            // AST REWRITE
                            // elements: Identifier
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (Object)adaptor.nil();
                            // 936:6: -> ^( DEREF Identifier )
                            {
                                // jkit/java/parser/Java.g:936:9: ^( DEREF Identifier )
                                {
                                Object root_1 = (Object)adaptor.nil();
                                root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(DEREF, "DEREF"), root_1);

                                adaptor.addChild(root_1, stream_Identifier.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // jkit/java/parser/Java.g:938:6: '[' expression ']'
                    {
                    char_literal559=(Token)match(input,138,FOLLOW_138_in_selector7326); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_138.add(char_literal559);

                    pushFollow(FOLLOW_expression_in_selector7328);
                    expression560=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression560.getTree());
                    char_literal561=(Token)match(input,139,FOLLOW_139_in_selector7330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_139.add(char_literal561);



                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (Object)adaptor.nil();
                    // 938:25: -> ^( ARRAYINDEX expression )
                    {
                        // jkit/java/parser/Java.g:938:28: ^( ARRAYINDEX expression )
                        {
                        Object root_1 = (Object)adaptor.nil();
                        root_1 = (Object)adaptor.becomeRoot((Object)adaptor.create(ARRAYINDEX, "ARRAYINDEX"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class arguments_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // jkit/java/parser/Java.g:941:1: arguments : '(' ( expressionList )? ')' ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal562=null;
        Token char_literal564=null;
        JavaParser.expressionList_return expressionList563 = null;


        Object char_literal562_tree=null;
        Object char_literal564_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // jkit/java/parser/Java.g:942:2: ( '(' ( expressionList )? ')' )
            // jkit/java/parser/Java.g:942:4: '(' ( expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal562=(Token)match(input,161,FOLLOW_161_in_arguments7349); if (state.failed) return retval;
            // jkit/java/parser/Java.g:942:9: ( expressionList )?
            int alt171=2;
            alt171 = dfa171.predict(input);
            switch (alt171) {
                case 1 :
                    // jkit/java/parser/Java.g:0:0: expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments7352);
                    expressionList563=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionList563.getTree());

                    }
                    break;

            }

            char_literal564=(Token)match(input,162,FOLLOW_162_in_arguments7355); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
         
         catch(RecognitionException e) {  
          throw new SyntaxError("error on \"" + e.token.getText()+"\"",e.line,e.charPositionInLine,e.token.getText().length());
         } 
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred1_Java
    public final void synpred1_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:223:4: ( annotations )
        // jkit/java/parser/Java.g:223:4: annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_Java475);
        annotations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Java

    // $ANTLR start synpred36_Java
    public final void synpred36_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:309:4: ( 'static' block )
        // jkit/java/parser/Java.g:309:4: 'static' block
        {
        match(input,123,FOLLOW_123_in_synpred36_Java1218); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred36_Java1220);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred36_Java

    // $ANTLR start synpred38_Java
    public final void synpred38_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:310:4: ( ( 'static' )? block )
        // jkit/java/parser/Java.g:310:4: ( 'static' )? block
        {
        // jkit/java/parser/Java.g:310:4: ( 'static' )?
        int alt174=2;
        int LA174_0 = input.LA(1);

        if ( (LA174_0==123) ) {
            alt174=1;
        }
        switch (alt174) {
            case 1 :
                // jkit/java/parser/Java.g:0:0: 'static'
                {
                match(input,123,FOLLOW_123_in_synpred38_Java1233); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_block_in_synpred38_Java1236);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred38_Java

    // $ANTLR start synpred41_Java
    public final void synpred41_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:313:9: ( methodDeclaration )
        // jkit/java/parser/Java.g:313:9: methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred41_Java1280);
        methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred41_Java

    // $ANTLR start synpred42_Java
    public final void synpred42_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:314:9: ( fieldDeclaration )
        // jkit/java/parser/Java.g:314:9: fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred42_Java1309);
        fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred42_Java

    // $ANTLR start synpred51_Java
    public final void synpred51_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:344:3: ( constantDeclaration )
        // jkit/java/parser/Java.g:344:3: constantDeclaration
        {
        pushFollow(FOLLOW_constantDeclaration_in_synpred51_Java1666);
        constantDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred51_Java

    // $ANTLR start synpred52_Java
    public final void synpred52_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:345:5: ( type Identifier interfaceMethodDeclaratorRest )
        // jkit/java/parser/Java.g:345:5: type Identifier interfaceMethodDeclaratorRest
        {
        pushFollow(FOLLOW_type_in_synpred52_Java1687);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred52_Java1689); if (state.failed) return ;
        pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_synpred52_Java1691);
        interfaceMethodDeclaratorRest();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_Java

    // $ANTLR start synpred90_Java
    public final void synpred90_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:450:16: ( '.' Identifier )
        // jkit/java/parser/Java.g:450:16: '.' Identifier
        {
        match(input,124,FOLLOW_124_in_synpred90_Java2680); if (state.failed) return ;
        match(input,Identifier,FOLLOW_Identifier_in_synpred90_Java2682); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred90_Java

    // $ANTLR start synpred108_Java
    public final void synpred108_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:494:4: ( ( 'extends' type )? )
        // jkit/java/parser/Java.g:494:4: ( 'extends' type )?
        {
        // jkit/java/parser/Java.g:494:4: ( 'extends' type )?
        int alt183=2;
        int LA183_0 = input.LA(1);

        if ( (LA183_0==127) ) {
            alt183=1;
        }
        switch (alt183) {
            case 1 :
                // jkit/java/parser/Java.g:494:5: 'extends' type
                {
                match(input,127,FOLLOW_127_in_synpred108_Java2984); if (state.failed) return ;
                pushFollow(FOLLOW_type_in_synpred108_Java2986);
                type();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred108_Java

    // $ANTLR start synpred124_Java
    public final void synpred124_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:546:4: ( annotation )
        // jkit/java/parser/Java.g:546:4: annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred124_Java3430);
        annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred124_Java

    // $ANTLR start synpred134_Java
    public final void synpred134_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:581:10: ( annotationTypeElementDeclarations )
        // jkit/java/parser/Java.g:581:10: annotationTypeElementDeclarations
        {
        pushFollow(FOLLOW_annotationTypeElementDeclarations_in_synpred134_Java3650);
        annotationTypeElementDeclarations();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred134_Java

    // $ANTLR start synpred148_Java
    public final void synpred148_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:622:4: ( localVariableDeclaration )
        // jkit/java/parser/Java.g:622:4: localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred148_Java3959);
        localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred148_Java

    // $ANTLR start synpred149_Java
    public final void synpred149_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:623:4: ( classOrInterfaceDeclaration )
        // jkit/java/parser/Java.g:623:4: classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred149_Java3964);
        classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred149_Java

    // $ANTLR start synpred154_Java
    public final void synpred154_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:634:55: ( 'else' statement )
        // jkit/java/parser/Java.g:634:55: 'else' statement
        {
        match(input,172,FOLLOW_172_in_synpred154_Java4077); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred154_Java4079);
        statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred154_Java

    // $ANTLR start synpred159_Java
    public final void synpred159_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:639:9: ( catches 'finally' block )
        // jkit/java/parser/Java.g:639:9: catches 'finally' block
        {
        pushFollow(FOLLOW_catches_in_synpred159_Java4208);
        catches();

        state._fsp--;
        if (state.failed) return ;
        match(input,177,FOLLOW_177_in_synpred159_Java4212); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred159_Java4214);
        block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred159_Java

    // $ANTLR start synpred160_Java
    public final void synpred160_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:640:9: ( catches )
        // jkit/java/parser/Java.g:640:9: catches
        {
        pushFollow(FOLLOW_catches_in_synpred160_Java4242);
        catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred160_Java

    // $ANTLR start synpred177_Java
    public final void synpred177_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:675:4: ( 'case' constantExpression ':' )
        // jkit/java/parser/Java.g:675:4: 'case' constantExpression ':'
        {
        match(input,184,FOLLOW_184_in_synpred177_Java4624); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred177_Java4626);
        constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,170,FOLLOW_170_in_synpred177_Java4628); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_Java

    // $ANTLR start synpred178_Java
    public final void synpred178_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:676:4: ( 'case' enumConstantName ':' )
        // jkit/java/parser/Java.g:676:4: 'case' enumConstantName ':'
        {
        match(input,184,FOLLOW_184_in_synpred178_Java4644); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred178_Java4646);
        enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,170,FOLLOW_170_in_synpred178_Java4648); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_Java

    // $ANTLR start synpred180_Java
    public final void synpred180_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:686:4: ( forVarControl )
        // jkit/java/parser/Java.g:686:4: forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred180_Java4708);
        forVarControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred180_Java

    // $ANTLR start synpred185_Java
    public final void synpred185_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:691:4: ( ( variableModifier )* type variableDeclarators )
        // jkit/java/parser/Java.g:691:4: ( variableModifier )* type variableDeclarators
        {
        // jkit/java/parser/Java.g:691:4: ( variableModifier )*
        loop197:
        do {
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==145||LA197_0==167) ) {
                alt197=1;
            }


            switch (alt197) {
        	case 1 :
        	    // jkit/java/parser/Java.g:0:0: variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred185_Java4770);
        	    variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop197;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred185_Java4773);
        type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclarators_in_synpred185_Java4775);
        variableDeclarators();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_Java

    // $ANTLR start synpred188_Java
    public final void synpred188_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:724:4: ( '=' expression )
        // jkit/java/parser/Java.g:724:4: '=' expression
        {
        match(input,140,FOLLOW_140_in_synpred188_Java4940); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred188_Java4942);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred188_Java

    // $ANTLR start synpred189_Java
    public final void synpred189_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:725:6: ( '+' '=' expression )
        // jkit/java/parser/Java.g:725:6: '+' '=' expression
        {
        match(input,185,FOLLOW_185_in_synpred189_Java4961); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred189_Java4963); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred189_Java4965);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred189_Java

    // $ANTLR start synpred190_Java
    public final void synpred190_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:726:6: ( '-' '=' expression )
        // jkit/java/parser/Java.g:726:6: '-' '=' expression
        {
        match(input,186,FOLLOW_186_in_synpred190_Java4987); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred190_Java4989); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred190_Java4991);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred190_Java

    // $ANTLR start synpred191_Java
    public final void synpred191_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:727:6: ( '*' '=' expression )
        // jkit/java/parser/Java.g:727:6: '*' '=' expression
        {
        match(input,125,FOLLOW_125_in_synpred191_Java5013); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred191_Java5015); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred191_Java5017);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred191_Java

    // $ANTLR start synpred192_Java
    public final void synpred192_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:728:6: ( '/' '=' expression )
        // jkit/java/parser/Java.g:728:6: '/' '=' expression
        {
        match(input,187,FOLLOW_187_in_synpred192_Java5039); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred192_Java5041); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred192_Java5043);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred192_Java

    // $ANTLR start synpred193_Java
    public final void synpred193_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:729:6: ( '&=' expression )
        // jkit/java/parser/Java.g:729:6: '&=' expression
        {
        match(input,188,FOLLOW_188_in_synpred193_Java5068); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred193_Java5070);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred193_Java

    // $ANTLR start synpred194_Java
    public final void synpred194_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:730:6: ( '|=' expression )
        // jkit/java/parser/Java.g:730:6: '|=' expression
        {
        match(input,189,FOLLOW_189_in_synpred194_Java5092); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred194_Java5094);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred194_Java

    // $ANTLR start synpred195_Java
    public final void synpred195_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:731:6: ( '^=' expression )
        // jkit/java/parser/Java.g:731:6: '^=' expression
        {
        match(input,190,FOLLOW_190_in_synpred195_Java5116); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred195_Java5118);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_Java

    // $ANTLR start synpred196_Java
    public final void synpred196_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:732:6: ( '%' '=' expression )
        // jkit/java/parser/Java.g:732:6: '%' '=' expression
        {
        match(input,191,FOLLOW_191_in_synpred196_Java5143); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred196_Java5145); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred196_Java5147);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_Java

    // $ANTLR start synpred197_Java
    public final void synpred197_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:733:6: ( '<' '<' '=' expression )
        // jkit/java/parser/Java.g:733:6: '<' '<' '=' expression
        {
        match(input,129,FOLLOW_129_in_synpred197_Java5169); if (state.failed) return ;
        match(input,129,FOLLOW_129_in_synpred197_Java5171); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred197_Java5173); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred197_Java5175);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_Java

    // $ANTLR start synpred198_Java
    public final void synpred198_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:734:6: ( '>' '>' '=' expression )
        // jkit/java/parser/Java.g:734:6: '>' '>' '=' expression
        {
        match(input,131,FOLLOW_131_in_synpred198_Java5197); if (state.failed) return ;
        match(input,131,FOLLOW_131_in_synpred198_Java5199); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred198_Java5201); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred198_Java5203);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred198_Java

    // $ANTLR start synpred199_Java
    public final void synpred199_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:735:6: ( '>' '>' '>' '=' expression )
        // jkit/java/parser/Java.g:735:6: '>' '>' '>' '=' expression
        {
        match(input,131,FOLLOW_131_in_synpred199_Java5225); if (state.failed) return ;
        match(input,131,FOLLOW_131_in_synpred199_Java5227); if (state.failed) return ;
        match(input,131,FOLLOW_131_in_synpred199_Java5229); if (state.failed) return ;
        match(input,140,FOLLOW_140_in_synpred199_Java5231); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred199_Java5233);
        expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred199_Java

    // $ANTLR start synpred210_Java
    public final void synpred210_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:809:8: ( ( '<' shiftExpression ) )
        // jkit/java/parser/Java.g:809:8: ( '<' shiftExpression )
        {
        // jkit/java/parser/Java.g:809:8: ( '<' shiftExpression )
        // jkit/java/parser/Java.g:809:9: '<' shiftExpression
        {
        match(input,129,FOLLOW_129_in_synpred210_Java5867); if (state.failed) return ;
        pushFollow(FOLLOW_shiftExpression_in_synpred210_Java5869);
        shiftExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    // $ANTLR end synpred210_Java

    // $ANTLR start synpred214_Java
    public final void synpred214_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:819:7: ( ( '<' '<' | '>' '>' ) additiveExpression )
        // jkit/java/parser/Java.g:819:7: ( '<' '<' | '>' '>' ) additiveExpression
        {
        // jkit/java/parser/Java.g:819:7: ( '<' '<' | '>' '>' )
        int alt198=2;
        int LA198_0 = input.LA(1);

        if ( (LA198_0==129) ) {
            alt198=1;
        }
        else if ( (LA198_0==131) ) {
            alt198=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 198, 0, input);

            throw nvae;
        }
        switch (alt198) {
            case 1 :
                // jkit/java/parser/Java.g:819:8: '<' '<'
                {
                match(input,129,FOLLOW_129_in_synpred214_Java5981); if (state.failed) return ;
                match(input,129,FOLLOW_129_in_synpred214_Java5983); if (state.failed) return ;

                }
                break;
            case 2 :
                // jkit/java/parser/Java.g:819:19: '>' '>'
                {
                match(input,131,FOLLOW_131_in_synpred214_Java5987); if (state.failed) return ;
                match(input,131,FOLLOW_131_in_synpred214_Java5989); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_additiveExpression_in_synpred214_Java5992);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_Java

    // $ANTLR start synpred215_Java
    public final void synpred215_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:819:6: ( ( ( '<' '<' | '>' '>' ) additiveExpression )+ )
        // jkit/java/parser/Java.g:819:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        {
        // jkit/java/parser/Java.g:819:6: ( ( '<' '<' | '>' '>' ) additiveExpression )+
        int cnt200=0;
        loop200:
        do {
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==129||LA200_0==131) ) {
                alt200=1;
            }


            switch (alt200) {
        	case 1 :
        	    // jkit/java/parser/Java.g:819:7: ( '<' '<' | '>' '>' ) additiveExpression
        	    {
        	    // jkit/java/parser/Java.g:819:7: ( '<' '<' | '>' '>' )
        	    int alt199=2;
        	    int LA199_0 = input.LA(1);

        	    if ( (LA199_0==129) ) {
        	        alt199=1;
        	    }
        	    else if ( (LA199_0==131) ) {
        	        alt199=2;
        	    }
        	    else {
        	        if (state.backtracking>0) {state.failed=true; return ;}
        	        NoViableAltException nvae =
        	            new NoViableAltException("", 199, 0, input);

        	        throw nvae;
        	    }
        	    switch (alt199) {
        	        case 1 :
        	            // jkit/java/parser/Java.g:819:8: '<' '<'
        	            {
        	            match(input,129,FOLLOW_129_in_synpred215_Java5981); if (state.failed) return ;
        	            match(input,129,FOLLOW_129_in_synpred215_Java5983); if (state.failed) return ;

        	            }
        	            break;
        	        case 2 :
        	            // jkit/java/parser/Java.g:819:19: '>' '>'
        	            {
        	            match(input,131,FOLLOW_131_in_synpred215_Java5987); if (state.failed) return ;
        	            match(input,131,FOLLOW_131_in_synpred215_Java5989); if (state.failed) return ;

        	            }
        	            break;

        	    }

        	    pushFollow(FOLLOW_additiveExpression_in_synpred215_Java5992);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt200 >= 1 ) break loop200;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(200, input);
                    throw eee;
            }
            cnt200++;
        } while (true);


        }
    }
    // $ANTLR end synpred215_Java

    // $ANTLR start synpred216_Java
    public final void synpred216_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:821:9: ( '>' '>' '>' additiveExpression )
        // jkit/java/parser/Java.g:821:9: '>' '>' '>' additiveExpression
        {
        match(input,131,FOLLOW_131_in_synpred216_Java6026); if (state.failed) return ;
        match(input,131,FOLLOW_131_in_synpred216_Java6028); if (state.failed) return ;
        match(input,131,FOLLOW_131_in_synpred216_Java6030); if (state.failed) return ;
        pushFollow(FOLLOW_additiveExpression_in_synpred216_Java6032);
        additiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred216_Java

    // $ANTLR start synpred217_Java
    public final void synpred217_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:821:8: ( ( '>' '>' '>' additiveExpression )+ )
        // jkit/java/parser/Java.g:821:8: ( '>' '>' '>' additiveExpression )+
        {
        // jkit/java/parser/Java.g:821:8: ( '>' '>' '>' additiveExpression )+
        int cnt201=0;
        loop201:
        do {
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==131) ) {
                alt201=1;
            }


            switch (alt201) {
        	case 1 :
        	    // jkit/java/parser/Java.g:821:9: '>' '>' '>' additiveExpression
        	    {
        	    match(input,131,FOLLOW_131_in_synpred217_Java6026); if (state.failed) return ;
        	    match(input,131,FOLLOW_131_in_synpred217_Java6028); if (state.failed) return ;
        	    match(input,131,FOLLOW_131_in_synpred217_Java6030); if (state.failed) return ;
        	    pushFollow(FOLLOW_additiveExpression_in_synpred217_Java6032);
        	    additiveExpression();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt201 >= 1 ) break loop201;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(201, input);
                    throw eee;
            }
            cnt201++;
        } while (true);


        }
    }
    // $ANTLR end synpred217_Java

    // $ANTLR start synpred231_Java
    public final void synpred231_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:853:9: ( castExpression )
        // jkit/java/parser/Java.g:853:9: castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred231_Java6379);
        castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred231_Java

    // $ANTLR start synpred238_Java
    public final void synpred238_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:869:8: ( '(' primitiveType ')' unaryExpression )
        // jkit/java/parser/Java.g:869:8: '(' primitiveType ')' unaryExpression
        {
        match(input,161,FOLLOW_161_in_synpred238_Java6529); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred238_Java6531);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,162,FOLLOW_162_in_synpred238_Java6533); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred238_Java6535);
        unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred238_Java

    // $ANTLR start synpred239_Java
    public final void synpred239_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:870:8: ( '(' type ')' unaryExpressionNotPlusMinus )
        // jkit/java/parser/Java.g:870:8: '(' type ')' unaryExpressionNotPlusMinus
        {
        match(input,161,FOLLOW_161_in_synpred239_Java6558); if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred239_Java6560);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,162,FOLLOW_162_in_synpred239_Java6562); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_synpred239_Java6564);
        unaryExpressionNotPlusMinus();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred239_Java

    // $ANTLR start synpred244_Java
    public final void synpred244_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:880:8: ( '[' expression ']' )
        // jkit/java/parser/Java.g:880:8: '[' expression ']'
        {
        match(input,138,FOLLOW_138_in_synpred244_Java6673); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred244_Java6675);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,139,FOLLOW_139_in_synpred244_Java6677); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred244_Java

    // $ANTLR start synpred248_Java
    public final void synpred248_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:878:9: ( 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer ) )
        // jkit/java/parser/Java.g:878:9: 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        {
        match(input,203,FOLLOW_203_in_synpred248_Java6652); if (state.failed) return ;
        // jkit/java/parser/Java.g:878:15: ( nonWildcardTypeArguments )?
        int alt208=2;
        int LA208_0 = input.LA(1);

        if ( (LA208_0==129) ) {
            alt208=1;
        }
        switch (alt208) {
            case 1 :
                // jkit/java/parser/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred248_Java6654);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_primitiveType_in_synpred248_Java6657);
        primitiveType();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/parser/Java.g:879:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )
        int alt212=2;
        alt212 = dfa212.predict(input);
        switch (alt212) {
            case 1 :
                // jkit/java/parser/Java.g:880:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/parser/Java.g:880:7: ( '[' expression ']' )+
                int cnt209=0;
                loop209:
                do {
                    int alt209=2;
                    alt209 = dfa209.predict(input);
                    switch (alt209) {
                	case 1 :
                	    // jkit/java/parser/Java.g:880:8: '[' expression ']'
                	    {
                	    match(input,138,FOLLOW_138_in_synpred248_Java6673); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred248_Java6675);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,139,FOLLOW_139_in_synpred248_Java6677); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt209 >= 1 ) break loop209;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(209, input);
                            throw eee;
                    }
                    cnt209++;
                } while (true);

                // jkit/java/parser/Java.g:880:29: ( '[' ']' )*
                loop210:
                do {
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==138) ) {
                        alt210=1;
                    }


                    switch (alt210) {
                	case 1 :
                	    // jkit/java/parser/Java.g:880:30: '[' ']'
                	    {
                	    match(input,138,FOLLOW_138_in_synpred248_Java6682); if (state.failed) return ;
                	    match(input,139,FOLLOW_139_in_synpred248_Java6684); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop210;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/parser/Java.g:881:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/parser/Java.g:881:9: ( '[' ']' )+
                int cnt211=0;
                loop211:
                do {
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==138) ) {
                        alt211=1;
                    }


                    switch (alt211) {
                	case 1 :
                	    // jkit/java/parser/Java.g:881:10: '[' ']'
                	    {
                	    match(input,138,FOLLOW_138_in_synpred248_Java6715); if (state.failed) return ;
                	    match(input,139,FOLLOW_139_in_synpred248_Java6717); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt211 >= 1 ) break loop211;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(211, input);
                            throw eee;
                    }
                    cnt211++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred248_Java6721);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred248_Java

    // $ANTLR start synpred251_Java
    public final void synpred251_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:885:8: ( '[' expression ']' )
        // jkit/java/parser/Java.g:885:8: '[' expression ']'
        {
        match(input,138,FOLLOW_138_in_synpred251_Java6787); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred251_Java6789);
        expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,139,FOLLOW_139_in_synpred251_Java6791); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_Java

    // $ANTLR start synpred256_Java
    public final void synpred256_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:883:9: ( 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest ) )
        // jkit/java/parser/Java.g:883:9: 'new' ( nonWildcardTypeArguments )? ( refComponent ( '.' refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        {
        match(input,203,FOLLOW_203_in_synpred256_Java6753); if (state.failed) return ;
        // jkit/java/parser/Java.g:883:15: ( nonWildcardTypeArguments )?
        int alt216=2;
        int LA216_0 = input.LA(1);

        if ( (LA216_0==129) ) {
            alt216=1;
        }
        switch (alt216) {
            case 1 :
                // jkit/java/parser/Java.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred256_Java6755);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        // jkit/java/parser/Java.g:883:41: ( refComponent ( '.' refComponent )* )
        // jkit/java/parser/Java.g:883:42: refComponent ( '.' refComponent )*
        {
        pushFollow(FOLLOW_refComponent_in_synpred256_Java6761);
        refComponent();

        state._fsp--;
        if (state.failed) return ;
        // jkit/java/parser/Java.g:883:58: ( '.' refComponent )*
        loop217:
        do {
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==124) ) {
                alt217=1;
            }


            switch (alt217) {
        	case 1 :
        	    // jkit/java/parser/Java.g:883:59: '.' refComponent
        	    {
        	    match(input,124,FOLLOW_124_in_synpred256_Java6764); if (state.failed) return ;
        	    pushFollow(FOLLOW_refComponent_in_synpred256_Java6768);
        	    refComponent();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop217;
            }
        } while (true);


        }

        // jkit/java/parser/Java.g:884:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )
        int alt221=3;
        alt221 = dfa221.predict(input);
        switch (alt221) {
            case 1 :
                // jkit/java/parser/Java.g:885:7: ( '[' expression ']' )+ ( '[' ']' )*
                {
                // jkit/java/parser/Java.g:885:7: ( '[' expression ']' )+
                int cnt218=0;
                loop218:
                do {
                    int alt218=2;
                    alt218 = dfa218.predict(input);
                    switch (alt218) {
                	case 1 :
                	    // jkit/java/parser/Java.g:885:8: '[' expression ']'
                	    {
                	    match(input,138,FOLLOW_138_in_synpred256_Java6787); if (state.failed) return ;
                	    pushFollow(FOLLOW_expression_in_synpred256_Java6789);
                	    expression();

                	    state._fsp--;
                	    if (state.failed) return ;
                	    match(input,139,FOLLOW_139_in_synpred256_Java6791); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt218 >= 1 ) break loop218;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(218, input);
                            throw eee;
                    }
                    cnt218++;
                } while (true);

                // jkit/java/parser/Java.g:885:29: ( '[' ']' )*
                loop219:
                do {
                    int alt219=2;
                    int LA219_0 = input.LA(1);

                    if ( (LA219_0==138) ) {
                        alt219=1;
                    }


                    switch (alt219) {
                	case 1 :
                	    // jkit/java/parser/Java.g:885:30: '[' ']'
                	    {
                	    match(input,138,FOLLOW_138_in_synpred256_Java6796); if (state.failed) return ;
                	    match(input,139,FOLLOW_139_in_synpred256_Java6798); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop219;
                    }
                } while (true);


                }
                break;
            case 2 :
                // jkit/java/parser/Java.g:886:9: ( '[' ']' )+ arrayInitializer
                {
                // jkit/java/parser/Java.g:886:9: ( '[' ']' )+
                int cnt220=0;
                loop220:
                do {
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==138) ) {
                        alt220=1;
                    }


                    switch (alt220) {
                	case 1 :
                	    // jkit/java/parser/Java.g:886:10: '[' ']'
                	    {
                	    match(input,138,FOLLOW_138_in_synpred256_Java6831); if (state.failed) return ;
                	    match(input,139,FOLLOW_139_in_synpred256_Java6833); if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    if ( cnt220 >= 1 ) break loop220;
                	    if (state.backtracking>0) {state.failed=true; return ;}
                            EarlyExitException eee =
                                new EarlyExitException(220, input);
                            throw eee;
                    }
                    cnt220++;
                } while (true);

                pushFollow(FOLLOW_arrayInitializer_in_synpred256_Java6837);
                arrayInitializer();

                state._fsp--;
                if (state.failed) return ;

                }
                break;
            case 3 :
                // jkit/java/parser/Java.g:887:9: classCreatorRest
                {
                pushFollow(FOLLOW_classCreatorRest_in_synpred256_Java6866);
                classCreatorRest();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred256_Java

    // $ANTLR start synpred257_Java
    public final void synpred257_Java_fragment() throws RecognitionException {   
        // jkit/java/parser/Java.g:889:9: ( type '.' 'class' )
        // jkit/java/parser/Java.g:889:9: type '.' 'class'
        {
        pushFollow(FOLLOW_type_in_synpred257_Java6898);
        type();

        state._fsp--;
        if (state.failed) return ;
        match(input,124,FOLLOW_124_in_synpred257_Java6900); if (state.failed) return ;
        match(input,126,FOLLOW_126_in_synpred257_Java6902); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_Java

    // Delegated rules

    public final boolean synpred244_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred244_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred134_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred134_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred51_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred51_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred159_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred159_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred188_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred188_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred41_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred41_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred160_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred160_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred148_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred148_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred90_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred90_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred190_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred190_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred149_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred149_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA10 dfa10 = new DFA10(this);
    protected DFA11 dfa11 = new DFA11(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA56 dfa56 = new DFA56(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA57 dfa57 = new DFA57(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA65 dfa65 = new DFA65(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA83 dfa83 = new DFA83(this);
    protected DFA82 dfa82 = new DFA82(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA96 dfa96 = new DFA96(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA106 dfa106 = new DFA106(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA113 dfa113 = new DFA113(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA116 dfa116 = new DFA116(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA147 dfa147 = new DFA147(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA146 dfa146 = new DFA146(this);
    protected DFA149 dfa149 = new DFA149(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA169 dfa169 = new DFA169(this);
    protected DFA171 dfa171 = new DFA171(this);
    protected DFA212 dfa212 = new DFA212(this);
    protected DFA209 dfa209 = new DFA209(this);
    protected DFA221 dfa221 = new DFA221(this);
    protected DFA218 dfa218 = new DFA218(this);
    static final String DFA1_eotS =
        "\27\uffff";
    static final String DFA1_eofS =
        "\1\2\26\uffff";
    static final String DFA1_minS =
        "\1\12\1\145\23\uffff\1\0\1\uffff";
    static final String DFA1_maxS =
        "\1\u00a7\1\u0087\23\uffff\1\0\1\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\23\uffff\1\1";
    static final String DFA1_specialS =
        "\25\uffff\1\0\1\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\155\uffff\4\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2\20"+
            "\uffff\1\1",
            "\1\25\41\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "223:4: ( annotations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_21 = input.LA(1);

                         
                        int index1_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Java()) ) {s = 22;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index1_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA2_eotS =
        "\24\uffff";
    static final String DFA2_eofS =
        "\1\2\23\uffff";
    static final String DFA2_minS =
        "\1\12\23\uffff";
    static final String DFA2_maxS =
        "\1\u00a7\23\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA2_specialS =
        "\24\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\155\uffff\1\1\3\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12"+
            "\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "223:17: ( packageDeclaration )?";
        }
    }
    static final String DFA3_eotS =
        "\23\uffff";
    static final String DFA3_eofS =
        "\1\1\22\uffff";
    static final String DFA3_minS =
        "\1\12\22\uffff";
    static final String DFA3_maxS =
        "\1\u00a7\22\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\20\uffff\1\1";
    static final String DFA3_specialS =
        "\23\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\156\uffff\1\1\1\22\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 223:37: ( importDeclaration )*";
        }
    }
    static final String DFA4_eotS =
        "\22\uffff";
    static final String DFA4_eofS =
        "\1\1\21\uffff";
    static final String DFA4_minS =
        "\1\12\21\uffff";
    static final String DFA4_maxS =
        "\1\u00a7\21\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA4_specialS =
        "\22\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\156\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff"+
            "\12\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()* loopback of 223:56: ( typeDeclaration )*";
        }
    }
    static final String DFA10_eotS =
        "\21\uffff";
    static final String DFA10_eofS =
        "\21\uffff";
    static final String DFA10_minS =
        "\1\12\20\uffff";
    static final String DFA10_maxS =
        "\1\u00a7\20\uffff";
    static final String DFA10_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA10_specialS =
        "\21\uffff}>";
    static final String[] DFA10_transitionS = {
            "\1\1\156\uffff\1\20\1\uffff\1\1\2\uffff\1\1\10\uffff\1\1\5"+
            "\uffff\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA10_eot = DFA.unpackEncodedString(DFA10_eotS);
    static final short[] DFA10_eof = DFA.unpackEncodedString(DFA10_eofS);
    static final char[] DFA10_min = DFA.unpackEncodedStringToUnsignedChars(DFA10_minS);
    static final char[] DFA10_max = DFA.unpackEncodedStringToUnsignedChars(DFA10_maxS);
    static final short[] DFA10_accept = DFA.unpackEncodedString(DFA10_acceptS);
    static final short[] DFA10_special = DFA.unpackEncodedString(DFA10_specialS);
    static final short[][] DFA10_transition;

    static {
        int numStates = DFA10_transitionS.length;
        DFA10_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA10_transition[i] = DFA.unpackEncodedString(DFA10_transitionS[i]);
        }
    }

    class DFA10 extends DFA {

        public DFA10(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 10;
            this.eot = DFA10_eot;
            this.eof = DFA10_eof;
            this.min = DFA10_min;
            this.max = DFA10_max;
            this.accept = DFA10_accept;
            this.special = DFA10_special;
            this.transition = DFA10_transition;
        }
        public String getDescription() {
            return "238:1: typeDeclaration : ( classOrInterfaceDeclaration | ';' );";
        }
    }
    static final String DFA11_eotS =
        "\22\uffff";
    static final String DFA11_eofS =
        "\22\uffff";
    static final String DFA11_minS =
        "\1\12\3\uffff\1\145\15\uffff";
    static final String DFA11_maxS =
        "\1\u00a7\3\uffff\1\u0087\15\uffff";
    static final String DFA11_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\14\uffff";
    static final String DFA11_specialS =
        "\22\uffff}>";
    static final String[] DFA11_transitionS = {
            "\1\1\160\uffff\1\5\2\uffff\1\1\10\uffff\1\1\5\uffff\12\5\20"+
            "\uffff\1\4",
            "",
            "",
            "",
            "\1\5\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA11_eot = DFA.unpackEncodedString(DFA11_eotS);
    static final short[] DFA11_eof = DFA.unpackEncodedString(DFA11_eofS);
    static final char[] DFA11_min = DFA.unpackEncodedStringToUnsignedChars(DFA11_minS);
    static final char[] DFA11_max = DFA.unpackEncodedStringToUnsignedChars(DFA11_maxS);
    static final short[] DFA11_accept = DFA.unpackEncodedString(DFA11_acceptS);
    static final short[] DFA11_special = DFA.unpackEncodedString(DFA11_specialS);
    static final short[][] DFA11_transition;

    static {
        int numStates = DFA11_transitionS.length;
        DFA11_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
        }
    }

    class DFA11 extends DFA {

        public DFA11(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 11;
            this.eot = DFA11_eot;
            this.eof = DFA11_eof;
            this.min = DFA11_min;
            this.max = DFA11_max;
            this.accept = DFA11_accept;
            this.special = DFA11_special;
            this.transition = DFA11_transition;
        }
        public String getDescription() {
            return "()* loopback of 244:4: ( modifier )*";
        }
    }
    static final String DFA27_eotS =
        "\30\uffff";
    static final String DFA27_eofS =
        "\1\1\27\uffff";
    static final String DFA27_minS =
        "\1\12\27\uffff";
    static final String DFA27_maxS =
        "\1\u00a7\27\uffff";
    static final String DFA27_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\24\uffff";
    static final String DFA27_specialS =
        "\30\uffff}>";
    static final String[] DFA27_transitionS = {
            "\1\3\132\uffff\1\3\23\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff"+
            "\1\3\3\uffff\1\3\1\1\2\3\4\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA27_eot = DFA.unpackEncodedString(DFA27_eotS);
    static final short[] DFA27_eof = DFA.unpackEncodedString(DFA27_eofS);
    static final char[] DFA27_min = DFA.unpackEncodedStringToUnsignedChars(DFA27_minS);
    static final char[] DFA27_max = DFA.unpackEncodedStringToUnsignedChars(DFA27_maxS);
    static final short[] DFA27_accept = DFA.unpackEncodedString(DFA27_acceptS);
    static final short[] DFA27_special = DFA.unpackEncodedString(DFA27_specialS);
    static final short[][] DFA27_transition;

    static {
        int numStates = DFA27_transitionS.length;
        DFA27_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA27_transition[i] = DFA.unpackEncodedString(DFA27_transitionS[i]);
        }
    }

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = DFA27_eot;
            this.eof = DFA27_eof;
            this.min = DFA27_min;
            this.max = DFA27_max;
            this.accept = DFA27_accept;
            this.special = DFA27_special;
            this.transition = DFA27_transition;
        }
        public String getDescription() {
            return "()* loopback of 288:8: ( classBodyDeclaration )*";
        }
    }
    static final String DFA31_eotS =
        "\27\uffff";
    static final String DFA31_eofS =
        "\27\uffff";
    static final String DFA31_minS =
        "\1\12\26\uffff";
    static final String DFA31_maxS =
        "\1\u00a7\26\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\1\24\uffff";
    static final String DFA31_specialS =
        "\27\uffff}>";
    static final String[] DFA31_transitionS = {
            "\1\2\132\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 300:9: ( classBodyDeclaration )*";
        }
    }
    static final String DFA32_eotS =
        "\26\uffff";
    static final String DFA32_eofS =
        "\26\uffff";
    static final String DFA32_minS =
        "\1\12\25\uffff";
    static final String DFA32_maxS =
        "\1\u00a7\25\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\2\1\1\23\uffff";
    static final String DFA32_specialS =
        "\26\uffff}>";
    static final String[] DFA32_transitionS = {
            "\1\2\132\uffff\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\4\uffff\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "()* loopback of 304:9: ( interfaceBodyDeclaration )*";
        }
    }
    static final String DFA36_eotS =
        "\53\uffff";
    static final String DFA36_eofS =
        "\53\uffff";
    static final String DFA36_minS =
        "\1\12\1\uffff\1\12\46\uffff\1\0\1\uffff";
    static final String DFA36_maxS =
        "\1\u00a7\1\uffff\1\u00a7\46\uffff\1\0\1\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\1\uffff\1\3\1\4\45\uffff\1\2";
    static final String DFA36_specialS =
        "\51\uffff\1\0\1\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\4\132\uffff\1\4\23\uffff\1\1\1\uffff\1\2\2\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\1\3\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "\1\4\132\uffff\1\4\25\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3"+
            "\uffff\1\51\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "307:1: classBodyDeclaration : ( ';' | 'static' block -> ^( STATIC block ) | ( 'static' )? block -> block | ( modifier )* ( genericMethodOrConstructorDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration ) | fieldDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration ) | lc= 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_41 = input.LA(1);

                         
                        int index36_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_Java()) ) {s = 42;}

                        else if ( (synpred38_Java()) ) {s = 3;}

                         
                        input.seek(index36_41);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA34_eotS =
        "\26\uffff";
    static final String DFA34_eofS =
        "\26\uffff";
    static final String DFA34_minS =
        "\1\12\5\uffff\1\145\17\uffff";
    static final String DFA34_maxS =
        "\1\u00a7\5\uffff\1\u0087\17\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA34_specialS =
        "\26\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\1\132\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5"+
            "\uffff\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()* loopback of 311:4: ( modifier )*";
        }
    }
    static final String DFA35_eotS =
        "\22\uffff";
    static final String DFA35_eofS =
        "\22\uffff";
    static final String DFA35_minS =
        "\1\12\1\uffff\2\145\6\uffff\6\0\2\uffff";
    static final String DFA35_maxS =
        "\1\u00a7\1\uffff\1\u00a1\1\u008a\6\uffff\6\0\2\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\2\uffff\1\4\1\6\1\7\1\10\1\11\1\5\6\uffff\1\2\1\3";
    static final String DFA35_specialS =
        "\12\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA35_transitionS = {
            "\1\10\132\uffff\1\2\30\uffff\1\7\2\uffff\1\1\5\uffff\1\5\1"+
            "\4\16\uffff\10\3\10\uffff\1\6",
            "",
            "\1\15\26\uffff\1\13\4\uffff\1\12\10\uffff\1\14\26\uffff\1"+
            "\11",
            "\1\17\44\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "311:14: ( genericMethodOrConstructorDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) genericMethodOrConstructorDecl ) | methodDeclaration -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) methodDeclaration ) | fieldDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) fieldDeclaration ) | lc= 'void' Identifier voidMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidMethodDeclaratorRest )? ) | Identifier constructorDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( NONE ) constructorDeclaratorRest ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_10 = input.LA(1);

                         
                        int index35_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index35_10);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA35_12 = input.LA(1);

                         
                        int index35_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index35_12);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA35_13 = input.LA(1);

                         
                        int index35_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index35_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA35_14 = input.LA(1);

                         
                        int index35_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index35_14);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA35_15 = input.LA(1);

                         
                        int index35_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred41_Java()) ) {s = 16;}

                        else if ( (synpred42_Java()) ) {s = 17;}

                         
                        input.seek(index35_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\25\uffff";
    static final String DFA40_eofS =
        "\25\uffff";
    static final String DFA40_minS =
        "\1\12\24\uffff";
    static final String DFA40_maxS =
        "\1\u00a7\24\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA40_specialS =
        "\25\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\1\132\uffff\1\1\23\uffff\1\24\1\uffff\1\1\2\uffff\1\1\2"+
            "\uffff\1\1\5\uffff\2\1\4\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "342:1: interfaceBodyDeclaration : ( ( modifier )* ( constantDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl ) | lc= 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) ) | ';' );";
        }
    }
    static final String DFA38_eotS =
        "\26\uffff";
    static final String DFA38_eofS =
        "\26\uffff";
    static final String DFA38_minS =
        "\1\12\5\uffff\1\145\17\uffff";
    static final String DFA38_maxS =
        "\1\u00a7\5\uffff\1\u0087\17\uffff";
    static final String DFA38_acceptS =
        "\1\uffff\1\2\7\uffff\1\1\14\uffff";
    static final String DFA38_specialS =
        "\26\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1\132\uffff\1\1\25\uffff\1\11\2\uffff\1\1\2\uffff\1\1\5"+
            "\uffff\2\1\4\uffff\12\11\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\11\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "()* loopback of 343:4: ( modifier )*";
        }
    }
    static final String DFA39_eotS =
        "\21\uffff";
    static final String DFA39_eofS =
        "\21\uffff";
    static final String DFA39_minS =
        "\1\12\2\145\6\uffff\6\0\2\uffff";
    static final String DFA39_maxS =
        "\1\u00a7\2\u008a\6\uffff\6\0\2\uffff";
    static final String DFA39_acceptS =
        "\3\uffff\1\3\1\4\1\5\1\6\1\7\1\10\6\uffff\1\1\1\2";
    static final String DFA39_specialS =
        "\11\uffff\1\0\1\1\1\2\1\3\1\4\1\5\2\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\10\132\uffff\1\1\30\uffff\1\7\2\uffff\1\3\5\uffff\1\5\1"+
            "\4\16\uffff\10\2\10\uffff\1\6",
            "\1\14\26\uffff\1\12\4\uffff\1\11\10\uffff\1\13",
            "\1\16\44\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "343:14: ( constantDeclaration -> ^( FIELD ^( MODIFIERS ( modifier )* ) constantDeclaration ) | type Identifier interfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier type ( interfaceMethodDeclaratorRest )? ) | interfaceGenericMethodDecl -> ^( METHOD ^( MODIFIERS ( modifier )* ) interfaceGenericMethodDecl ) | lc= 'void' Identifier voidInterfaceMethodDeclaratorRest -> ^( METHOD ^( MODIFIERS ( modifier )* ) ^( TYPE_PARAMETERS ) Identifier ^( TYPE VOID[$lc] ) ( voidInterfaceMethodDeclaratorRest )? ) | normalInterfaceDeclaration -> ^( INTERFACE ^( MODIFIERS ( modifier )* ) normalInterfaceDeclaration ) | annotationTypeDeclaration -> ^( ANNOTATION ^( MODIFIERS ( modifier )* ) annotationTypeDeclaration ) | classDeclaration -> ^( CLASS ^( MODIFIERS ( modifier )* ) classDeclaration ) | enumDeclaration -> ^( ENUM ^( MODIFIERS ( modifier )* ) enumDeclaration ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 15;}

                        else if ( (synpred52_Java()) ) {s = 16;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 15;}

                        else if ( (synpred52_Java()) ) {s = 16;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 15;}

                        else if ( (synpred52_Java()) ) {s = 16;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 15;}

                        else if ( (synpred52_Java()) ) {s = 16;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 15;}

                        else if ( (synpred52_Java()) ) {s = 16;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred51_Java()) ) {s = 15;}

                        else if ( (synpred52_Java()) ) {s = 16;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA56_eotS =
        "\25\uffff";
    static final String DFA56_eofS =
        "\25\uffff";
    static final String DFA56_minS =
        "\1\145\24\uffff";
    static final String DFA56_maxS =
        "\1\u00cb\24\uffff";
    static final String DFA56_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA56_specialS =
        "\25\uffff}>";
    static final String[] DFA56_transitionS = {
            "\7\2\25\uffff\1\2\3\uffff\1\1\2\uffff\1\2\16\uffff\10\2\1\uffff"+
            "\2\2\2\uffff\3\2\22\uffff\2\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA56_eot = DFA.unpackEncodedString(DFA56_eotS);
    static final short[] DFA56_eof = DFA.unpackEncodedString(DFA56_eofS);
    static final char[] DFA56_min = DFA.unpackEncodedStringToUnsignedChars(DFA56_minS);
    static final char[] DFA56_max = DFA.unpackEncodedStringToUnsignedChars(DFA56_maxS);
    static final short[] DFA56_accept = DFA.unpackEncodedString(DFA56_acceptS);
    static final short[] DFA56_special = DFA.unpackEncodedString(DFA56_specialS);
    static final short[][] DFA56_transition;

    static {
        int numStates = DFA56_transitionS.length;
        DFA56_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA56_transition[i] = DFA.unpackEncodedString(DFA56_transitionS[i]);
        }
    }

    class DFA56 extends DFA {

        public DFA56(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 56;
            this.eot = DFA56_eot;
            this.eof = DFA56_eof;
            this.min = DFA56_min;
            this.max = DFA56_max;
            this.accept = DFA56_accept;
            this.special = DFA56_special;
            this.transition = DFA56_transition;
        }
        public String getDescription() {
            return "425:1: variableInitializer : ( arrayInitializer | expression );";
        }
    }
    static final String DFA59_eotS =
        "\26\uffff";
    static final String DFA59_eofS =
        "\26\uffff";
    static final String DFA59_minS =
        "\1\145\25\uffff";
    static final String DFA59_maxS =
        "\1\u00cb\25\uffff";
    static final String DFA59_acceptS =
        "\1\uffff\1\1\23\uffff\1\2";
    static final String DFA59_specialS =
        "\26\uffff}>";
    static final String[] DFA59_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\25\1\uffff\1\1\16\uffff\10"+
            "\1\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "431:8: ( variableInitializer ( ',' variableInitializer )* ( ',' )? )?";
        }
    }
    static final String DFA57_eotS =
        "\30\uffff";
    static final String DFA57_eofS =
        "\30\uffff";
    static final String DFA57_minS =
        "\1\u0082\1\145\26\uffff";
    static final String DFA57_maxS =
        "\1\u0086\1\u00cb\26\uffff";
    static final String DFA57_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\23\uffff";
    static final String DFA57_specialS =
        "\30\uffff}>";
    static final String[] DFA57_transitionS = {
            "\1\1\3\uffff\1\2",
            "\7\4\25\uffff\1\4\3\uffff\1\4\1\2\1\uffff\1\4\16\uffff\10"+
            "\4\1\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA57_eot = DFA.unpackEncodedString(DFA57_eotS);
    static final short[] DFA57_eof = DFA.unpackEncodedString(DFA57_eofS);
    static final char[] DFA57_min = DFA.unpackEncodedStringToUnsignedChars(DFA57_minS);
    static final char[] DFA57_max = DFA.unpackEncodedStringToUnsignedChars(DFA57_maxS);
    static final short[] DFA57_accept = DFA.unpackEncodedString(DFA57_acceptS);
    static final short[] DFA57_special = DFA.unpackEncodedString(DFA57_specialS);
    static final short[][] DFA57_transition;

    static {
        int numStates = DFA57_transitionS.length;
        DFA57_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA57_transition[i] = DFA.unpackEncodedString(DFA57_transitionS[i]);
        }
    }

    class DFA57 extends DFA {

        public DFA57(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 57;
            this.eot = DFA57_eot;
            this.eof = DFA57_eof;
            this.min = DFA57_min;
            this.max = DFA57_max;
            this.accept = DFA57_accept;
            this.special = DFA57_special;
            this.transition = DFA57_transition;
        }
        public String getDescription() {
            return "()* loopback of 431:29: ( ',' variableInitializer )*";
        }
    }
    static final String DFA60_eotS =
        "\15\uffff";
    static final String DFA60_eofS =
        "\15\uffff";
    static final String DFA60_minS =
        "\1\173\14\uffff";
    static final String DFA60_maxS =
        "\1\u00a7\14\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA60_specialS =
        "\15\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\5\21\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
            "\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "434:1: modifier : ( annotation | 'public' | 'protected' | 'private' | 'static' | 'abstract' | 'final' | 'native' | 'synchronized' | 'transient' | 'volatile' | 'strictfp' );";
        }
    }
    static final String DFA63_eotS =
        "\43\uffff";
    static final String DFA63_eofS =
        "\1\1\42\uffff";
    static final String DFA63_minS =
        "\1\145\37\uffff\1\145\2\uffff";
    static final String DFA63_maxS =
        "\1\u00c5\37\uffff\1\176\2\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\2\40\uffff\1\1";
    static final String DFA63_specialS =
        "\43\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\1\40\1\1\2\uffff\7\1\3\uffff\3\1"+
            "\22\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\42\30\uffff\1\1",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "()* loopback of 463:20: ( '.' i+= refComponent )*";
        }
    }
    static final String DFA64_eotS =
        "\41\uffff";
    static final String DFA64_eofS =
        "\1\1\40\uffff";
    static final String DFA64_minS =
        "\1\145\40\uffff";
    static final String DFA64_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA64_specialS =
        "\41\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1"+
            "\22\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "()* loopback of 463:43: ( '[' ']' )*";
        }
    }
    static final String DFA65_eotS =
        "\41\uffff";
    static final String DFA65_eofS =
        "\1\1\40\uffff";
    static final String DFA65_minS =
        "\1\145\40\uffff";
    static final String DFA65_maxS =
        "\1\u00c5\40\uffff";
    static final String DFA65_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA65_specialS =
        "\41\uffff}>";
    static final String[] DFA65_transitionS = {
            "\1\1\23\uffff\1\1\2\uffff\2\1\2\uffff\7\1\3\uffff\1\40\2\1"+
            "\22\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\15\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA65_eot = DFA.unpackEncodedString(DFA65_eotS);
    static final short[] DFA65_eof = DFA.unpackEncodedString(DFA65_eofS);
    static final char[] DFA65_min = DFA.unpackEncodedStringToUnsignedChars(DFA65_minS);
    static final char[] DFA65_max = DFA.unpackEncodedStringToUnsignedChars(DFA65_maxS);
    static final short[] DFA65_accept = DFA.unpackEncodedString(DFA65_acceptS);
    static final short[] DFA65_special = DFA.unpackEncodedString(DFA65_specialS);
    static final short[][] DFA65_transition;

    static {
        int numStates = DFA65_transitionS.length;
        DFA65_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA65_transition[i] = DFA.unpackEncodedString(DFA65_transitionS[i]);
        }
    }

    class DFA65 extends DFA {

        public DFA65(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 65;
            this.eot = DFA65_eot;
            this.eof = DFA65_eof;
            this.min = DFA65_min;
            this.max = DFA65_max;
            this.accept = DFA65_accept;
            this.special = DFA65_special;
            this.transition = DFA65_transition;
        }
        public String getDescription() {
            return "()* loopback of 464:18: ( '[' ']' )*";
        }
    }
    static final String DFA67_eotS =
        "\46\uffff";
    static final String DFA67_eofS =
        "\1\2\45\uffff";
    static final String DFA67_minS =
        "\2\145\44\uffff";
    static final String DFA67_maxS =
        "\1\u00c5\1\u009f\44\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\2\40\uffff\1\1\2\uffff";
    static final String DFA67_specialS =
        "\46\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\23\uffff\1\2\2\uffff\2\2\2\uffff\1\2\1\1\5\2\3\uffff\3"+
            "\2\22\uffff\1\2\1\uffff\3\2\6\uffff\1\2\16\uffff\15\2",
            "\1\43\33\uffff\1\2\25\uffff\11\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "468:18: ( typeArguments )?";
        }
    }
    static final String DFA72_eotS =
        "\52\uffff";
    static final String DFA72_eofS =
        "\1\4\51\uffff";
    static final String DFA72_minS =
        "\1\177\1\uffff\3\0\45\uffff";
    static final String DFA72_maxS =
        "\1\u00a0\1\uffff\3\0\45\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\44\uffff";
    static final String DFA72_specialS =
        "\2\uffff\1\0\1\1\1\2\45\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\2\uffff\1\2\1\3\34\uffff\1\5",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "493:8: ( ( 'extends' type )? -> ^( TYPE ^( '?' ( ^( EXTENDS type ) )? ) ) | ( 'super' type )? -> ^( TYPE ^( '?' ( ^( SUPER type ) )? ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA72_2 = input.LA(1);

                         
                        int index72_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA72_3 = input.LA(1);

                         
                        int index72_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA72_4 = input.LA(1);

                         
                        int index72_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index72_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 72, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\30\uffff";
    static final String DFA81_eofS =
        "\1\1\27\uffff";
    static final String DFA81_minS =
        "\1\12\2\uffff\1\145\22\uffff\1\0\1\uffff";
    static final String DFA81_maxS =
        "\1\u00a7\2\uffff\1\u0087\22\uffff\1\0\1\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA81_specialS =
        "\26\uffff\1\0\1\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\132\uffff\1\1\22\uffff\4\1\2\uffff\1\1\10\uffff\1\1\5"+
            "\uffff\12\1\20\uffff\1\3",
            "",
            "",
            "\1\26\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()+ loopback of 546:4: ( annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_22 = input.LA(1);

                         
                        int index81_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred124_Java()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA83_eotS =
        "\34\uffff";
    static final String DFA83_eofS =
        "\1\2\33\uffff";
    static final String DFA83_minS =
        "\1\12\33\uffff";
    static final String DFA83_maxS =
        "\1\u00a7\33\uffff";
    static final String DFA83_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA83_specialS =
        "\34\uffff}>";
    static final String[] DFA83_transitionS = {
            "\1\2\132\uffff\1\2\22\uffff\4\2\2\uffff\1\2\2\uffff\2\2\3\uffff"+
            "\3\2\4\uffff\22\2\2\uffff\1\1\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA83_eot = DFA.unpackEncodedString(DFA83_eotS);
    static final short[] DFA83_eof = DFA.unpackEncodedString(DFA83_eofS);
    static final char[] DFA83_min = DFA.unpackEncodedStringToUnsignedChars(DFA83_minS);
    static final char[] DFA83_max = DFA.unpackEncodedStringToUnsignedChars(DFA83_maxS);
    static final short[] DFA83_accept = DFA.unpackEncodedString(DFA83_acceptS);
    static final short[] DFA83_special = DFA.unpackEncodedString(DFA83_specialS);
    static final short[][] DFA83_transition;

    static {
        int numStates = DFA83_transitionS.length;
        DFA83_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA83_transition[i] = DFA.unpackEncodedString(DFA83_transitionS[i]);
        }
    }

    class DFA83 extends DFA {

        public DFA83(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 83;
            this.eot = DFA83_eot;
            this.eof = DFA83_eof;
            this.min = DFA83_min;
            this.max = DFA83_max;
            this.accept = DFA83_accept;
            this.special = DFA83_special;
            this.transition = DFA83_transition;
        }
        public String getDescription() {
            return "550:26: ( '(' ( elementValuePairs )? ')' )?";
        }
    }
    static final String DFA82_eotS =
        "\27\uffff";
    static final String DFA82_eofS =
        "\27\uffff";
    static final String DFA82_minS =
        "\1\145\26\uffff";
    static final String DFA82_maxS =
        "\1\u00cb\26\uffff";
    static final String DFA82_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA82_specialS =
        "\27\uffff}>";
    static final String[] DFA82_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\2\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\26\1\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA82_eot = DFA.unpackEncodedString(DFA82_eotS);
    static final short[] DFA82_eof = DFA.unpackEncodedString(DFA82_eofS);
    static final char[] DFA82_min = DFA.unpackEncodedStringToUnsignedChars(DFA82_minS);
    static final char[] DFA82_max = DFA.unpackEncodedStringToUnsignedChars(DFA82_maxS);
    static final short[] DFA82_accept = DFA.unpackEncodedString(DFA82_acceptS);
    static final short[] DFA82_special = DFA.unpackEncodedString(DFA82_specialS);
    static final short[][] DFA82_transition;

    static {
        int numStates = DFA82_transitionS.length;
        DFA82_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA82_transition[i] = DFA.unpackEncodedString(DFA82_transitionS[i]);
        }
    }

    class DFA82 extends DFA {

        public DFA82(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 82;
            this.eot = DFA82_eot;
            this.eof = DFA82_eof;
            this.min = DFA82_min;
            this.max = DFA82_max;
            this.accept = DFA82_accept;
            this.special = DFA82_special;
            this.transition = DFA82_transition;
        }
        public String getDescription() {
            return "550:31: ( elementValuePairs )?";
        }
    }
    static final String DFA84_eotS =
        "\35\uffff";
    static final String DFA84_eofS =
        "\1\1\34\uffff";
    static final String DFA84_minS =
        "\1\12\34\uffff";
    static final String DFA84_maxS =
        "\1\u00a7\34\uffff";
    static final String DFA84_acceptS =
        "\1\uffff\1\2\32\uffff\1\1";
    static final String DFA84_specialS =
        "\35\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\1\132\uffff\1\1\22\uffff\4\1\1\34\1\uffff\1\1\2\uffff\2"+
            "\1\3\uffff\3\1\4\uffff\22\1\2\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "()* loopback of 554:15: ( '.' Identifier )*";
        }
    }
    static final String DFA86_eotS =
        "\57\uffff";
    static final String DFA86_eofS =
        "\1\uffff\1\2\55\uffff";
    static final String DFA86_minS =
        "\1\145\1\174\55\uffff";
    static final String DFA86_maxS =
        "\1\u00cb\1\u00c8\55\uffff";
    static final String DFA86_acceptS =
        "\2\uffff\1\2\23\uffff\1\1\30\uffff";
    static final String DFA86_specialS =
        "\57\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\1\6\2\25\uffff\1\2\3\uffff\1\2\2\uffff\1\2\16\uffff\10\2"+
            "\1\uffff\2\2\2\uffff\4\2\21\uffff\2\2\14\uffff\5\2",
            "\2\2\3\uffff\4\2\5\uffff\1\2\1\uffff\1\26\22\uffff\1\2\1\uffff"+
            "\2\2\26\uffff\3\2\3\uffff\12\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "561:1: elementValuePair : ( ( Identifier '=' ) elementValue -> ^( ASSIGN ^( VAR Identifier ) elementValue ) | elementValue -> elementValue );";
        }
    }
    static final String DFA87_eotS =
        "\26\uffff";
    static final String DFA87_eofS =
        "\26\uffff";
    static final String DFA87_minS =
        "\1\145\25\uffff";
    static final String DFA87_maxS =
        "\1\u00cb\25\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\1\22\uffff\1\2\1\3";
    static final String DFA87_specialS =
        "\26\uffff}>";
    static final String[] DFA87_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\25\2\uffff\1\1\16\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\1\24\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "566:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );";
        }
    }
    static final String DFA89_eotS =
        "\27\uffff";
    static final String DFA89_eofS =
        "\27\uffff";
    static final String DFA89_minS =
        "\1\145\26\uffff";
    static final String DFA89_maxS =
        "\1\u00cb\26\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA89_specialS =
        "\27\uffff}>";
    static final String[] DFA89_transitionS = {
            "\7\1\25\uffff\1\1\3\uffff\1\1\1\26\1\uffff\1\1\16\uffff\10"+
            "\1\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "573:8: ( elementValue ( ',' elementValue )* )?";
        }
    }
    static final String DFA90_eotS =
        "\107\uffff";
    static final String DFA90_eofS =
        "\107\uffff";
    static final String DFA90_minS =
        "\1\12\21\uffff\1\0\64\uffff";
    static final String DFA90_maxS =
        "\1\u00a7\21\uffff\1\0\64\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\1\104\uffff\1\2";
    static final String DFA90_specialS =
        "\22\uffff\1\0\64\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\1\132\uffff\1\1\25\uffff\1\1\2\uffff\1\1\7\uffff\1\22\1"+
            "\1\5\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "581:9: ( annotationTypeElementDeclarations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_18 = input.LA(1);

                         
                        int index90_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred134_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 70;}

                         
                        input.seek(index90_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\24\uffff";
    static final String DFA91_eofS =
        "\1\1\23\uffff";
    static final String DFA91_minS =
        "\1\12\23\uffff";
    static final String DFA91_maxS =
        "\1\u00a7\23\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\20\uffff";
    static final String DFA91_specialS =
        "\24\uffff}>";
    static final String[] DFA91_transitionS = {
            "\1\3\132\uffff\1\3\25\uffff\1\3\2\uffff\1\3\7\uffff\1\1\1\3"+
            "\5\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "()* loopback of 585:4: ( annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA92_eotS =
        "\24\uffff";
    static final String DFA92_eofS =
        "\24\uffff";
    static final String DFA92_minS =
        "\1\12\5\uffff\1\145\15\uffff";
    static final String DFA92_maxS =
        "\1\u00a7\5\uffff\1\u0087\15\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\2\5\uffff\1\1\14\uffff";
    static final String DFA92_specialS =
        "\24\uffff}>";
    static final String[] DFA92_transitionS = {
            "\1\1\132\uffff\1\1\25\uffff\1\7\2\uffff\1\1\10\uffff\1\1\5"+
            "\uffff\12\7\10\1\10\uffff\1\6",
            "",
            "",
            "",
            "",
            "",
            "\1\7\41\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()* loopback of 589:4: ( modifier )*";
        }
    }
    static final String DFA94_eotS =
        "\25\uffff";
    static final String DFA94_eofS =
        "\1\2\24\uffff";
    static final String DFA94_minS =
        "\1\12\24\uffff";
    static final String DFA94_maxS =
        "\1\u00a7\24\uffff";
    static final String DFA94_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA94_specialS =
        "\25\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\2\132\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "596:23: ( ';' )?";
        }
    }
    static final String DFA95_eotS =
        "\25\uffff";
    static final String DFA95_eofS =
        "\1\2\24\uffff";
    static final String DFA95_minS =
        "\1\12\24\uffff";
    static final String DFA95_maxS =
        "\1\u00a7\24\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA95_specialS =
        "\25\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\2\132\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "597:22: ( ';' )?";
        }
    }
    static final String DFA96_eotS =
        "\25\uffff";
    static final String DFA96_eofS =
        "\1\2\24\uffff";
    static final String DFA96_minS =
        "\1\12\24\uffff";
    static final String DFA96_maxS =
        "\1\u00a7\24\uffff";
    static final String DFA96_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA96_specialS =
        "\25\uffff}>";
    static final String[] DFA96_transitionS = {
            "\1\2\132\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA96_eot = DFA.unpackEncodedString(DFA96_eotS);
    static final short[] DFA96_eof = DFA.unpackEncodedString(DFA96_eofS);
    static final char[] DFA96_min = DFA.unpackEncodedStringToUnsignedChars(DFA96_minS);
    static final char[] DFA96_max = DFA.unpackEncodedStringToUnsignedChars(DFA96_maxS);
    static final short[] DFA96_accept = DFA.unpackEncodedString(DFA96_acceptS);
    static final short[] DFA96_special = DFA.unpackEncodedString(DFA96_specialS);
    static final short[][] DFA96_transition;

    static {
        int numStates = DFA96_transitionS.length;
        DFA96_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA96_transition[i] = DFA.unpackEncodedString(DFA96_transitionS[i]);
        }
    }

    class DFA96 extends DFA {

        public DFA96(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 96;
            this.eot = DFA96_eot;
            this.eof = DFA96_eof;
            this.min = DFA96_min;
            this.max = DFA96_max;
            this.accept = DFA96_accept;
            this.special = DFA96_special;
            this.transition = DFA96_transition;
        }
        public String getDescription() {
            return "598:33: ( ';' )?";
        }
    }
    static final String DFA97_eotS =
        "\25\uffff";
    static final String DFA97_eofS =
        "\1\2\24\uffff";
    static final String DFA97_minS =
        "\1\12\24\uffff";
    static final String DFA97_maxS =
        "\1\u00a7\24\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA97_specialS =
        "\25\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\2\132\uffff\1\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff"+
            "\2\2\5\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "599:32: ( ';' )?";
        }
    }
    static final String DFA100_eotS =
        "\61\uffff";
    static final String DFA100_eofS =
        "\61\uffff";
    static final String DFA100_minS =
        "\1\12\60\uffff";
    static final String DFA100_maxS =
        "\1\u00cb\60\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\2\1\1\56\uffff";
    static final String DFA100_specialS =
        "\61\uffff}>";
    static final String[] DFA100_transitionS = {
            "\1\2\132\uffff\7\2\15\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\1\2\1\1\2\2\4\uffff\22\2\1\uffff\2\2\2\uffff\4"+
            "\2\1\uffff\1\2\1\uffff\1\2\1\uffff\4\2\1\uffff\5\2\2\uffff\2"+
            "\2\14\uffff\5\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 618:8: ( blockStatement )*";
        }
    }
    static final String DFA101_eotS =
        "\162\uffff";
    static final String DFA101_eofS =
        "\162\uffff";
    static final String DFA101_minS =
        "\2\12\3\145\6\uffff\1\12\47\uffff\1\0\5\uffff\1\0\10\uffff\1\0"+
        "\1\uffff\3\0\30\uffff\1\0\22\uffff";
    static final String DFA101_maxS =
        "\1\u00cb\1\u00a7\1\u0087\1\u00c8\1\u008a\6\uffff\1\u00a7\47\uffff"+
        "\1\0\5\uffff\1\0\10\uffff\1\0\1\uffff\3\0\30\uffff\1\0\22\uffff";
    static final String DFA101_acceptS =
        "\5\uffff\1\2\14\uffff\1\3\54\uffff\1\1\62\uffff";
    static final String DFA101_specialS =
        "\63\uffff\1\0\5\uffff\1\1\10\uffff\1\2\1\uffff\1\3\1\4\1\5\30\uffff"+
        "\1\6\22\uffff}>";
    static final String[] DFA101_transitionS = {
            "\1\5\132\uffff\1\3\6\22\15\uffff\1\22\1\uffff\1\5\2\uffff\1"+
            "\5\2\uffff\1\22\3\uffff\1\22\1\uffff\1\5\1\22\4\uffff\4\5\1"+
            "\1\1\5\1\13\3\5\10\4\1\uffff\2\22\2\uffff\3\22\1\2\1\uffff\1"+
            "\22\1\uffff\1\22\1\uffff\4\22\1\uffff\5\22\2\uffff\2\22\14\uffff"+
            "\5\22",
            "\1\5\132\uffff\1\77\25\uffff\1\5\2\uffff\1\5\10\uffff\1\5"+
            "\5\uffff\4\5\1\71\5\5\10\77\10\uffff\1\63",
            "\1\102\41\uffff\1\5",
            "\1\77\23\uffff\1\22\2\uffff\1\105\1\22\3\uffff\1\104\1\uffff"+
            "\2\22\5\uffff\1\106\1\uffff\1\22\22\uffff\1\22\1\uffff\1\22"+
            "\10\uffff\1\22\16\uffff\20\22",
            "\1\77\26\uffff\1\22\15\uffff\1\137",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\5\160\uffff\1\5\2\uffff\1\5\10\uffff\1\5\5\uffff\12\5\12"+
            "\uffff\1\22\5\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "621:1: blockStatement : ( localVariableDeclaration | classOrInterfaceDeclaration | statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA101_51 = input.LA(1);

                         
                        int index101_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (synpred149_Java()) ) {s = 5;}

                         
                        input.seek(index101_51);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA101_57 = input.LA(1);

                         
                        int index101_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (synpred149_Java()) ) {s = 5;}

                         
                        input.seek(index101_57);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA101_66 = input.LA(1);

                         
                        int index101_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (synpred149_Java()) ) {s = 5;}

                         
                        input.seek(index101_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA101_68 = input.LA(1);

                         
                        int index101_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_68);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA101_69 = input.LA(1);

                         
                        int index101_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_69);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA101_70 = input.LA(1);

                         
                        int index101_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_70);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA101_95 = input.LA(1);

                         
                        int index101_95 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred148_Java()) ) {s = 63;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index101_95);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 101, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA109_eotS =
        "\75\uffff";
    static final String DFA109_eofS =
        "\75\uffff";
    static final String DFA109_minS =
        "\1\145\35\uffff\1\171\36\uffff";
    static final String DFA109_maxS =
        "\1\u00cb\35\uffff\1\u00c8\36\uffff";
    static final String DFA109_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\22\uffff\1\20\32\uffff";
    static final String DFA109_specialS =
        "\75\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\36\6\17\15\uffff\1\16\7\uffff\1\17\3\uffff\1\1\2\uffff\1"+
            "\17\12\uffff\1\11\3\uffff\10\17\1\uffff\2\17\2\uffff\3\17\2"+
            "\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff\1\10"+
            "\1\12\1\13\1\14\1\15\2\uffff\2\17\14\uffff\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\3\uffff\1\17\1\uffff\2\17\5\uffff\1\17"+
            "\1\uffff\1\17\22\uffff\1\17\1\uffff\1\17\10\uffff\1\42\16\uffff"+
            "\20\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "631:1: statement : ( block | lc= 'assert' expression ( ':' expression )? ';' -> ^( ASSERT[$lc] expression ( expression )? ) | lc= 'if' parExpression statement ( options {k=1; } : 'else' statement )? -> ^( IF[$lc] parExpression statement ( statement )? ) | lc= 'for' '(' forControl ')' statement -> ^( FOR[$lc] forControl statement ) | lc= 'while' parExpression statement -> ^( WHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'do' statement 'while' parExpression ';' -> ^( DOWHILE[$lc] ^( TEST parExpression ) statement ) | lc= 'try' block ( catches fc= 'finally' block -> ^( TRY[$lc] block catches ^( FINALLY[$fc] block ) ) | catches -> ^( TRY[$lc] block catches ) | fc= 'finally' block -> ^( TRY[$lc] block ^( FINALLY[$fc] block ) ) ) | lc= 'switch' parExpression '{' switchBlockStatementGroups '}' -> ^( SWITCH[$lc] parExpression switchBlockStatementGroups ) | lc= 'synchronized' parExpression block -> ^( SYNCHRONIZED[$lc] parExpression block ) | lc= 'return' ( expression )? ';' -> ^( RETURN[$lc] ( expression )? ) | lc= 'throw' expression ';' -> ^( THROW[$lc] expression ) | lc= 'break' ( Identifier )? ';' -> ^( BREAK[$lc] ( Identifier )? ) | lc= 'continue' ( Identifier )? ';' -> ^( CONTINUE[$lc] ( Identifier )? ) | ';' -> ^( BLOCK ) | statementExpression ';' -> statementExpression | lc= Identifier ':' statement -> ^( LABEL[$lc] Identifier statement ) );";
        }
    }
    static final String DFA106_eotS =
        "\25\uffff";
    static final String DFA106_eofS =
        "\25\uffff";
    static final String DFA106_minS =
        "\1\145\24\uffff";
    static final String DFA106_maxS =
        "\1\u00cb\24\uffff";
    static final String DFA106_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA106_specialS =
        "\25\uffff}>";
    static final String[] DFA106_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA106_eot = DFA.unpackEncodedString(DFA106_eotS);
    static final short[] DFA106_eof = DFA.unpackEncodedString(DFA106_eofS);
    static final char[] DFA106_min = DFA.unpackEncodedStringToUnsignedChars(DFA106_minS);
    static final char[] DFA106_max = DFA.unpackEncodedStringToUnsignedChars(DFA106_maxS);
    static final short[] DFA106_accept = DFA.unpackEncodedString(DFA106_acceptS);
    static final short[] DFA106_special = DFA.unpackEncodedString(DFA106_specialS);
    static final short[][] DFA106_transition;

    static {
        int numStates = DFA106_transitionS.length;
        DFA106_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA106_transition[i] = DFA.unpackEncodedString(DFA106_transitionS[i]);
        }
    }

    class DFA106 extends DFA {

        public DFA106(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 106;
            this.eot = DFA106_eot;
            this.eof = DFA106_eof;
            this.min = DFA106_min;
            this.max = DFA106_max;
            this.accept = DFA106_accept;
            this.special = DFA106_special;
            this.transition = DFA106_transition;
        }
        public String getDescription() {
            return "645:19: ( expression )?";
        }
    }
    static final String DFA110_eotS =
        "\67\uffff";
    static final String DFA110_eofS =
        "\1\1\66\uffff";
    static final String DFA110_minS =
        "\1\12\66\uffff";
    static final String DFA110_maxS =
        "\1\u00cb\66\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\2\64\uffff\1\1";
    static final String DFA110_specialS =
        "\67\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\1\132\uffff\7\1\15\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\4\1\4\uffff\22\1\1\uffff\2\1\2\uffff\6\1\1\uffff"+
            "\14\1\1\66\3\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 655:16: ( catchClause )*";
        }
    }
    static final String DFA113_eotS =
        "\64\uffff";
    static final String DFA113_eofS =
        "\1\1\63\uffff";
    static final String DFA113_minS =
        "\1\12\63\uffff";
    static final String DFA113_maxS =
        "\1\u00cb\63\uffff";
    static final String DFA113_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\56\uffff";
    static final String DFA113_specialS =
        "\64\uffff}>";
    static final String[] DFA113_transitionS = {
            "\1\5\132\uffff\7\5\15\uffff\1\5\1\uffff\1\5\2\uffff\1\5\2\uffff"+
            "\1\5\3\uffff\1\5\1\1\2\5\4\uffff\22\5\1\uffff\2\5\2\uffff\4"+
            "\5\1\1\1\5\1\uffff\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\2"+
            "\5\14\uffff\5\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA113_eot = DFA.unpackEncodedString(DFA113_eotS);
    static final short[] DFA113_eof = DFA.unpackEncodedString(DFA113_eofS);
    static final char[] DFA113_min = DFA.unpackEncodedStringToUnsignedChars(DFA113_minS);
    static final char[] DFA113_max = DFA.unpackEncodedStringToUnsignedChars(DFA113_maxS);
    static final short[] DFA113_accept = DFA.unpackEncodedString(DFA113_acceptS);
    static final short[] DFA113_special = DFA.unpackEncodedString(DFA113_specialS);
    static final short[][] DFA113_transition;

    static {
        int numStates = DFA113_transitionS.length;
        DFA113_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA113_transition[i] = DFA.unpackEncodedString(DFA113_transitionS[i]);
        }
    }

    class DFA113 extends DFA {

        public DFA113(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 113;
            this.eot = DFA113_eot;
            this.eof = DFA113_eof;
            this.min = DFA113_min;
            this.max = DFA113_max;
            this.accept = DFA113_accept;
            this.special = DFA113_special;
            this.transition = DFA113_transition;
        }
        public String getDescription() {
            return "()* loopback of 671:16: ( blockStatement )*";
        }
    }
    static final String DFA114_eotS =
        "\27\uffff";
    static final String DFA114_eofS =
        "\27\uffff";
    static final String DFA114_minS =
        "\1\u00a8\1\145\20\uffff\1\0\4\uffff";
    static final String DFA114_maxS =
        "\1\u00b8\1\u00cb\20\uffff\1\0\4\uffff";
    static final String DFA114_acceptS =
        "\2\uffff\1\3\1\1\22\uffff\1\2";
    static final String DFA114_specialS =
        "\22\uffff\1\0\4\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\2\17\uffff\1\1",
            "\1\22\6\3\25\uffff\1\3\6\uffff\1\3\16\uffff\10\3\1\uffff\2"+
            "\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "674:1: switchLabel : (lc= 'case' constantExpression ':' -> ^( CASE[$lc] constantExpression ) | lc= 'case' enumConstantName ':' -> ^( CASE[$lc] enumConstantName ) | lc= 'default' ':' -> ^( DEFAULT ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA114_18 = input.LA(1);

                         
                        int index114_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred177_Java()) ) {s = 3;}

                        else if ( (synpred178_Java()) ) {s = 22;}

                         
                        input.seek(index114_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 114, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA119_eotS =
        "\u0085\uffff";
    static final String DFA119_eofS =
        "\u0085\uffff";
    static final String DFA119_minS =
        "\5\145\22\uffff\10\145\1\171\30\uffff\1\u008b\1\uffff\1\171\21"+
        "\0\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA119_maxS =
        "\1\u00cb\1\u00a7\1\145\1\u00c8\1\u008a\22\uffff\2\u008a\1\u00a7"+
        "\1\145\1\u00a7\3\u00cb\1\u00aa\30\uffff\1\u008b\1\uffff\1\u00aa"+
        "\21\0\2\uffff\3\0\23\uffff\1\0\1\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA119_acceptS =
        "\5\uffff\1\2\164\uffff\1\1\12\uffff";
    static final String DFA119_specialS =
        "\73\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\2\uffff\1\21\1\22\1\23\23\uffff\1\24\1\uffff"+
        "\1\25\30\uffff\1\26\5\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\3\6\5\15\uffff\1\5\7\uffff\1\5\6\uffff\1\5\10\uffff\1\1"+
            "\5\uffff\10\4\1\uffff\2\5\2\uffff\3\5\1\2\21\uffff\2\5\14\uffff"+
            "\5\5",
            "\1\27\53\uffff\1\31\5\uffff\10\30\10\uffff\1\32",
            "\1\33",
            "\1\37\23\uffff\1\5\2\uffff\1\35\1\5\3\uffff\1\34\3\5\5\uffff"+
            "\1\36\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\72\26\uffff\1\5\15\uffff\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\76\26\uffff\1\74\4\uffff\1\73\10\uffff\1\75",
            "\1\100\44\uffff\1\77",
            "\1\101\53\uffff\1\103\5\uffff\10\102\10\uffff\1\104",
            "\1\105",
            "\1\110\26\uffff\1\106\24\uffff\1\112\5\uffff\10\111\2\uffff"+
            "\1\107\5\uffff\1\113",
            "\1\116\6\5\25\uffff\1\5\6\uffff\1\5\3\uffff\1\5\12\uffff\10"+
            "\117\1\120\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\144\30\uffff\1\5\2\uffff\1\5\36\uffff\1\5\52\uffff\1\5",
            "\7\5\25\uffff\1\5\6\uffff\1\5\2\uffff\1\146\13\uffff\10\5"+
            "\1\uffff\2\5\2\uffff\3\5\22\uffff\2\5\14\uffff\5\5",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\177",
            "",
            "\1\5\10\uffff\1\5\7\uffff\1\5\1\uffff\1\5\35\uffff\1\172",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "684:1: forControl options {k=3; } : ( forVarControl -> ^( FOREACH forVarControl ) | ( forInit )? ';' (fc= expression )? ';' (fu= forUpdate )? -> ^( INIT ( forInit )? ) ^( TEST ( expression )? ) ^( STEP ( forUpdate )? ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA119_59 = input.LA(1);

                         
                        int index119_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_59);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA119_60 = input.LA(1);

                         
                        int index119_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_60);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA119_61 = input.LA(1);

                         
                        int index119_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA119_62 = input.LA(1);

                         
                        int index119_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_62);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA119_63 = input.LA(1);

                         
                        int index119_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_63);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA119_64 = input.LA(1);

                         
                        int index119_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_64);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA119_65 = input.LA(1);

                         
                        int index119_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_65);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA119_66 = input.LA(1);

                         
                        int index119_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_66);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA119_67 = input.LA(1);

                         
                        int index119_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_67);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA119_68 = input.LA(1);

                         
                        int index119_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_68);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA119_69 = input.LA(1);

                         
                        int index119_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_69);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA119_70 = input.LA(1);

                         
                        int index119_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_70);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA119_71 = input.LA(1);

                         
                        int index119_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_71);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA119_72 = input.LA(1);

                         
                        int index119_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_72);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA119_73 = input.LA(1);

                         
                        int index119_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_73);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA119_74 = input.LA(1);

                         
                        int index119_74 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_74);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA119_75 = input.LA(1);

                         
                        int index119_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_75);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA119_78 = input.LA(1);

                         
                        int index119_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_78);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA119_79 = input.LA(1);

                         
                        int index119_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_79);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA119_80 = input.LA(1);

                         
                        int index119_80 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_80);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA119_100 = input.LA(1);

                         
                        int index119_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_100);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA119_102 = input.LA(1);

                         
                        int index119_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_102);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA119_127 = input.LA(1);

                         
                        int index119_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred180_Java()) ) {s = 122;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index119_127);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 119, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA116_eotS =
        "\27\uffff";
    static final String DFA116_eofS =
        "\27\uffff";
    static final String DFA116_minS =
        "\1\145\26\uffff";
    static final String DFA116_maxS =
        "\1\u00cb\26\uffff";
    static final String DFA116_acceptS =
        "\1\uffff\1\1\24\uffff\1\2";
    static final String DFA116_specialS =
        "\27\uffff}>";
    static final String[] DFA116_transitionS = {
            "\7\1\15\uffff\1\26\7\uffff\1\1\6\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\4\1\21\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA116_eot = DFA.unpackEncodedString(DFA116_eotS);
    static final short[] DFA116_eof = DFA.unpackEncodedString(DFA116_eofS);
    static final char[] DFA116_min = DFA.unpackEncodedStringToUnsignedChars(DFA116_minS);
    static final char[] DFA116_max = DFA.unpackEncodedStringToUnsignedChars(DFA116_maxS);
    static final short[] DFA116_accept = DFA.unpackEncodedString(DFA116_acceptS);
    static final short[] DFA116_special = DFA.unpackEncodedString(DFA116_specialS);
    static final short[][] DFA116_transition;

    static {
        int numStates = DFA116_transitionS.length;
        DFA116_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA116_transition[i] = DFA.unpackEncodedString(DFA116_transitionS[i]);
        }
    }

    class DFA116 extends DFA {

        public DFA116(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 116;
            this.eot = DFA116_eot;
            this.eof = DFA116_eof;
            this.min = DFA116_min;
            this.max = DFA116_max;
            this.accept = DFA116_accept;
            this.special = DFA116_special;
            this.transition = DFA116_transition;
        }
        public String getDescription() {
            return "687:4: ( forInit )?";
        }
    }
    static final String DFA117_eotS =
        "\25\uffff";
    static final String DFA117_eofS =
        "\25\uffff";
    static final String DFA117_minS =
        "\1\145\24\uffff";
    static final String DFA117_maxS =
        "\1\u00cb\24\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA117_specialS =
        "\25\uffff}>";
    static final String[] DFA117_transitionS = {
            "\7\1\15\uffff\1\24\7\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "687:19: (fc= expression )?";
        }
    }
    static final String DFA118_eotS =
        "\25\uffff";
    static final String DFA118_eofS =
        "\25\uffff";
    static final String DFA118_minS =
        "\1\145\24\uffff";
    static final String DFA118_maxS =
        "\1\u00cb\24\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA118_specialS =
        "\25\uffff}>";
    static final String[] DFA118_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "687:38: (fu= forUpdate )?";
        }
    }
    static final String DFA121_eotS =
        "\66\uffff";
    static final String DFA121_eofS =
        "\3\uffff\1\5\62\uffff";
    static final String DFA121_minS =
        "\1\145\2\uffff\2\145\22\uffff\2\0\7\uffff\1\0\22\uffff\1\0\2\uffff";
    static final String DFA121_maxS =
        "\1\u00cb\2\uffff\1\u00c8\1\u008a\22\uffff\2\0\7\uffff\1\0\22\uffff"+
        "\1\0\2\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\1\3\uffff\1\2\60\uffff";
    static final String DFA121_specialS =
        "\27\uffff\1\0\1\1\7\uffff\1\2\22\uffff\1\3\2\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\3\6\5\25\uffff\1\5\6\uffff\1\5\10\uffff\1\1\5\uffff\10\4"+
            "\1\uffff\2\5\2\uffff\3\5\1\1\21\uffff\2\5\14\uffff\5\5",
            "",
            "",
            "\1\1\23\uffff\1\5\2\uffff\1\27\1\5\3\uffff\1\40\3\5\5\uffff"+
            "\1\30\1\uffff\1\5\22\uffff\1\5\1\uffff\1\5\27\uffff\20\5",
            "\1\1\26\uffff\1\5\15\uffff\1\63",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "690:1: forInit : ( ( variableModifier )* type variableDeclarators -> ^( VARDEF ^( MODIFIERS ( variableModifier )* ) type variableDeclarators ) | expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA121_23 = input.LA(1);

                         
                        int index121_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_23);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA121_24 = input.LA(1);

                         
                        int index121_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_24);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA121_32 = input.LA(1);

                         
                        int index121_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_32);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA121_51 = input.LA(1);

                         
                        int index121_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 5;}

                         
                        input.seek(index121_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 121, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\162\uffff";
    static final String DFA124_eofS =
        "\1\14\161\uffff";
    static final String DFA124_minS =
        "\1\171\13\0\146\uffff";
    static final String DFA124_maxS =
        "\1\u00bf\13\0\146\uffff";
    static final String DFA124_acceptS =
        "\14\uffff\1\15\31\uffff\1\1\1\uffff\1\2\1\uffff\1\3\1\uffff\1\4"+
        "\1\uffff\1\5\23\uffff\1\6\23\uffff\1\7\23\uffff\1\10\1\uffff\1\11"+
        "\1\uffff\1\12\1\uffff\1\13\1\14";
    static final String DFA124_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\146\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\14\3\uffff\1\4\3\uffff\1\12\1\14\1\13\2\uffff\1\14\4\uffff"+
            "\1\14\1\1\25\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\5\1"+
            "\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "723:3: ( '=' expression -> ^( ASSIGN conditionalExpression expression ) | lc= '+' '=' expression -> ^( ASSIGNOP[$lc] ADD conditionalExpression expression ) | lc= '-' '=' expression -> ^( ASSIGNOP[$lc] SUB conditionalExpression expression ) | lc= '*' '=' expression -> ^( ASSIGNOP[$lc] MUL conditionalExpression expression ) | lc= '/' '=' expression -> ^( ASSIGNOP[$lc] DIV conditionalExpression expression ) | lc= '&=' expression -> ^( ASSIGNOP[$lc] AND conditionalExpression expression ) | lc= '|=' expression -> ^( ASSIGNOP[$lc] OR conditionalExpression expression ) | lc= '^=' expression -> ^( ASSIGNOP[$lc] XOR conditionalExpression expression ) | lc= '%' '=' expression -> ^( ASSIGNOP[$lc] MOD conditionalExpression expression ) | lc= '<' '<' '=' expression -> ^( ASSIGNOP[$lc] SHL conditionalExpression expression ) | lc= '>' '>' '=' expression -> ^( ASSIGNOP[$lc] SHR conditionalExpression expression ) | lc= '>' '>' '>' '=' expression -> ^( ASSIGNOP[$lc] USHR conditionalExpression expression ) | -> conditionalExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA124_1 = input.LA(1);

                         
                        int index124_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred188_Java()) ) {s = 38;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA124_2 = input.LA(1);

                         
                        int index124_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred189_Java()) ) {s = 40;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA124_3 = input.LA(1);

                         
                        int index124_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred190_Java()) ) {s = 42;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA124_4 = input.LA(1);

                         
                        int index124_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred191_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA124_5 = input.LA(1);

                         
                        int index124_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred192_Java()) ) {s = 46;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA124_6 = input.LA(1);

                         
                        int index124_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred193_Java()) ) {s = 66;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA124_7 = input.LA(1);

                         
                        int index124_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred194_Java()) ) {s = 86;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA124_8 = input.LA(1);

                         
                        int index124_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_Java()) ) {s = 106;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA124_9 = input.LA(1);

                         
                        int index124_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred196_Java()) ) {s = 108;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA124_10 = input.LA(1);

                         
                        int index124_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred197_Java()) ) {s = 110;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA124_11 = input.LA(1);

                         
                        int index124_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred198_Java()) ) {s = 112;}

                        else if ( (synpred199_Java()) ) {s = 113;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index124_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 124, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA125_eotS =
        "\24\uffff";
    static final String DFA125_eofS =
        "\1\2\23\uffff";
    static final String DFA125_minS =
        "\1\171\23\uffff";
    static final String DFA125_maxS =
        "\1\u00bf\23\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA125_specialS =
        "\24\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "742:6: ( '?' expression ':' expression -> ^( CONDEXPR conditionalOrExpression expression expression ) | -> conditionalOrExpression )";
        }
    }
    static final String DFA126_eotS =
        "\25\uffff";
    static final String DFA126_eofS =
        "\1\2\24\uffff";
    static final String DFA126_minS =
        "\1\171\24\uffff";
    static final String DFA126_maxS =
        "\1\u00c0\24\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\1\2\22\uffff";
    static final String DFA126_specialS =
        "\25\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\7\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "750:6: ( ( '||' conditionalOrExpression ) -> ^( LOR conditionalAndExpression conditionalOrExpression ) | -> conditionalAndExpression )";
        }
    }
    static final String DFA127_eotS =
        "\26\uffff";
    static final String DFA127_eofS =
        "\1\2\25\uffff";
    static final String DFA127_minS =
        "\1\171\25\uffff";
    static final String DFA127_maxS =
        "\1\u00c1\25\uffff";
    static final String DFA127_acceptS =
        "\1\uffff\1\1\1\2\23\uffff";
    static final String DFA127_specialS =
        "\26\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "758:6: ( ( '&&' conditionalAndExpression ) -> ^( LAND inclusiveOrExpression conditionalAndExpression ) | -> inclusiveOrExpression )";
        }
    }
    static final String DFA128_eotS =
        "\27\uffff";
    static final String DFA128_eofS =
        "\1\2\26\uffff";
    static final String DFA128_minS =
        "\1\171\26\uffff";
    static final String DFA128_maxS =
        "\1\u00c2\26\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\1\1\2\24\uffff";
    static final String DFA128_specialS =
        "\27\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\11\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "766:9: ( ( '|' inclusiveOrExpression ) -> ^( OR exclusiveOrExpression inclusiveOrExpression ) | -> exclusiveOrExpression )";
        }
    }
    static final String DFA129_eotS =
        "\30\uffff";
    static final String DFA129_eofS =
        "\1\2\27\uffff";
    static final String DFA129_minS =
        "\1\171\27\uffff";
    static final String DFA129_maxS =
        "\1\u00c3\27\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\1\2\25\uffff";
    static final String DFA129_specialS =
        "\30\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\2\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\12\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "774:5: ( ( '^' exclusiveOrExpression ) -> ^( XOR andExpression exclusiveOrExpression ) | -> andExpression )";
        }
    }
    static final String DFA130_eotS =
        "\31\uffff";
    static final String DFA130_eofS =
        "\1\2\30\uffff";
    static final String DFA130_minS =
        "\1\171\30\uffff";
    static final String DFA130_maxS =
        "\1\u00c3\30\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\1\1\2\26\uffff";
    static final String DFA130_specialS =
        "\31\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\3\2\1\1\1\uffff\1\2\4\uffff\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\13\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "782:5: ( ( '&' andExpression ) -> ^( AND equalityExpression andExpression ) | -> equalityExpression )";
        }
    }
    static final String DFA131_eotS =
        "\33\uffff";
    static final String DFA131_eofS =
        "\1\3\32\uffff";
    static final String DFA131_minS =
        "\1\171\32\uffff";
    static final String DFA131_maxS =
        "\1\u00c5\32\uffff";
    static final String DFA131_acceptS =
        "\1\uffff\1\1\1\2\1\3\27\uffff";
    static final String DFA131_specialS =
        "\33\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\13\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "790:5: ( ( '==' instanceOfExpression ) -> ^( EQ instanceOfExpression instanceOfExpression ) | ( '!=' instanceOfExpression ) -> ^( NEQ instanceOfExpression instanceOfExpression ) | -> instanceOfExpression )";
        }
    }
    static final String DFA132_eotS =
        "\34\uffff";
    static final String DFA132_eofS =
        "\1\2\33\uffff";
    static final String DFA132_minS =
        "\1\171\33\uffff";
    static final String DFA132_maxS =
        "\1\u00c6\33\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA132_specialS =
        "\34\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\2\3\uffff\1\2\3\uffff\4\2\1\uffff\1\2\4\uffff\2\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\15\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "799:5: ( ( 'instanceof' type ) -> ^( INSTANCEOF relationalExpression type ) | -> relationalExpression )";
        }
    }
    static final String DFA133_eotS =
        "\105\uffff";
    static final String DFA133_eofS =
        "\1\3\104\uffff";
    static final String DFA133_minS =
        "\1\171\2\145\32\uffff\1\0\47\uffff";
    static final String DFA133_maxS =
        "\1\u00c6\2\u00cb\32\uffff\1\0\47\uffff";
    static final String DFA133_acceptS =
        "\3\uffff\1\5\30\uffff\1\1\1\uffff\1\2\21\uffff\1\3\1\uffff\1\4"+
        "\22\uffff";
    static final String DFA133_specialS =
        "\35\uffff\1\0\47\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\36\25\uffff\1\35\6\uffff\1\36\3\uffff\1\34\12\uffff\10"+
            "\36\1\uffff\2\36\2\uffff\3\36\22\uffff\2\36\14\uffff\5\36",
            "\7\62\25\uffff\1\62\1\uffff\1\3\4\uffff\1\62\3\uffff\1\60"+
            "\12\uffff\10\62\1\uffff\2\62\2\uffff\3\62\22\uffff\2\62\14\uffff"+
            "\5\62",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "807:5: ( ( '<' '=' shiftExpression ) -> ^( LTEQ shiftExpression shiftExpression ) | ( '<' shiftExpression ) -> ^( LT shiftExpression shiftExpression ) | ( '>' '=' shiftExpression ) -> ^( GTEQ shiftExpression shiftExpression ) | ( '>' shiftExpression ) -> ^( GT shiftExpression shiftExpression ) | -> shiftExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_29 = input.LA(1);

                         
                        int index133_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred210_Java()) ) {s = 30;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index133_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA137_eotS =
        "\107\uffff";
    static final String DFA137_eofS =
        "\1\3\106\uffff";
    static final String DFA137_minS =
        "\1\171\2\145\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA137_maxS =
        "\1\u00c6\2\u00cb\31\uffff\1\0\23\uffff\1\0\26\uffff";
    static final String DFA137_acceptS =
        "\3\uffff\1\3\101\uffff\1\1\1\2";
    static final String DFA137_specialS =
        "\34\uffff\1\0\23\uffff\1\1\26\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\34\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\60\4\uffff\1\3\3\uffff\1\3\12"+
            "\uffff\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5"+
            "\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "818:5: ( ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+ -> ^( LABINOP additiveExpression ( $i additiveExpression )+ ) | ( '>' '>' '>' additiveExpression )+ -> ^( USHR additiveExpression ( additiveExpression )+ ) | -> additiveExpression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_28 = input.LA(1);

                         
                        int index137_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index137_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA137_48 = input.LA(1);

                         
                        int index137_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred215_Java()) ) {s = 69;}

                        else if ( (synpred217_Java()) ) {s = 70;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index137_48);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\106\uffff";
    static final String DFA135_eofS =
        "\1\3\105\uffff";
    static final String DFA135_minS =
        "\1\171\2\145\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA135_maxS =
        "\1\u00c6\2\u00cb\32\uffff\1\0\23\uffff\1\0\24\uffff";
    static final String DFA135_acceptS =
        "\3\uffff\1\2\101\uffff\1\1";
    static final String DFA135_specialS =
        "\35\uffff\1\0\23\uffff\1\1\24\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\4\uffff"+
            "\2\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3",
            "\7\3\25\uffff\1\35\6\uffff\1\3\3\uffff\1\3\12\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "\7\3\25\uffff\1\3\1\uffff\1\61\4\uffff\1\3\3\uffff\1\3\12"+
            "\uffff\10\3\1\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5"+
            "\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()+ loopback of 819:6: ( (i+= '<' '<' | i+= '>' '>' ) additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_29 = input.LA(1);

                         
                        int index135_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_49 = input.LA(1);

                         
                        int index135_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred214_Java()) ) {s = 69;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index135_49);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA136_eotS =
        "\62\uffff";
    static final String DFA136_eofS =
        "\1\1\61\uffff";
    static final String DFA136_minS =
        "\1\171\1\uffff\1\145\32\uffff\1\0\24\uffff";
    static final String DFA136_maxS =
        "\1\u00c6\1\uffff\1\u00cb\32\uffff\1\0\24\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\2\57\uffff\1\1";
    static final String DFA136_specialS =
        "\35\uffff\1\0\24\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\2\1\1\2\1\1\1\uffff\1\1\4\uffff\2"+
            "\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\16\1",
            "",
            "\7\1\25\uffff\1\1\1\uffff\1\35\4\uffff\1\1\3\uffff\1\1\12"+
            "\uffff\10\1\1\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5"+
            "\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()+ loopback of 821:8: ( '>' '>' '>' additiveExpression )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_29 = input.LA(1);

                         
                        int index136_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred216_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index136_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA140_eotS =
        "\104\uffff";
    static final String DFA140_eofS =
        "\1\3\103\uffff";
    static final String DFA140_minS =
        "\1\171\2\145\101\uffff";
    static final String DFA140_maxS =
        "\1\u00c6\2\u00cb\101\uffff";
    static final String DFA140_acceptS =
        "\3\uffff\1\2\31\uffff\1\1\46\uffff";
    static final String DFA140_specialS =
        "\104\uffff}>";
    static final String[] DFA140_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\1\1\1\2\14\3",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\3\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA140_eot = DFA.unpackEncodedString(DFA140_eotS);
    static final short[] DFA140_eof = DFA.unpackEncodedString(DFA140_eofS);
    static final char[] DFA140_min = DFA.unpackEncodedStringToUnsignedChars(DFA140_minS);
    static final char[] DFA140_max = DFA.unpackEncodedStringToUnsignedChars(DFA140_maxS);
    static final short[] DFA140_accept = DFA.unpackEncodedString(DFA140_acceptS);
    static final short[] DFA140_special = DFA.unpackEncodedString(DFA140_specialS);
    static final short[][] DFA140_transition;

    static {
        int numStates = DFA140_transitionS.length;
        DFA140_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA140_transition[i] = DFA.unpackEncodedString(DFA140_transitionS[i]);
        }
    }

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = DFA140_eot;
            this.eof = DFA140_eof;
            this.min = DFA140_min;
            this.max = DFA140_max;
            this.accept = DFA140_accept;
            this.special = DFA140_special;
            this.transition = DFA140_transition;
        }
        public String getDescription() {
            return "828:5: ( ( (i+= '+' | i+= '-' ) multiplicativeExpression )+ -> ^( LABINOP multiplicativeExpression ( $i multiplicativeExpression )+ ) | -> multiplicativeExpression )";
        }
    }
    static final String DFA139_eotS =
        "\104\uffff";
    static final String DFA139_eofS =
        "\1\1\103\uffff";
    static final String DFA139_minS =
        "\1\171\21\uffff\2\145\60\uffff";
    static final String DFA139_maxS =
        "\1\u00c6\21\uffff\2\u00cb\60\uffff";
    static final String DFA139_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\46\uffff";
    static final String DFA139_specialS =
        "\104\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\1\3\uffff\1\1\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\1\22\1\23\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "()+ loopback of 829:6: ( (i+= '+' | i+= '-' ) multiplicativeExpression )+";
        }
    }
    static final String DFA143_eotS =
        "\130\uffff";
    static final String DFA143_eofS =
        "\1\4\127\uffff";
    static final String DFA143_minS =
        "\1\171\3\145\124\uffff";
    static final String DFA143_maxS =
        "\1\u00c6\3\u00cb\124\uffff";
    static final String DFA143_acceptS =
        "\4\uffff\1\2\30\uffff\1\1\72\uffff";
    static final String DFA143_specialS =
        "\130\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\4\3\uffff\1\1\3\uffff\4\4\1\uffff\1\4\4\uffff\2\4\22\uffff"+
            "\1\4\2\uffff\1\4\7\uffff\1\4\16\uffff\2\4\1\2\3\4\1\3\7\4",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\4\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "836:5: ( ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+ -> ^( LABINOP unaryExpression ( $i unaryExpression )+ ) | -> unaryExpression )";
        }
    }
    static final String DFA142_eotS =
        "\130\uffff";
    static final String DFA142_eofS =
        "\1\1\127\uffff";
    static final String DFA142_minS =
        "\1\171\23\uffff\2\145\3\uffff\1\145\76\uffff";
    static final String DFA142_maxS =
        "\1\u00c6\23\uffff\2\u00cb\3\uffff\1\u00cb\76\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\72\uffff";
    static final String DFA142_specialS =
        "\130\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\1\3\uffff\1\24\3\uffff\4\1\1\uffff\1\1\4\uffff\2\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\2\1\1\25\3\1\1\31\7\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "\7\35\25\uffff\1\35\6\uffff\1\35\3\uffff\1\1\12\uffff\10\35"+
            "\1\uffff\2\35\2\uffff\3\35\22\uffff\2\35\14\uffff\5\35",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "()+ loopback of 837:6: ( (i+= '*' | i+= '/' | i+= '%' ) unaryExpression )+";
        }
    }
    static final String DFA144_eotS =
        "\24\uffff";
    static final String DFA144_eofS =
        "\24\uffff";
    static final String DFA144_minS =
        "\1\145\23\uffff";
    static final String DFA144_maxS =
        "\1\u00cb\23\uffff";
    static final String DFA144_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\16\uffff";
    static final String DFA144_specialS =
        "\24\uffff}>";
    static final String[] DFA144_transitionS = {
            "\7\5\25\uffff\1\5\6\uffff\1\5\16\uffff\10\5\1\uffff\2\5\2\uffff"+
            "\3\5\22\uffff\1\1\1\2\14\uffff\1\3\1\4\3\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "842:1: unaryExpression : ( '+' unaryExpression -> unaryExpression | '-' unaryExpression -> ^( NEG unaryExpression ) | '++' unaryExpression -> ^( PREINC unaryExpression ) | '--' unaryExpression -> ^( PREDEC unaryExpression ) | unaryExpressionNotPlusMinus -> unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA148_eotS =
        "\44\uffff";
    static final String DFA148_eofS =
        "\44\uffff";
    static final String DFA148_minS =
        "\1\145\2\uffff\1\145\14\uffff\23\0\1\uffff";
    static final String DFA148_maxS =
        "\1\u00cb\2\uffff\1\u00cb\14\uffff\23\0\1\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\36\uffff\1\3";
    static final String DFA148_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA148_transitionS = {
            "\7\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff\1\4\1\3"+
            "\2\uffff\3\4\42\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\20\1\33\1\34\1\35\3\32\25\uffff\1\31\6\uffff\1\41\16\uffff"+
            "\10\21\1\uffff\1\42\1\30\2\uffff\1\37\2\36\22\uffff\1\22\1\23"+
            "\14\uffff\1\24\1\25\1\26\1\27\1\40",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "850:1: unaryExpressionNotPlusMinus : ( '~' unaryExpression -> ^( INV unaryExpression ) | '!' unaryExpression -> ^( NOT unaryExpression ) | castExpression | primary ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_16 = input.LA(1);

                         
                        int index148_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_17 = input.LA(1);

                         
                        int index148_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA148_18 = input.LA(1);

                         
                        int index148_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA148_19 = input.LA(1);

                         
                        int index148_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA148_20 = input.LA(1);

                         
                        int index148_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_20);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA148_21 = input.LA(1);

                         
                        int index148_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA148_22 = input.LA(1);

                         
                        int index148_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_22);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA148_23 = input.LA(1);

                         
                        int index148_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_23);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA148_24 = input.LA(1);

                         
                        int index148_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_24);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA148_25 = input.LA(1);

                         
                        int index148_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_25);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA148_26 = input.LA(1);

                         
                        int index148_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA148_27 = input.LA(1);

                         
                        int index148_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_27);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA148_28 = input.LA(1);

                         
                        int index148_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_28);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA148_29 = input.LA(1);

                         
                        int index148_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_29);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA148_30 = input.LA(1);

                         
                        int index148_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_30);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA148_31 = input.LA(1);

                         
                        int index148_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_31);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA148_32 = input.LA(1);

                         
                        int index148_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_32);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA148_33 = input.LA(1);

                         
                        int index148_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_33);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA148_34 = input.LA(1);

                         
                        int index148_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred231_Java()) ) {s = 35;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index148_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA147_eotS =
        "\40\uffff";
    static final String DFA147_eofS =
        "\1\5\37\uffff";
    static final String DFA147_minS =
        "\1\171\37\uffff";
    static final String DFA147_maxS =
        "\1\u00c8\37\uffff";
    static final String DFA147_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\32\uffff";
    static final String DFA147_specialS =
        "\40\uffff}>";
    static final String[] DFA147_transitionS = {
            "\1\5\2\uffff\1\1\1\5\3\uffff\4\5\1\uffff\1\5\3\uffff\1\1\2"+
            "\5\22\uffff\1\5\2\uffff\1\5\7\uffff\1\5\16\uffff\16\5\1\3\1"+
            "\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA147_eot = DFA.unpackEncodedString(DFA147_eotS);
    static final short[] DFA147_eof = DFA.unpackEncodedString(DFA147_eofS);
    static final char[] DFA147_min = DFA.unpackEncodedStringToUnsignedChars(DFA147_minS);
    static final char[] DFA147_max = DFA.unpackEncodedStringToUnsignedChars(DFA147_maxS);
    static final short[] DFA147_accept = DFA.unpackEncodedString(DFA147_acceptS);
    static final short[] DFA147_special = DFA.unpackEncodedString(DFA147_specialS);
    static final short[][] DFA147_transition;

    static {
        int numStates = DFA147_transitionS.length;
        DFA147_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA147_transition[i] = DFA.unpackEncodedString(DFA147_transitionS[i]);
        }
    }

    class DFA147 extends DFA {

        public DFA147(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 147;
            this.eot = DFA147_eot;
            this.eof = DFA147_eof;
            this.min = DFA147_min;
            this.max = DFA147_max;
            this.accept = DFA147_accept;
            this.special = DFA147_special;
            this.transition = DFA147_transition;
        }
        public String getDescription() {
            return "855:3: ( ( selector )+ ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) ) | '++' -> ^( POSTINC primary ) | '--' -> ^( POSTDEC primary ) | -> primary )";
        }
    }
    static final String DFA145_eotS =
        "\40\uffff";
    static final String DFA145_eofS =
        "\1\1\37\uffff";
    static final String DFA145_minS =
        "\1\171\37\uffff";
    static final String DFA145_maxS =
        "\1\u00c8\37\uffff";
    static final String DFA145_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\1\uffff";
    static final String DFA145_specialS =
        "\40\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\1\2\uffff\1\36\1\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\36"+
            "\2\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()+ loopback of 856:4: ( selector )+";
        }
    }
    static final String DFA146_eotS =
        "\36\uffff";
    static final String DFA146_eofS =
        "\1\3\35\uffff";
    static final String DFA146_minS =
        "\1\171\35\uffff";
    static final String DFA146_maxS =
        "\1\u00c8\35\uffff";
    static final String DFA146_acceptS =
        "\1\uffff\1\1\1\2\1\3\32\uffff";
    static final String DFA146_specialS =
        "\36\uffff}>";
    static final String[] DFA146_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\4\uffff\2\3\22\uffff"+
            "\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\16\3\1\1\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA146_eot = DFA.unpackEncodedString(DFA146_eotS);
    static final short[] DFA146_eof = DFA.unpackEncodedString(DFA146_eofS);
    static final char[] DFA146_min = DFA.unpackEncodedStringToUnsignedChars(DFA146_minS);
    static final char[] DFA146_max = DFA.unpackEncodedStringToUnsignedChars(DFA146_maxS);
    static final short[] DFA146_accept = DFA.unpackEncodedString(DFA146_acceptS);
    static final short[] DFA146_special = DFA.unpackEncodedString(DFA146_specialS);
    static final short[][] DFA146_transition;

    static {
        int numStates = DFA146_transitionS.length;
        DFA146_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA146_transition[i] = DFA.unpackEncodedString(DFA146_transitionS[i]);
        }
    }

    class DFA146 extends DFA {

        public DFA146(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 146;
            this.eot = DFA146_eot;
            this.eof = DFA146_eof;
            this.min = DFA146_min;
            this.max = DFA146_max;
            this.accept = DFA146_accept;
            this.special = DFA146_special;
            this.transition = DFA146_transition;
        }
        public String getDescription() {
            return "857:4: ( '++' -> ^( POSTINC ^( SELECTOR primary ( selector )+ ) ) | '--' -> ^( POSTDEC ^( SELECTOR primary ( selector )+ ) ) | -> ^( SELECTOR primary ( selector )+ ) )";
        }
    }
    static final String DFA149_eotS =
        "\27\uffff";
    static final String DFA149_eofS =
        "\27\uffff";
    static final String DFA149_minS =
        "\1\u00a1\1\145\2\0\23\uffff";
    static final String DFA149_maxS =
        "\1\u00a1\1\u00cb\2\0\23\uffff";
    static final String DFA149_acceptS =
        "\4\uffff\1\3\20\uffff\1\2\1\1";
    static final String DFA149_specialS =
        "\2\uffff\1\0\1\1\23\uffff}>";
    static final String[] DFA149_transitionS = {
            "\1\1",
            "\1\2\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\3\1\uffff\2"+
            "\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA149_eot = DFA.unpackEncodedString(DFA149_eotS);
    static final short[] DFA149_eof = DFA.unpackEncodedString(DFA149_eofS);
    static final char[] DFA149_min = DFA.unpackEncodedStringToUnsignedChars(DFA149_minS);
    static final char[] DFA149_max = DFA.unpackEncodedStringToUnsignedChars(DFA149_maxS);
    static final short[] DFA149_accept = DFA.unpackEncodedString(DFA149_acceptS);
    static final short[] DFA149_special = DFA.unpackEncodedString(DFA149_specialS);
    static final short[][] DFA149_transition;

    static {
        int numStates = DFA149_transitionS.length;
        DFA149_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA149_transition[i] = DFA.unpackEncodedString(DFA149_transitionS[i]);
        }
    }

    class DFA149 extends DFA {

        public DFA149(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 149;
            this.eot = DFA149_eot;
            this.eof = DFA149_eof;
            this.min = DFA149_min;
            this.max = DFA149_max;
            this.accept = DFA149_accept;
            this.special = DFA149_special;
            this.transition = DFA149_transition;
        }
        public String getDescription() {
            return "868:1: castExpression : ( '(' primitiveType ')' unaryExpression -> ^( CAST ^( TYPE primitiveType ) unaryExpression ) | '(' type ')' unaryExpressionNotPlusMinus -> ^( CAST type unaryExpressionNotPlusMinus ) | '(' expression ')' unaryExpressionNotPlusMinus ->);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA149_2 = input.LA(1);

                         
                        int index149_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA149_3 = input.LA(1);

                         
                        int index149_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 22;}

                        else if ( (synpred239_Java()) ) {s = 21;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index149_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 149, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\61\uffff";
    static final String DFA163_eofS =
        "\12\uffff\1\21\46\uffff";
    static final String DFA163_minS =
        "\1\145\10\uffff\1\145\1\171\3\uffff\1\0\3\uffff\2\0\7\uffff\1\0"+
        "\25\uffff";
    static final String DFA163_maxS =
        "\1\u00cb\10\uffff\1\u009e\1\u00c8\3\uffff\1\0\3\uffff\2\0\7\uffff"+
        "\1\0\25\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\1\1\2\1\3\7\uffff\1\6\1\7\1\10\1\uffff\1\4\1\5\1\11"+
        "\37\uffff";
    static final String DFA163_specialS =
        "\16\uffff\1\0\3\uffff\1\1\1\2\7\uffff\1\3\25\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\12\6\3\25\uffff\1\2\6\uffff\1\14\16\uffff\10\13\1\uffff"+
            "\1\15\1\1\2\uffff\3\3\44\uffff\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\33\uffff\1\16\25\uffff\10\17",
            "\1\21\2\uffff\1\22\1\21\3\uffff\1\33\3\21\1\uffff\1\21\3\uffff"+
            "\1\23\2\21\22\uffff\1\21\1\uffff\2\21\7\uffff\1\21\16\uffff"+
            "\20\21",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "874:1: primary : ( parExpression | nonWildcardTypeArguments explicitGenericInvocationSuffix -> ^( INVOKE ^( TYPE_PARAMETER nonWildcardTypeArguments ) explicitGenericInvocationSuffix ) | literal | 'new' ( nonWildcardTypeArguments )? primitiveType ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) ) | 'new' ( nonWildcardTypeArguments )? (i+= refComponent ( '.' i+= refComponent )* ) ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) ) | type '.' 'class' -> ^( GETCLASS type ) | lc= 'void' '.' 'class' -> ^( GETCLASS ^( TYPE VOID[$lc] ) ) | 'super' ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) ) | Identifier ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) ) );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_14 = input.LA(1);

                         
                        int index163_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_Java()) ) {s = 15;}

                        else if ( (synpred256_Java()) ) {s = 16;}

                         
                        input.seek(index163_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_18 = input.LA(1);

                         
                        int index163_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index163_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA163_19 = input.LA(1);

                         
                        int index163_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index163_19);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA163_27 = input.LA(1);

                         
                        int index163_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred257_Java()) ) {s = 11;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index163_27);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA154_eotS =
        "\26\uffff";
    static final String DFA154_eofS =
        "\26\uffff";
    static final String DFA154_minS =
        "\1\u008a\1\145\24\uffff";
    static final String DFA154_maxS =
        "\1\u008a\1\u00cb\24\uffff";
    static final String DFA154_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA154_specialS =
        "\26\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "879:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE primitiveType ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE primitiveType ( '[' )* ) arrayInitializer ) )";
        }
    }
    static final String DFA151_eotS =
        "\65\uffff";
    static final String DFA151_eofS =
        "\1\2\64\uffff";
    static final String DFA151_minS =
        "\1\171\1\145\37\uffff\23\0\1\uffff";
    static final String DFA151_maxS =
        "\1\u00c8\1\u00cb\37\uffff\23\0\1\uffff";
    static final String DFA151_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA151_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "()+ loopback of 880:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA151_33 = input.LA(1);

                         
                        int index151_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA151_34 = input.LA(1);

                         
                        int index151_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA151_35 = input.LA(1);

                         
                        int index151_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA151_36 = input.LA(1);

                         
                        int index151_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA151_37 = input.LA(1);

                         
                        int index151_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA151_38 = input.LA(1);

                         
                        int index151_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA151_39 = input.LA(1);

                         
                        int index151_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA151_40 = input.LA(1);

                         
                        int index151_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA151_41 = input.LA(1);

                         
                        int index151_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA151_42 = input.LA(1);

                         
                        int index151_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA151_43 = input.LA(1);

                         
                        int index151_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA151_44 = input.LA(1);

                         
                        int index151_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA151_45 = input.LA(1);

                         
                        int index151_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA151_46 = input.LA(1);

                         
                        int index151_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA151_47 = input.LA(1);

                         
                        int index151_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA151_48 = input.LA(1);

                         
                        int index151_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA151_49 = input.LA(1);

                         
                        int index151_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA151_50 = input.LA(1);

                         
                        int index151_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA151_51 = input.LA(1);

                         
                        int index151_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred244_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index151_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 151, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\64\uffff";
    static final String DFA152_eofS =
        "\1\1\63\uffff";
    static final String DFA152_minS =
        "\1\171\1\uffff\1\145\61\uffff";
    static final String DFA152_maxS =
        "\1\u00c8\1\uffff\1\u00cb\61\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA152_specialS =
        "\64\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()* loopback of 880:29: ( '[' ']' )*";
        }
    }
    static final String DFA160_eotS =
        "\27\uffff";
    static final String DFA160_eofS =
        "\27\uffff";
    static final String DFA160_minS =
        "\1\u008a\1\145\25\uffff";
    static final String DFA160_maxS =
        "\1\u00a1\1\u00cb\25\uffff";
    static final String DFA160_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA160_specialS =
        "\27\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1"+
            "\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "884:6: ( ( '[' expression ']' )+ ( '[' ']' )* -> ^( NEW ^( TYPE ( $i)+ ( '[' )* ) ( expression )* ) | ( '[' ']' )+ arrayInitializer -> ^( ARRAYINIT ^( TYPE ( $i)+ ( '[' )* ) arrayInitializer ) | classCreatorRest -> ^( NEW ^( TYPE ( $i)+ ) ( classCreatorRest )? ) )";
        }
    }
    static final String DFA157_eotS =
        "\65\uffff";
    static final String DFA157_eofS =
        "\1\2\64\uffff";
    static final String DFA157_minS =
        "\1\171\1\145\37\uffff\23\0\1\uffff";
    static final String DFA157_maxS =
        "\1\u00c8\1\u00cb\37\uffff\23\0\1\uffff";
    static final String DFA157_acceptS =
        "\2\uffff\1\2\61\uffff\1\1";
    static final String DFA157_specialS =
        "\41\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\uffff}>";
    static final String[] DFA157_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\1\1\2\2\22"+
            "\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "\1\60\1\52\1\53\1\54\3\51\25\uffff\1\50\6\uffff\1\62\2\uffff"+
            "\1\2\13\uffff\10\61\1\uffff\1\63\1\47\2\uffff\1\56\2\55\22\uffff"+
            "\1\41\1\42\14\uffff\1\43\1\44\1\45\1\46\1\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA157_eot = DFA.unpackEncodedString(DFA157_eotS);
    static final short[] DFA157_eof = DFA.unpackEncodedString(DFA157_eofS);
    static final char[] DFA157_min = DFA.unpackEncodedStringToUnsignedChars(DFA157_minS);
    static final char[] DFA157_max = DFA.unpackEncodedStringToUnsignedChars(DFA157_maxS);
    static final short[] DFA157_accept = DFA.unpackEncodedString(DFA157_acceptS);
    static final short[] DFA157_special = DFA.unpackEncodedString(DFA157_specialS);
    static final short[][] DFA157_transition;

    static {
        int numStates = DFA157_transitionS.length;
        DFA157_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA157_transition[i] = DFA.unpackEncodedString(DFA157_transitionS[i]);
        }
    }

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = DFA157_eot;
            this.eof = DFA157_eof;
            this.min = DFA157_min;
            this.max = DFA157_max;
            this.accept = DFA157_accept;
            this.special = DFA157_special;
            this.transition = DFA157_transition;
        }
        public String getDescription() {
            return "()+ loopback of 885:7: ( '[' expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_33 = input.LA(1);

                         
                        int index157_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA157_34 = input.LA(1);

                         
                        int index157_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA157_35 = input.LA(1);

                         
                        int index157_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA157_36 = input.LA(1);

                         
                        int index157_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_36);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA157_37 = input.LA(1);

                         
                        int index157_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_37);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA157_38 = input.LA(1);

                         
                        int index157_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_38);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA157_39 = input.LA(1);

                         
                        int index157_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_39);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA157_40 = input.LA(1);

                         
                        int index157_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA157_41 = input.LA(1);

                         
                        int index157_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_41);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA157_42 = input.LA(1);

                         
                        int index157_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_42);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA157_43 = input.LA(1);

                         
                        int index157_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_43);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA157_44 = input.LA(1);

                         
                        int index157_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_44);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA157_45 = input.LA(1);

                         
                        int index157_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_45);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA157_46 = input.LA(1);

                         
                        int index157_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA157_47 = input.LA(1);

                         
                        int index157_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_47);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA157_48 = input.LA(1);

                         
                        int index157_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_48);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA157_49 = input.LA(1);

                         
                        int index157_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA157_50 = input.LA(1);

                         
                        int index157_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_50);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA157_51 = input.LA(1);

                         
                        int index157_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_Java()) ) {s = 52;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index157_51);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA158_eotS =
        "\64\uffff";
    static final String DFA158_eofS =
        "\1\1\63\uffff";
    static final String DFA158_minS =
        "\1\171\1\uffff\1\145\61\uffff";
    static final String DFA158_maxS =
        "\1\u00c8\1\uffff\1\u00cb\61\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\2\36\uffff\1\1\23\uffff";
    static final String DFA158_specialS =
        "\64\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\3\uffff\1\2\2\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\20\1",
            "",
            "\7\1\25\uffff\1\1\6\uffff\1\1\2\uffff\1\40\13\uffff\10\1\1"+
            "\uffff\2\1\2\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 885:29: ( '[' ']' )*";
        }
    }
    static final String DFA161_eotS =
        "\41\uffff";
    static final String DFA161_eofS =
        "\1\2\40\uffff";
    static final String DFA161_minS =
        "\1\171\40\uffff";
    static final String DFA161_maxS =
        "\1\u00c8\40\uffff";
    static final String DFA161_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA161_specialS =
        "\41\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "892:3: ( arguments -> ^( INVOKE 'super' ( arguments )? ) | -> ^( VAR 'super' ) )";
        }
    }
    static final String DFA162_eotS =
        "\41\uffff";
    static final String DFA162_eofS =
        "\1\2\40\uffff";
    static final String DFA162_minS =
        "\1\171\40\uffff";
    static final String DFA162_maxS =
        "\1\u00c8\40\uffff";
    static final String DFA162_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA162_specialS =
        "\41\uffff}>";
    static final String[] DFA162_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA162_eot = DFA.unpackEncodedString(DFA162_eotS);
    static final short[] DFA162_eof = DFA.unpackEncodedString(DFA162_eofS);
    static final char[] DFA162_min = DFA.unpackEncodedStringToUnsignedChars(DFA162_minS);
    static final char[] DFA162_max = DFA.unpackEncodedStringToUnsignedChars(DFA162_maxS);
    static final short[] DFA162_accept = DFA.unpackEncodedString(DFA162_acceptS);
    static final short[] DFA162_special = DFA.unpackEncodedString(DFA162_specialS);
    static final short[][] DFA162_transition;

    static {
        int numStates = DFA162_transitionS.length;
        DFA162_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA162_transition[i] = DFA.unpackEncodedString(DFA162_transitionS[i]);
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = DFA162_eot;
            this.eof = DFA162_eof;
            this.min = DFA162_min;
            this.max = DFA162_max;
            this.accept = DFA162_accept;
            this.special = DFA162_special;
            this.transition = DFA162_transition;
        }
        public String getDescription() {
            return "897:6: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( VAR Identifier ) )";
        }
    }
    static final String DFA164_eotS =
        "\41\uffff";
    static final String DFA164_eofS =
        "\1\2\40\uffff";
    static final String DFA164_minS =
        "\1\171\40\uffff";
    static final String DFA164_maxS =
        "\1\u00c8\40\uffff";
    static final String DFA164_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA164_specialS =
        "\41\uffff}>";
    static final String[] DFA164_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\1\1\2\3\uffff\3\2\22\uffff\1"+
            "\2\2\uffff\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA164_eot = DFA.unpackEncodedString(DFA164_eotS);
    static final short[] DFA164_eof = DFA.unpackEncodedString(DFA164_eofS);
    static final char[] DFA164_min = DFA.unpackEncodedStringToUnsignedChars(DFA164_minS);
    static final char[] DFA164_max = DFA.unpackEncodedStringToUnsignedChars(DFA164_maxS);
    static final short[] DFA164_accept = DFA.unpackEncodedString(DFA164_acceptS);
    static final short[] DFA164_special = DFA.unpackEncodedString(DFA164_specialS);
    static final short[][] DFA164_transition;

    static {
        int numStates = DFA164_transitionS.length;
        DFA164_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA164_transition[i] = DFA.unpackEncodedString(DFA164_transitionS[i]);
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = DFA164_eot;
            this.eof = DFA164_eof;
            this.min = DFA164_min;
            this.max = DFA164_max;
            this.accept = DFA164_accept;
            this.special = DFA164_special;
            this.transition = DFA164_transition;
        }
        public String getDescription() {
            return "908:14: ( classBody )?";
        }
    }
    static final String DFA166_eotS =
        "\41\uffff";
    static final String DFA166_eofS =
        "\1\2\40\uffff";
    static final String DFA166_minS =
        "\1\171\40\uffff";
    static final String DFA166_maxS =
        "\1\u00c8\40\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA166_specialS =
        "\41\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "926:21: ( arguments )?";
        }
    }
    static final String DFA169_eotS =
        "\41\uffff";
    static final String DFA169_eofS =
        "\1\2\40\uffff";
    static final String DFA169_minS =
        "\1\171\40\uffff";
    static final String DFA169_maxS =
        "\1\u00c8\40\uffff";
    static final String DFA169_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA169_specialS =
        "\41\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\3\uffff\3\2\22\uffff"+
            "\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\20\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "934:3: ( arguments -> ^( INVOKE Identifier ( arguments )? ) | -> ^( DEREF Identifier ) )";
        }
    }
    static final String DFA171_eotS =
        "\25\uffff";
    static final String DFA171_eofS =
        "\25\uffff";
    static final String DFA171_minS =
        "\1\145\24\uffff";
    static final String DFA171_maxS =
        "\1\u00cb\24\uffff";
    static final String DFA171_acceptS =
        "\1\uffff\1\1\22\uffff\1\2";
    static final String DFA171_specialS =
        "\25\uffff}>";
    static final String[] DFA171_transitionS = {
            "\7\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff\2\1\1\24"+
            "\1\uffff\3\1\22\uffff\2\1\14\uffff\5\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA171_eot = DFA.unpackEncodedString(DFA171_eotS);
    static final short[] DFA171_eof = DFA.unpackEncodedString(DFA171_eofS);
    static final char[] DFA171_min = DFA.unpackEncodedStringToUnsignedChars(DFA171_minS);
    static final char[] DFA171_max = DFA.unpackEncodedStringToUnsignedChars(DFA171_maxS);
    static final short[] DFA171_accept = DFA.unpackEncodedString(DFA171_acceptS);
    static final short[] DFA171_special = DFA.unpackEncodedString(DFA171_specialS);
    static final short[][] DFA171_transition;

    static {
        int numStates = DFA171_transitionS.length;
        DFA171_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA171_transition[i] = DFA.unpackEncodedString(DFA171_transitionS[i]);
        }
    }

    class DFA171 extends DFA {

        public DFA171(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 171;
            this.eot = DFA171_eot;
            this.eof = DFA171_eof;
            this.min = DFA171_min;
            this.max = DFA171_max;
            this.accept = DFA171_accept;
            this.special = DFA171_special;
            this.transition = DFA171_transition;
        }
        public String getDescription() {
            return "942:9: ( expressionList )?";
        }
    }
    static final String DFA212_eotS =
        "\26\uffff";
    static final String DFA212_eofS =
        "\26\uffff";
    static final String DFA212_minS =
        "\1\u008a\1\145\24\uffff";
    static final String DFA212_maxS =
        "\1\u008a\1\u00cb\24\uffff";
    static final String DFA212_acceptS =
        "\2\uffff\1\2\1\1\22\uffff";
    static final String DFA212_specialS =
        "\26\uffff}>";
    static final String[] DFA212_transitionS = {
            "\1\1",
            "\7\3\25\uffff\1\3\6\uffff\1\3\2\uffff\1\2\13\uffff\10\3\1"+
            "\uffff\2\3\2\uffff\3\3\22\uffff\2\3\14\uffff\5\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
    static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
    static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
    static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
    static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
    static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
    static final short[][] DFA212_transition;

    static {
        int numStates = DFA212_transitionS.length;
        DFA212_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
        }
    }

    class DFA212 extends DFA {

        public DFA212(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 212;
            this.eot = DFA212_eot;
            this.eof = DFA212_eof;
            this.min = DFA212_min;
            this.max = DFA212_max;
            this.accept = DFA212_accept;
            this.special = DFA212_special;
            this.transition = DFA212_transition;
        }
        public String getDescription() {
            return "879:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer )";
        }
    }
    static final String DFA209_eotS =
        "\27\uffff";
    static final String DFA209_eofS =
        "\1\2\26\uffff";
    static final String DFA209_minS =
        "\1\u008a\1\145\25\uffff";
    static final String DFA209_maxS =
        "\1\u008a\1\u00cb\25\uffff";
    static final String DFA209_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA209_specialS =
        "\27\uffff}>";
    static final String[] DFA209_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1"+
            "\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA209_eot = DFA.unpackEncodedString(DFA209_eotS);
    static final short[] DFA209_eof = DFA.unpackEncodedString(DFA209_eofS);
    static final char[] DFA209_min = DFA.unpackEncodedStringToUnsignedChars(DFA209_minS);
    static final char[] DFA209_max = DFA.unpackEncodedStringToUnsignedChars(DFA209_maxS);
    static final short[] DFA209_accept = DFA.unpackEncodedString(DFA209_acceptS);
    static final short[] DFA209_special = DFA.unpackEncodedString(DFA209_specialS);
    static final short[][] DFA209_transition;

    static {
        int numStates = DFA209_transitionS.length;
        DFA209_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA209_transition[i] = DFA.unpackEncodedString(DFA209_transitionS[i]);
        }
    }

    class DFA209 extends DFA {

        public DFA209(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 209;
            this.eot = DFA209_eot;
            this.eof = DFA209_eof;
            this.min = DFA209_min;
            this.max = DFA209_max;
            this.accept = DFA209_accept;
            this.special = DFA209_special;
            this.transition = DFA209_transition;
        }
        public String getDescription() {
            return "()+ loopback of 880:7: ( '[' expression ']' )+";
        }
    }
    static final String DFA221_eotS =
        "\27\uffff";
    static final String DFA221_eofS =
        "\27\uffff";
    static final String DFA221_minS =
        "\1\u008a\1\145\25\uffff";
    static final String DFA221_maxS =
        "\1\u00a1\1\u00cb\25\uffff";
    static final String DFA221_acceptS =
        "\2\uffff\1\3\1\2\1\1\22\uffff";
    static final String DFA221_specialS =
        "\27\uffff}>";
    static final String[] DFA221_transitionS = {
            "\1\1\26\uffff\1\2",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\3\13\uffff\10\4\1"+
            "\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA221_eot = DFA.unpackEncodedString(DFA221_eotS);
    static final short[] DFA221_eof = DFA.unpackEncodedString(DFA221_eofS);
    static final char[] DFA221_min = DFA.unpackEncodedStringToUnsignedChars(DFA221_minS);
    static final char[] DFA221_max = DFA.unpackEncodedStringToUnsignedChars(DFA221_maxS);
    static final short[] DFA221_accept = DFA.unpackEncodedString(DFA221_acceptS);
    static final short[] DFA221_special = DFA.unpackEncodedString(DFA221_specialS);
    static final short[][] DFA221_transition;

    static {
        int numStates = DFA221_transitionS.length;
        DFA221_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA221_transition[i] = DFA.unpackEncodedString(DFA221_transitionS[i]);
        }
    }

    class DFA221 extends DFA {

        public DFA221(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 221;
            this.eot = DFA221_eot;
            this.eof = DFA221_eof;
            this.min = DFA221_min;
            this.max = DFA221_max;
            this.accept = DFA221_accept;
            this.special = DFA221_special;
            this.transition = DFA221_transition;
        }
        public String getDescription() {
            return "884:6: ( ( '[' expression ']' )+ ( '[' ']' )* | ( '[' ']' )+ arrayInitializer | classCreatorRest )";
        }
    }
    static final String DFA218_eotS =
        "\27\uffff";
    static final String DFA218_eofS =
        "\1\2\26\uffff";
    static final String DFA218_minS =
        "\1\u008a\1\145\25\uffff";
    static final String DFA218_maxS =
        "\1\u008a\1\u00cb\25\uffff";
    static final String DFA218_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\22\uffff";
    static final String DFA218_specialS =
        "\27\uffff}>";
    static final String[] DFA218_transitionS = {
            "\1\1",
            "\7\4\25\uffff\1\4\6\uffff\1\4\2\uffff\1\2\13\uffff\10\4\1"+
            "\uffff\2\4\2\uffff\3\4\22\uffff\2\4\14\uffff\5\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA218_eot = DFA.unpackEncodedString(DFA218_eotS);
    static final short[] DFA218_eof = DFA.unpackEncodedString(DFA218_eofS);
    static final char[] DFA218_min = DFA.unpackEncodedStringToUnsignedChars(DFA218_minS);
    static final char[] DFA218_max = DFA.unpackEncodedStringToUnsignedChars(DFA218_maxS);
    static final short[] DFA218_accept = DFA.unpackEncodedString(DFA218_acceptS);
    static final short[] DFA218_special = DFA.unpackEncodedString(DFA218_specialS);
    static final short[][] DFA218_transition;

    static {
        int numStates = DFA218_transitionS.length;
        DFA218_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA218_transition[i] = DFA.unpackEncodedString(DFA218_transitionS[i]);
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = DFA218_eot;
            this.eof = DFA218_eof;
            this.min = DFA218_min;
            this.max = DFA218_max;
            this.accept = DFA218_accept;
            this.special = DFA218_special;
            this.transition = DFA218_transition;
        }
        public String getDescription() {
            return "()+ loopback of 885:7: ( '[' expression ']' )+";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit475 = new BitSet(new long[]{0x0000000000000402L,0x4F00000000000000L,0x00000080007FE080L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit478 = new BitSet(new long[]{0x0000000000000402L,0x4E00000000000000L,0x00000080007FE080L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit481 = new BitSet(new long[]{0x0000000000000402L,0x4E00000000000000L,0x00000080007FE080L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit484 = new BitSet(new long[]{0x0000000000000402L,0x4A00000000000000L,0x00000080007FE080L});
    public static final BitSet FOLLOW_120_in_packageDeclaration518 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration520 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_packageDeclaration522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_122_in_importDeclaration542 = new BitSet(new long[]{0x0000000000000000L,0x0800002000000000L});
    public static final BitSet FOLLOW_123_in_importDeclaration549 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration553 = new BitSet(new long[]{0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_124_in_importDeclaration556 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration560 = new BitSet(new long[]{0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_124_in_importDeclaration565 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_importDeclaration569 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration592 = new BitSet(new long[]{0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_124_in_importDeclaration595 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration599 = new BitSet(new long[]{0x0000000000000000L,0x1200000000000000L});
    public static final BitSet FOLLOW_124_in_importDeclaration604 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_importDeclaration608 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_importDeclaration612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_typeDeclaration649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration661 = new BitSet(new long[]{0x0000000000000400L,0x4800000000000000L,0x00000080007FE080L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classOrInterfaceDeclaration689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_classOrInterfaceDeclaration710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_classOrInterfaceDeclaration731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_126_in_classDeclaration763 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_classDeclaration765 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_typeParameters_in_classDeclaration768 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_127_in_classDeclaration781 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_type_in_classDeclaration783 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_128_in_classDeclaration797 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_classDeclaration799 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_classBody_in_classDeclaration811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_typeParameters848 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_130_in_typeParameters855 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_131_in_typeParameters863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter882 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_127_in_typeParameter885 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_bound_in_typeParameter887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_bound924 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_type_in_bound928 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration947 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000021L});
    public static final BitSet FOLLOW_128_in_enumDeclaration952 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration954 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000021L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_enumBody984 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L,0x0000008000000044L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody986 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_130_in_enumBody989 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_enumBody995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1014 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_enumConstants1017 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotations_in_enumConstant1038 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant1041 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000200000023L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1044 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_enumBodyDeclarations1084 = new BitSet(new long[]{0x0000000000000402L,0x4A00002000000000L,0x000000807FFFE1A2L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1087 = new BitSet(new long[]{0x0000000000000402L,0x4A00002000000000L,0x000000807FFFE1A2L});
    public static final BitSet FOLLOW_135_in_normalInterfaceDeclaration1106 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration1108 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1110 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_127_in_normalInterfaceDeclaration1114 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1116 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x0000000000000022L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration1120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_typeList1158 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_type_in_typeList1161 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_133_in_classBody1175 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1E2L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1178 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1E2L});
    public static final BitSet FOLLOW_134_in_classBody1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_interfaceBody1194 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1E2L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1197 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1E2L});
    public static final BitSet FOLLOW_134_in_interfaceBody1200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_classBodyDeclaration1212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_classBodyDeclaration1218 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_classBodyDeclaration1233 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration1245 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1A2L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_classBodyDeclaration1255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_classBodyDeclaration1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_classBodyDeclaration1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_classBodyDeclaration1335 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_classBodyDeclaration1339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_classBodyDeclaration1377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_classBodyDeclaration1379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_classBodyDeclaration1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_classBodyDeclaration1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_classBodyDeclaration1463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classBodyDeclaration1489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1522 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800100L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1546 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_genericMethodOrConstructorRest1566 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1612 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1636 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1638 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_fieldDeclaration1640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1659 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1A2L});
    public static final BitSet FOLLOW_constantDeclaration_in_interfaceBodyDeclaration1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceBodyDeclaration1687 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceBodyDeclaration1721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_interfaceBodyDeclaration1744 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceBodyDeclaration1746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceBodyDeclaration1748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceBodyDeclaration1783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceBodyDeclaration1810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceBodyDeclaration1831 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_interfaceBodyDeclaration1857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_interfaceBodyDeclaration1881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1895 = new BitSet(new long[]{0x0000000000000000L,0x0A00000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_137_in_methodDeclaratorRest1907 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_methodDeclaratorRest1909 = new BitSet(new long[]{0x0000000000000000L,0x0A00000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_methodDeclaratorRest1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1995 = new BitSet(new long[]{0x0000000000000000L,0x0A00000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_137_in_voidMethodDeclaratorRest1998 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_voidMethodDeclaratorRest2000 = new BitSet(new long[]{0x0000000000000000L,0x0A00000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_voidMethodDeclaratorRest2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest2086 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_interfaceMethodDeclaratorRest2089 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_interfaceMethodDeclaratorRest2091 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_interfaceMethodDeclaratorRest2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl2123 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800100L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl2129 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl2131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_interfaceGenericMethodDecl2155 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl2157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl2159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest2194 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_137_in_voidInterfaceMethodDeclaratorRest2197 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_voidInterfaceMethodDeclaratorRest2199 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_voidInterfaceMethodDeclaratorRest2203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest2231 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_137_in_constructorDeclaratorRest2234 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_typeList_in_constructorDeclaratorRest2236 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest2240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2273 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_variableDeclarators2276 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators2280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator2299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_variableDeclaratorRest2323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_variableDeclaratorRest2325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_140_in_variableDeclaratorRest2330 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_variableDeclaratorRest2347 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest2349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_constantDeclaration2367 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_constantDeclarators_in_constantDeclaration2369 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_constantDeclaration2371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator2388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator2390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_constantDeclarators2416 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclarators2420 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_138_in_constantDeclaratorRest2441 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_constantDeclaratorRest2443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_140_in_constantDeclaratorRest2447 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest2449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId2468 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_variableDeclaratorId2471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_variableDeclaratorId2473 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer2486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer2496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_arrayInitializer2508 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800162L,0x0000000000000F80L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_130_in_arrayInitializer2514 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer2516 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_130_in_arrayInitializer2521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_arrayInitializer2528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_modifier2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_modifier2573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_modifier2583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_modifier2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_modifier2603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_modifier2613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_modifier2623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_modifier2633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_modifier2643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_149_in_modifier2653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_modifier2663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2677 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_packageOrTypeName2680 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2682 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2726 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_typeName2728 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_typeName2730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_type2743 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_124_in_type2746 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_refComponent_in_type2750 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_type2755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_type2757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_primitiveType_in_type2779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_type2782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_type2784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_Identifier_in_refComponent2813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_refComponent2816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_primitiveType0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_variableModifier2916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_typeArguments2937 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x00000000FF800000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_130_in_typeArguments2944 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x00000000FF800000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000000CL});
    public static final BitSet FOLLOW_131_in_typeArguments2952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_159_in_typeArgument2975 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_127_in_typeArgument2984 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_type_in_typeArgument2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_typeArgument3019 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000007F800000L});
    public static final BitSet FOLLOW_type_in_typeArgument3021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList3063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_qualifiedNameList3066 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList3069 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_161_in_formalParameters3083 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000847F820000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters3085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_formalParameters3088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls3105 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls3108 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls3120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_formalParameterDecls3123 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls3125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_formalParameterDecls3159 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls3161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody3204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3222 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_qualifiedName3225 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName3229 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_integerLiteral_in_literal3252 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal3270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal3288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal3306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal3324 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_164_in_literal3342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_integerLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_booleanLiteral0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3430 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_167_in_annotation3444 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation3446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_annotation3449 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F77F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_annotation3454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3480 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_annotationName3483 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3485 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3499 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_elementValuePairs3502 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_elementValuePair3521 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_elementValueArrayInitializer3585 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820162L,0x0000000000000F80L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_130_in_elementValueArrayInitializer3591 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_134_in_elementValueArrayInitializer3600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_167_in_annotationTypeDeclaration3621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_annotationTypeDeclaration3623 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_annotationTypeBody3646 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1E2L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3650 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_annotationTypeBody3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3668 = new BitSet(new long[]{0x0000000000000402L,0x4A00002000000000L,0x000000807FFFE1A2L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3683 = new BitSet(new long[]{0x0000000000000400L,0x4A00002000000000L,0x000000807FFFE1A2L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementDeclaration3695 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationTypeElementDeclaration3707 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationTypeElementDeclaration3709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationTypeElementDeclaration3734 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationTypeElementDeclaration3736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementDeclaration3765 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationTypeElementDeclaration3767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementDeclaration3790 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationTypeElementDeclaration3792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementDeclaration3815 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationTypeElementDeclaration3817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementDeclaration3840 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_annotationTypeElementDeclaration3842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_annotationMethodRest3877 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_annotationMethodRest3880 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_defaultValue3916 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_block3933 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_blockStatement_in_block3935 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_134_in_block3938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3984 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3987 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3989 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_localVariableDeclaration3991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement4020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_169_in_statement4030 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_statement4032 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_statement4035 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000737F800122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_statement4037 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_171_in_statement4063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4065 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_statement4067 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_172_in_statement4077 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_statement4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_173_in_statement4105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_statement4107 = new BitSet(new long[]{0x0000000000000000L,0x02000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_forControl_in_statement4109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_statement4111 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_statement4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_174_in_statement4134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4136 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_statement4138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_175_in_statement4163 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_statement4165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_174_in_statement4167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4169 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_176_in_statement4196 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_statement4198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0082000000000000L});
    public static final BitSet FOLLOW_catches_in_statement4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_statement4212 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_statement4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement4242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_177_in_statement4265 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_statement4267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_178_in_statement4301 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_133_in_statement4305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0100010000000040L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement4307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_134_in_statement4309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_statement4330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_parExpression_in_statement4332 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_statement4334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_179_in_statement4355 = new BitSet(new long[]{0x0000000000000000L,0x02000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_statement4357 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_180_in_statement4380 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_statement4382 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_181_in_statement4403 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4405 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_182_in_statement4428 = new BitSet(new long[]{0x0000000000000000L,0x0200002000000000L});
    public static final BitSet FOLLOW_Identifier_in_statement4430 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_statement4451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement4466 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_statement4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_statement4484 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_statement4486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_catchClause_in_catches4511 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_183_in_catchClause4527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_161_in_catchClause4529 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_catchClause4533 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_catchClause4535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4561 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_formalParameter4564 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0100010000000000L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4594 = new BitSet(new long[]{0x0000000000000402L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4596 = new BitSet(new long[]{0x0000000000000402L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_184_in_switchLabel4624 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_switchLabel4628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_switchLabel4644 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_switchLabel4648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_168_in_switchLabel4664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_switchLabel4666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_moreStatementExpressions4685 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4721 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_forControl4724 = new BitSet(new long[]{0x0000000000000000L,0x02000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_forControl4728 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_forControl4731 = new BitSet(new long[]{0x0000000000000002L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4770 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_forInit4773 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4809 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_forVarControl4812 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_forVarControl4816 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_forVarControl4818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_parExpression4861 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_parExpression4864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_parExpression4866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4884 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_expressionList4887 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expressionList4890 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_statementExpression4906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4918 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4930 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0xFE0000000000100AL});
    public static final BitSet FOLLOW_140_in_expression4940 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_expression4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression4963 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression4965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_expression4987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression4989 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression4991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_expression5013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression5015 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_expression5039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression5041 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_expression5068 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_expression5092 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_expression5116 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_expression5143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression5145 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_expression5169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_expression5171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression5173 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_expression5197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_expression5199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression5201 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_expression5225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_expression5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_expression5229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_expression5231 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_expression5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression5277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_159_in_conditionalExpression5294 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_conditionalExpression5298 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5347 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_192_in_conditionalOrExpression5365 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalOrExpression5367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5413 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_193_in_conditionalAndExpression5431 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalAndExpression5433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5485 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_194_in_inclusiveOrExpression5507 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_inclusiveOrExpression5509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5556 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_195_in_exclusiveOrExpression5572 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_exclusiveOrExpression5574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_132_in_andExpression5634 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_andExpression_in_andExpression5636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000030L});
    public static final BitSet FOLLOW_196_in_equalityExpression5696 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_197_in_equalityExpression5719 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_198_in_instanceOfExpression5780 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5826 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_129_in_relationalExpression5842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_relationalExpression5844 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_relationalExpression5867 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_relationalExpression5890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_relationalExpression5892 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_relationalExpression5915 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_129_in_shiftExpression5981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_shiftExpression5983 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_131_in_shiftExpression5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_shiftExpression5989 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5992 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_131_in_shiftExpression6026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_shiftExpression6028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_shiftExpression6030 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression6032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6075 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_185_in_additiveExpression6094 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_186_in_additiveExpression6098 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression6101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0600000000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6152 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_125_in_multiplicativeExpression6172 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_187_in_multiplicativeExpression6176 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_191_in_multiplicativeExpression6180 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression6183 = new BitSet(new long[]{0x0000000000000002L,0x2000000000000000L,0x8800000000000000L});
    public static final BitSet FOLLOW_185_in_unaryExpression6235 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_unaryExpression6249 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_unaryExpression6269 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_unaryExpression6289 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression6291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression6309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_201_in_unaryExpressionNotPlusMinus6340 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_202_in_unaryExpressionNotPlusMinus6359 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus6361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus6386 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000400L,0x0000000000000180L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus6396 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000000000400L,0x0000000000000180L});
    public static final BitSet FOLLOW_199_in_unaryExpressionNotPlusMinus6409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_unaryExpressionNotPlusMinus6431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_199_in_unaryExpressionNotPlusMinus6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_200_in_unaryExpressionNotPlusMinus6490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_castExpression6529 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression6531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_castExpression6533 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression6535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_castExpression6558 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820000L});
    public static final BitSet FOLLOW_type_in_castExpression6560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_castExpression6562 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_castExpression6583 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_castExpression6585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_castExpression6587 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression6589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary6609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6616 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary6618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary6642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_primary6652 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6654 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_primitiveType_in_primary6657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_primary6673 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_primary6675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_primary6677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_primary6682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_primary6684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_primary6715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_primary6717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_primary6753 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary6755 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_primary6761 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_124_in_primary6764 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_primary6768 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_138_in_primary6787 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_primary6789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_primary6791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_primary6796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_primary6798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_primary6831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_primary6833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_arrayInitializer_in_primary6837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_primary6866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary6898 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_primary6900 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_primary6902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_primary6926 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_primary6928 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_primary6930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_primary6952 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_arguments_in_primary6962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary7000 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_arguments_in_primary7016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator7061 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator7063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest7085 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000023L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest7087 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation7108 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_nonWildcardTypeArguments7122 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments7124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_nonWildcardTypeArguments7126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_160_in_explicitGenericInvocationSuffix7142 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix7144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix7158 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix7160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_superSuffix7191 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix7193 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_arguments_in_superSuffix7196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_selector7210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_selector7212 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_arguments_in_selector7214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_selector7232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_203_in_selector7234 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7237 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_innerCreator_in_selector7241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_selector7256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector7258 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_selector7260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_selector7279 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_selector7281 = new BitSet(new long[]{0x0000000000000002L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_arguments_in_selector7291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_selector7326 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_selector7328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_selector7330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_arguments7349 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F77F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expressionList_in_arguments7352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_arguments7355 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_Java475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_synpred36_Java1218 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_synpred36_Java1220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_synpred38_Java1233 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_synpred38_Java1236 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred41_Java1280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred42_Java1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaration_in_synpred51_Java1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred52_Java1687 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred52_Java1689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_synpred52_Java1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_124_in_synpred90_Java2680 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_synpred90_Java2682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_synpred108_Java2984 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_type_in_synpred108_Java2986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred124_Java3430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_synpred134_Java3650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred148_Java3959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred149_Java3964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_172_in_synpred154_Java4077 = new BitSet(new long[]{0x0000000000000400L,0x4A000FE000000000L,0x067DEAF37FFFE3E2L,0x0000000000000F80L});
    public static final BitSet FOLLOW_statement_in_synpred154_Java4079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred159_Java4208 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_177_in_synpred159_Java4212 = new BitSet(new long[]{0x0000000000000000L,0x0800000000000000L,0x0000000000000220L});
    public static final BitSet FOLLOW_block_in_synpred159_Java4214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred160_Java4242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred177_Java4624 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_constantExpression_in_synpred177_Java4626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_synpred177_Java4628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_184_in_synpred178_Java4644 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred178_Java4646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_170_in_synpred178_Java4648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred180_Java4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred185_Java4770 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_type_in_synpred185_Java4773 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred185_Java4775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_synpred188_Java4940 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred188_Java4942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_185_in_synpred189_Java4961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred189_Java4963 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred189_Java4965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_186_in_synpred190_Java4987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred190_Java4989 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred190_Java4991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_125_in_synpred191_Java5013 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred191_Java5015 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred191_Java5017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_187_in_synpred192_Java5039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred192_Java5041 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred192_Java5043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_synpred193_Java5068 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred193_Java5070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_189_in_synpred194_Java5092 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred194_Java5094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_190_in_synpred195_Java5116 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred195_Java5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_191_in_synpred196_Java5143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred196_Java5145 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred196_Java5147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred197_Java5169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred197_Java5171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred197_Java5173 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred197_Java5175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred198_Java5197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred198_Java5199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred198_Java5201 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred198_Java5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred199_Java5225 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred199_Java5227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred199_Java5229 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_140_in_synpred199_Java5231 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred199_Java5233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred210_Java5867 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred210_Java5869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred214_Java5981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred214_Java5983 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_131_in_synpred214_Java5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred214_Java5989 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred214_Java5992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred215_Java5981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_synpred215_Java5983 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_131_in_synpred215_Java5987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred215_Java5989 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred215_Java5992 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x000000000000000AL});
    public static final BitSet FOLLOW_131_in_synpred216_Java6026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred216_Java6028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred216_Java6030 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred216_Java6032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_synpred217_Java6026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred217_Java6028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_131_in_synpred217_Java6030 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred217_Java6032 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_castExpression_in_synpred231_Java6379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_synpred238_Java6529 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred238_Java6531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_synpred238_Java6533 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred238_Java6535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_synpred239_Java6558 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_type_in_synpred239_Java6560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_162_in_synpred239_Java6562 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_synpred239_Java6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_synpred244_Java6673 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred244_Java6675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred244_Java6677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_synpred248_Java6652 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred248_Java6654 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x000000807F820002L});
    public static final BitSet FOLLOW_primitiveType_in_synpred248_Java6657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred248_Java6673 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred248_Java6675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred248_Java6677 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred248_Java6682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred248_Java6684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred248_Java6715 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred248_Java6717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred248_Java6721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_synpred251_Java6787 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred251_Java6789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred251_Java6791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_203_in_synpred256_Java6753 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred256_Java6755 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_synpred256_Java6761 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_124_in_synpred256_Java6764 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_refComponent_in_synpred256_Java6768 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L,0x0000000200000400L});
    public static final BitSet FOLLOW_138_in_synpred256_Java6787 = new BitSet(new long[]{0x0000000000000000L,0x00000FE000000000L,0x060000F37F820122L,0x0000000000000F80L});
    public static final BitSet FOLLOW_expression_in_synpred256_Java6789 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred256_Java6791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred256_Java6796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred256_Java6798 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_138_in_synpred256_Java6831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_139_in_synpred256_Java6833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000420L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred256_Java6837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_synpred256_Java6866 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred257_Java6898 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_synpred257_Java6900 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_synpred257_Java6902 = new BitSet(new long[]{0x0000000000000002L});

}